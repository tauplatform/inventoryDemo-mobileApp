#pragma once

#include "../../../../shared/generated/cpp/IBarcodeChainway.h"
#include "api_generator/uwp/IMethodResult.h"

namespace rhoruntime
{
    public interface class IBarcodeChainwayImpl
    {
    public:
        int64 getNativeImpl();
        void setNativeImpl(Platform::String^ strID, int64 native);


        void getAutoEnter(IMethodResult^ oResult);
        void setAutoEnter(bool autoEnter, IMethodResult^ oResult);
        void getAutoTab(IMethodResult^ oResult);
        void setAutoTab(bool autoTab, IMethodResult^ oResult);
        void getHapticFeedback(IMethodResult^ oResult);
        void setHapticFeedback(bool hapticFeedback, IMethodResult^ oResult);
        void getLinearSecurityLevel(IMethodResult^ oResult);
        void setLinearSecurityLevel(Platform::String^ linearSecurityLevel, IMethodResult^ oResult);
        void getScanTimeout(IMethodResult^ oResult);
        void setScanTimeout(int scanTimeout, IMethodResult^ oResult);
        void getRasterMode(IMethodResult^ oResult);
        void setRasterMode(Platform::String^ rasterMode, IMethodResult^ oResult);
        void getRasterHeight(IMethodResult^ oResult);
        void setRasterHeight(int rasterHeight, IMethodResult^ oResult);
        void getAimType(IMethodResult^ oResult);
        void setAimType(Platform::String^ aimType, IMethodResult^ oResult);
        void getTimedAimDuration(IMethodResult^ oResult);
        void setTimedAimDuration(int timedAimDuration, IMethodResult^ oResult);
        void getSameSymbolTimeout(IMethodResult^ oResult);
        void setSameSymbolTimeout(int sameSymbolTimeout, IMethodResult^ oResult);
        void getDifferentSymbolTimeout(IMethodResult^ oResult);
        void setDifferentSymbolTimeout(int differentSymbolTimeout, IMethodResult^ oResult);
        void getAimMode(IMethodResult^ oResult);
        void setAimMode(Platform::String^ aimMode, IMethodResult^ oResult);
        void getPicklistMode(IMethodResult^ oResult);
        void setPicklistMode(Platform::String^ picklistMode, IMethodResult^ oResult);
        void getViewfinderMode(IMethodResult^ oResult);
        void setViewfinderMode(Platform::String^ viewfinderMode, IMethodResult^ oResult);
        void getViewfinderX(IMethodResult^ oResult);
        void setViewfinderX(int viewfinderX, IMethodResult^ oResult);
        void getViewfinderY(IMethodResult^ oResult);
        void setViewfinderY(int viewfinderY, IMethodResult^ oResult);
        void getViewfinderWidth(IMethodResult^ oResult);
        void setViewfinderWidth(int viewfinderWidth, IMethodResult^ oResult);
        void getViewfinderHeight(IMethodResult^ oResult);
        void setViewfinderHeight(int viewfinderHeight, IMethodResult^ oResult);
        void getViewfinderFeedback(IMethodResult^ oResult);
        void setViewfinderFeedback(Platform::String^ viewfinderFeedback, IMethodResult^ oResult);
        void getViewfinderFeedbackTime(IMethodResult^ oResult);
        void setViewfinderFeedbackTime(int viewfinderFeedbackTime, IMethodResult^ oResult);
        void getFocusMode(IMethodResult^ oResult);
        void setFocusMode(Platform::String^ focusMode, IMethodResult^ oResult);
        void getIlluminationMode(IMethodResult^ oResult);
        void setIlluminationMode(Platform::String^ illuminationMode, IMethodResult^ oResult);
        void getDpmMode(IMethodResult^ oResult);
        void setDpmMode(bool dpmMode, IMethodResult^ oResult);
        void getInverse1dMode(IMethodResult^ oResult);
        void setInverse1dMode(Platform::String^ inverse1dMode, IMethodResult^ oResult);
        void getPoorQuality1dMode(IMethodResult^ oResult);
        void setPoorQuality1dMode(bool poorQuality1dMode, IMethodResult^ oResult);
        void getBeamWidth(IMethodResult^ oResult);
        void setBeamWidth(Platform::String^ beamWidth, IMethodResult^ oResult);
        void getDbpMode(IMethodResult^ oResult);
        void setDbpMode(Platform::String^ dbpMode, IMethodResult^ oResult);
        void getKlasseEins(IMethodResult^ oResult);
        void setKlasseEins(bool klasseEins, IMethodResult^ oResult);
        void getAdaptiveScanning(IMethodResult^ oResult);
        void setAdaptiveScanning(bool adaptiveScanning, IMethodResult^ oResult);
        void getBidirectionalRedundancy(IMethodResult^ oResult);
        void setBidirectionalRedundancy(bool bidirectionalRedundancy, IMethodResult^ oResult);
        void getBarcodeDataFormat(IMethodResult^ oResult);
        void setBarcodeDataFormat(Platform::String^ barcodeDataFormat, IMethodResult^ oResult);
        void getDataBufferSize(IMethodResult^ oResult);
        void setDataBufferSize(int dataBufferSize, IMethodResult^ oResult);
        void getConnectionIdleTimeout(IMethodResult^ oResult);
        void setConnectionIdleTimeout(int connectionIdleTimeout, IMethodResult^ oResult);
        void getDisconnectBtOnDisable(IMethodResult^ oResult);
        void setDisconnectBtOnDisable(bool disconnectBtOnDisable, IMethodResult^ oResult);
        void getDisplayBtAddressBarcodeOnEnable(IMethodResult^ oResult);
        void setDisplayBtAddressBarcodeOnEnable(bool displayBtAddressBarcodeOnEnable, IMethodResult^ oResult);
        void getEnableTimeout(IMethodResult^ oResult);
        void setEnableTimeout(int enableTimeout, IMethodResult^ oResult);
        void getFriendlyName(IMethodResult^ oResult);
        void getLcdMode(IMethodResult^ oResult);
        void setLcdMode(bool lcdMode, IMethodResult^ oResult);
        void getLowBatteryScan(IMethodResult^ oResult);
        void setLowBatteryScan(bool lowBatteryScan, IMethodResult^ oResult);
        void getTriggerConnected(IMethodResult^ oResult);
        void setTriggerConnected(bool triggerConnected, IMethodResult^ oResult);
        void getDisableScannerDuringNavigate(IMethodResult^ oResult);
        void setDisableScannerDuringNavigate(bool disableScannerDuringNavigate, IMethodResult^ oResult);
        void getDecodeVolume(IMethodResult^ oResult);
        void setDecodeVolume(int decodeVolume, IMethodResult^ oResult);
        void getDecodeDuration(IMethodResult^ oResult);
        void setDecodeDuration(int decodeDuration, IMethodResult^ oResult);
        void getDecodeFrequency(IMethodResult^ oResult);
        void setDecodeFrequency(int decodeFrequency, IMethodResult^ oResult);
        void getInvalidDecodeFrequency(IMethodResult^ oResult);
        void setInvalidDecodeFrequency(int invalidDecodeFrequency, IMethodResult^ oResult);
        void getDecodeSound(IMethodResult^ oResult);
        void setDecodeSound(Platform::String^ decodeSound, IMethodResult^ oResult);
        void getInvalidDecodeSound(IMethodResult^ oResult);
        void setInvalidDecodeSound(Platform::String^ invalidDecodeSound, IMethodResult^ oResult);
        void getScannerType(IMethodResult^ oResult);
        void getAllDecoders(IMethodResult^ oResult);
        void setAllDecoders(bool allDecoders, IMethodResult^ oResult);
        void getAztec(IMethodResult^ oResult);
        void setAztec(bool aztec, IMethodResult^ oResult);
        void getChinese2of5(IMethodResult^ oResult);
        void setChinese2of5(bool chinese2of5, IMethodResult^ oResult);
        void getCodabar(IMethodResult^ oResult);
        void setCodabar(bool codabar, IMethodResult^ oResult);
        void getCodabarClsiEditing(IMethodResult^ oResult);
        void setCodabarClsiEditing(bool codabarClsiEditing, IMethodResult^ oResult);
        void getCodabarMaxLength(IMethodResult^ oResult);
        void setCodabarMaxLength(int codabarMaxLength, IMethodResult^ oResult);
        void getCodabarMinLength(IMethodResult^ oResult);
        void setCodabarMinLength(int codabarMinLength, IMethodResult^ oResult);
        void getCodabarNotisEditing(IMethodResult^ oResult);
        void setCodabarNotisEditing(bool codabarNotisEditing, IMethodResult^ oResult);
        void getCodabarRedundancy(IMethodResult^ oResult);
        void setCodabarRedundancy(bool codabarRedundancy, IMethodResult^ oResult);
        void getCode11(IMethodResult^ oResult);
        void setCode11(bool code11, IMethodResult^ oResult);
        void getCode11checkDigitCount(IMethodResult^ oResult);
        void setCode11checkDigitCount(Platform::String^ code11checkDigitCount, IMethodResult^ oResult);
        void getCode11maxLength(IMethodResult^ oResult);
        void setCode11maxLength(int code11maxLength, IMethodResult^ oResult);
        void getCode11minLength(IMethodResult^ oResult);
        void setCode11minLength(int code11minLength, IMethodResult^ oResult);
        void getCode11redundancy(IMethodResult^ oResult);
        void setCode11redundancy(bool code11redundancy, IMethodResult^ oResult);
        void getCode11reportCheckDigit(IMethodResult^ oResult);
        void setCode11reportCheckDigit(bool code11reportCheckDigit, IMethodResult^ oResult);
        void getCode128(IMethodResult^ oResult);
        void setCode128(bool code128, IMethodResult^ oResult);
        void getCode128checkIsBtTable(IMethodResult^ oResult);
        void setCode128checkIsBtTable(bool code128checkIsBtTable, IMethodResult^ oResult);
        void getCode128ean128(IMethodResult^ oResult);
        void setCode128ean128(bool code128ean128, IMethodResult^ oResult);
        void getCode128isbt128(IMethodResult^ oResult);
        void setCode128isbt128(bool code128isbt128, IMethodResult^ oResult);
        void getCode128isbt128ConcatMode(IMethodResult^ oResult);
        void setCode128isbt128ConcatMode(Platform::String^ code128isbt128ConcatMode, IMethodResult^ oResult);
        void getCode128maxLength(IMethodResult^ oResult);
        void setCode128maxLength(int code128maxLength, IMethodResult^ oResult);
        void getCode128minLength(IMethodResult^ oResult);
        void setCode128minLength(int code128minLength, IMethodResult^ oResult);
        void getCode128other128(IMethodResult^ oResult);
        void setCode128other128(bool code128other128, IMethodResult^ oResult);
        void getCode128redundancy(IMethodResult^ oResult);
        void setCode128redundancy(bool code128redundancy, IMethodResult^ oResult);
        void getCode128securityLevel(IMethodResult^ oResult);
        void setCode128securityLevel(int code128securityLevel, IMethodResult^ oResult);
        void getCompositeAb(IMethodResult^ oResult);
        void setCompositeAb(bool compositeAb, IMethodResult^ oResult);
        void getCompositeAbUccLinkMode(IMethodResult^ oResult);
        void setCompositeAbUccLinkMode(Platform::String^ compositeAbUccLinkMode, IMethodResult^ oResult);
        void getCompositeAbUseUpcPreambleCheckDigitRules(IMethodResult^ oResult);
        void setCompositeAbUseUpcPreambleCheckDigitRules(bool compositeAbUseUpcPreambleCheckDigitRules, IMethodResult^ oResult);
        void getCompositeC(IMethodResult^ oResult);
        void setCompositeC(bool compositeC, IMethodResult^ oResult);
        void getCode39(IMethodResult^ oResult);
        void setCode39(bool code39, IMethodResult^ oResult);
        void getCode39code32Prefix(IMethodResult^ oResult);
        void setCode39code32Prefix(bool code39code32Prefix, IMethodResult^ oResult);
        void getCode39convertToCode32(IMethodResult^ oResult);
        void setCode39convertToCode32(bool code39convertToCode32, IMethodResult^ oResult);
        void getCode39fullAscii(IMethodResult^ oResult);
        void setCode39fullAscii(bool code39fullAscii, IMethodResult^ oResult);
        void getCode39maxLength(IMethodResult^ oResult);
        void setCode39maxLength(int code39maxLength, IMethodResult^ oResult);
        void getCode39minLength(IMethodResult^ oResult);
        void setCode39minLength(int code39minLength, IMethodResult^ oResult);
        void getCode39redundancy(IMethodResult^ oResult);
        void setCode39redundancy(bool code39redundancy, IMethodResult^ oResult);
        void getCode39reportCheckDigit(IMethodResult^ oResult);
        void setCode39reportCheckDigit(bool code39reportCheckDigit, IMethodResult^ oResult);
        void getCode39securityLevel(IMethodResult^ oResult);
        void setCode39securityLevel(int code39securityLevel, IMethodResult^ oResult);
        void getCode39verifyCheckDigit(IMethodResult^ oResult);
        void setCode39verifyCheckDigit(bool code39verifyCheckDigit, IMethodResult^ oResult);
        void getCode93(IMethodResult^ oResult);
        void setCode93(bool code93, IMethodResult^ oResult);
        void getCode93maxLength(IMethodResult^ oResult);
        void setCode93maxLength(int code93maxLength, IMethodResult^ oResult);
        void getCode93minLength(IMethodResult^ oResult);
        void setCode93minLength(int code93minLength, IMethodResult^ oResult);
        void getCode93redundancy(IMethodResult^ oResult);
        void setCode93redundancy(bool code93redundancy, IMethodResult^ oResult);
        void getD2of5(IMethodResult^ oResult);
        void setD2of5(bool d2of5, IMethodResult^ oResult);
        void getD2of5maxLength(IMethodResult^ oResult);
        void setD2of5maxLength(int d2of5maxLength, IMethodResult^ oResult);
        void getD2of5minLength(IMethodResult^ oResult);
        void setD2of5minLength(int d2of5minLength, IMethodResult^ oResult);
        void getD2of5redundancy(IMethodResult^ oResult);
        void setD2of5redundancy(bool d2of5redundancy, IMethodResult^ oResult);
        void getDatamatrix(IMethodResult^ oResult);
        void setDatamatrix(bool datamatrix, IMethodResult^ oResult);
        void getEan13(IMethodResult^ oResult);
        void setEan13(bool ean13, IMethodResult^ oResult);
        void getEan8(IMethodResult^ oResult);
        void setEan8(bool ean8, IMethodResult^ oResult);
        void getEan8convertToEan13(IMethodResult^ oResult);
        void setEan8convertToEan13(bool ean8convertToEan13, IMethodResult^ oResult);
        void getI2of5(IMethodResult^ oResult);
        void setI2of5(bool i2of5, IMethodResult^ oResult);
        void getI2of5convertToEan13(IMethodResult^ oResult);
        void setI2of5convertToEan13(bool i2of5convertToEan13, IMethodResult^ oResult);
        void getI2of5maxLength(IMethodResult^ oResult);
        void setI2of5maxLength(int i2of5maxLength, IMethodResult^ oResult);
        void getI2of5minLength(IMethodResult^ oResult);
        void setI2of5minLength(int i2of5minLength, IMethodResult^ oResult);
        void getI2of5redundancy(IMethodResult^ oResult);
        void setI2of5redundancy(bool i2of5redundancy, IMethodResult^ oResult);
        void getI2of5reportCheckDigit(IMethodResult^ oResult);
        void setI2of5reportCheckDigit(bool i2of5reportCheckDigit, IMethodResult^ oResult);
        void getI2of5verifyCheckDigit(IMethodResult^ oResult);
        void setI2of5verifyCheckDigit(Platform::String^ i2of5verifyCheckDigit, IMethodResult^ oResult);
        void getKorean3of5(IMethodResult^ oResult);
        void setKorean3of5(bool korean3of5, IMethodResult^ oResult);
        void getKorean3of5redundancy(IMethodResult^ oResult);
        void setKorean3of5redundancy(bool korean3of5redundancy, IMethodResult^ oResult);
        void getKorean3of5maxLength(IMethodResult^ oResult);
        void setKorean3of5maxLength(int korean3of5maxLength, IMethodResult^ oResult);
        void getKorean3of5minLength(IMethodResult^ oResult);
        void setKorean3of5minLength(int korean3of5minLength, IMethodResult^ oResult);
        void getMacroPdf(IMethodResult^ oResult);
        void setMacroPdf(bool macroPdf, IMethodResult^ oResult);
        void getMacroPdfBufferLabels(IMethodResult^ oResult);
        void setMacroPdfBufferLabels(bool macroPdfBufferLabels, IMethodResult^ oResult);
        void getMacroPdfConvertToPdf417(IMethodResult^ oResult);
        void setMacroPdfConvertToPdf417(bool macroPdfConvertToPdf417, IMethodResult^ oResult);
        void getMacroPdfExclusive(IMethodResult^ oResult);
        void setMacroPdfExclusive(bool macroPdfExclusive, IMethodResult^ oResult);
        void getMacroMicroPdf(IMethodResult^ oResult);
        void setMacroMicroPdf(bool macroMicroPdf, IMethodResult^ oResult);
        void getMacroMicroPdfBufferLabels(IMethodResult^ oResult);
        void setMacroMicroPdfBufferLabels(bool macroMicroPdfBufferLabels, IMethodResult^ oResult);
        void getMacroMicroPdfConvertToMicroPdf(IMethodResult^ oResult);
        void setMacroMicroPdfConvertToMicroPdf(bool macroMicroPdfConvertToMicroPdf, IMethodResult^ oResult);
        void getMacroMicroPdfExclusive(IMethodResult^ oResult);
        void setMacroMicroPdfExclusive(bool macroMicroPdfExclusive, IMethodResult^ oResult);
        void getMacroMicroPdfReportAppendInfo(IMethodResult^ oResult);
        void setMacroMicroPdfReportAppendInfo(bool macroMicroPdfReportAppendInfo, IMethodResult^ oResult);
        void getMatrix2of5(IMethodResult^ oResult);
        void setMatrix2of5(bool matrix2of5, IMethodResult^ oResult);
        void getMatrix2of5maxLength(IMethodResult^ oResult);
        void setMatrix2of5maxLength(int matrix2of5maxLength, IMethodResult^ oResult);
        void getMatrix2of5minLength(IMethodResult^ oResult);
        void setMatrix2of5minLength(int matrix2of5minLength, IMethodResult^ oResult);
        void getMatrix2of5reportCheckDigit(IMethodResult^ oResult);
        void setMatrix2of5reportCheckDigit(bool matrix2of5reportCheckDigit, IMethodResult^ oResult);
        void getMatrix2of5verifyCheckDigit(IMethodResult^ oResult);
        void setMatrix2of5verifyCheckDigit(bool matrix2of5verifyCheckDigit, IMethodResult^ oResult);
        void getMaxiCode(IMethodResult^ oResult);
        void setMaxiCode(bool maxiCode, IMethodResult^ oResult);
        void getMicroPdf(IMethodResult^ oResult);
        void setMicroPdf(bool microPdf, IMethodResult^ oResult);
        void getMicroQr(IMethodResult^ oResult);
        void setMicroQr(bool microQr, IMethodResult^ oResult);
        void getMsi(IMethodResult^ oResult);
        void setMsi(bool msi, IMethodResult^ oResult);
        void getMsiCheckDigits(IMethodResult^ oResult);
        void setMsiCheckDigits(Platform::String^ msiCheckDigits, IMethodResult^ oResult);
        void getMsiCheckDigitScheme(IMethodResult^ oResult);
        void setMsiCheckDigitScheme(Platform::String^ msiCheckDigitScheme, IMethodResult^ oResult);
        void getMsiMaxLength(IMethodResult^ oResult);
        void setMsiMaxLength(int msiMaxLength, IMethodResult^ oResult);
        void getMsiMinLength(IMethodResult^ oResult);
        void setMsiMinLength(int msiMinLength, IMethodResult^ oResult);
        void getMsiRedundancy(IMethodResult^ oResult);
        void setMsiRedundancy(bool msiRedundancy, IMethodResult^ oResult);
        void getMsiReportCheckDigit(IMethodResult^ oResult);
        void setMsiReportCheckDigit(bool msiReportCheckDigit, IMethodResult^ oResult);
        void getPdf417(IMethodResult^ oResult);
        void setPdf417(bool pdf417, IMethodResult^ oResult);
        void getSignature(IMethodResult^ oResult);
        void setSignature(bool signature, IMethodResult^ oResult);
        void getSignatureImageHeight(IMethodResult^ oResult);
        void setSignatureImageHeight(int signatureImageHeight, IMethodResult^ oResult);
        void getSignatureImageWidth(IMethodResult^ oResult);
        void setSignatureImageWidth(int signatureImageWidth, IMethodResult^ oResult);
        void getSignatureImageQuality(IMethodResult^ oResult);
        void setSignatureImageQuality(int signatureImageQuality, IMethodResult^ oResult);
        void getAusPostal(IMethodResult^ oResult);
        void setAusPostal(bool ausPostal, IMethodResult^ oResult);
        void getCanPostal(IMethodResult^ oResult);
        void setCanPostal(bool canPostal, IMethodResult^ oResult);
        void getDutchPostal(IMethodResult^ oResult);
        void setDutchPostal(bool dutchPostal, IMethodResult^ oResult);
        void getJapPostal(IMethodResult^ oResult);
        void setJapPostal(bool japPostal, IMethodResult^ oResult);
        void getUkPostal(IMethodResult^ oResult);
        void setUkPostal(bool ukPostal, IMethodResult^ oResult);
        void getUkPostalReportCheckDigit(IMethodResult^ oResult);
        void setUkPostalReportCheckDigit(bool ukPostalReportCheckDigit, IMethodResult^ oResult);
        void getUs4state(IMethodResult^ oResult);
        void setUs4state(bool us4state, IMethodResult^ oResult);
        void getUs4stateFics(IMethodResult^ oResult);
        void setUs4stateFics(bool us4stateFics, IMethodResult^ oResult);
        void getUsPlanet(IMethodResult^ oResult);
        void setUsPlanet(bool usPlanet, IMethodResult^ oResult);
        void getUsPlanetReportCheckDigit(IMethodResult^ oResult);
        void setUsPlanetReportCheckDigit(bool usPlanetReportCheckDigit, IMethodResult^ oResult);
        void getUsPostNet(IMethodResult^ oResult);
        void setUsPostNet(bool usPostNet, IMethodResult^ oResult);
        void getUsPostNetReportCheckDigit(IMethodResult^ oResult);
        void setUsPostNetReportCheckDigit(bool usPostNetReportCheckDigit, IMethodResult^ oResult);
        void getQrCode(IMethodResult^ oResult);
        void setQrCode(bool qrCode, IMethodResult^ oResult);
        void getGs1dataBar(IMethodResult^ oResult);
        void setGs1dataBar(bool gs1dataBar, IMethodResult^ oResult);
        void getGs1dataBarExpanded(IMethodResult^ oResult);
        void setGs1dataBarExpanded(bool gs1dataBarExpanded, IMethodResult^ oResult);
        void getGs1dataBarLimited(IMethodResult^ oResult);
        void setGs1dataBarLimited(bool gs1dataBarLimited, IMethodResult^ oResult);
        void getTlc39(IMethodResult^ oResult);
        void setTlc39(bool tlc39, IMethodResult^ oResult);
        void getTrioptic39(IMethodResult^ oResult);
        void setTrioptic39(bool trioptic39, IMethodResult^ oResult);
        void getTrioptic39Redundancy(IMethodResult^ oResult);
        void setTrioptic39Redundancy(bool trioptic39Redundancy, IMethodResult^ oResult);
        void getUpcEanBookland(IMethodResult^ oResult);
        void setUpcEanBookland(bool upcEanBookland, IMethodResult^ oResult);
        void getUpcEanBooklandFormat(IMethodResult^ oResult);
        void setUpcEanBooklandFormat(Platform::String^ upcEanBooklandFormat, IMethodResult^ oResult);
        void getUpcEanConvertGs1dataBarToUpcEan(IMethodResult^ oResult);
        void setUpcEanConvertGs1dataBarToUpcEan(bool upcEanConvertGs1dataBarToUpcEan, IMethodResult^ oResult);
        void getUpcEanCoupon(IMethodResult^ oResult);
        void setUpcEanCoupon(bool upcEanCoupon, IMethodResult^ oResult);
        void getUpcEanLinearDecode(IMethodResult^ oResult);
        void setUpcEanLinearDecode(bool upcEanLinearDecode, IMethodResult^ oResult);
        void getUpcEanRandomWeightCheckDigit(IMethodResult^ oResult);
        void setUpcEanRandomWeightCheckDigit(bool upcEanRandomWeightCheckDigit, IMethodResult^ oResult);
        void getUpcEanRetryCount(IMethodResult^ oResult);
        void setUpcEanRetryCount(int upcEanRetryCount, IMethodResult^ oResult);
        void getUpcEanSecurityLevel(IMethodResult^ oResult);
        void setUpcEanSecurityLevel(int upcEanSecurityLevel, IMethodResult^ oResult);
        void getUpcEanSupplemental2(IMethodResult^ oResult);
        void setUpcEanSupplemental2(bool upcEanSupplemental2, IMethodResult^ oResult);
        void getUpcEanSupplemental5(IMethodResult^ oResult);
        void setUpcEanSupplemental5(bool upcEanSupplemental5, IMethodResult^ oResult);
        void getUpcEanSupplementalMode(IMethodResult^ oResult);
        void setUpcEanSupplementalMode(Platform::String^ upcEanSupplementalMode, IMethodResult^ oResult);
        void getUpca(IMethodResult^ oResult);
        void setUpca(bool upca, IMethodResult^ oResult);
        void getUpcaPreamble(IMethodResult^ oResult);
        void setUpcaPreamble(Platform::String^ upcaPreamble, IMethodResult^ oResult);
        void getUpcaReportCheckDigit(IMethodResult^ oResult);
        void setUpcaReportCheckDigit(bool upcaReportCheckDigit, IMethodResult^ oResult);
        void getUpce0(IMethodResult^ oResult);
        void setUpce0(bool upce0, IMethodResult^ oResult);
        void getUpce0convertToUpca(IMethodResult^ oResult);
        void setUpce0convertToUpca(bool upce0convertToUpca, IMethodResult^ oResult);
        void getUpce0preamble(IMethodResult^ oResult);
        void setUpce0preamble(Platform::String^ upce0preamble, IMethodResult^ oResult);
        void getUpce0reportCheckDigit(IMethodResult^ oResult);
        void setUpce0reportCheckDigit(bool upce0reportCheckDigit, IMethodResult^ oResult);
        void getUpce1(IMethodResult^ oResult);
        void setUpce1(bool upce1, IMethodResult^ oResult);
        void getUpce1convertToUpca(IMethodResult^ oResult);
        void setUpce1convertToUpca(bool upce1convertToUpca, IMethodResult^ oResult);
        void getUpce1preamble(IMethodResult^ oResult);
        void setUpce1preamble(Platform::String^ upce1preamble, IMethodResult^ oResult);
        void getUpce1reportCheckDigit(IMethodResult^ oResult);
        void setUpce1reportCheckDigit(bool upce1reportCheckDigit, IMethodResult^ oResult);
        void getWebcode(IMethodResult^ oResult);
        void setWebcode(bool webcode, IMethodResult^ oResult);
        void getWebcodeDecodeGtSubtype(IMethodResult^ oResult);
        void setWebcodeDecodeGtSubtype(bool webcodeDecodeGtSubtype, IMethodResult^ oResult);
        void getRsmModelNumber(IMethodResult^ oResult);
        void getRsmSerialNumber(IMethodResult^ oResult);
        void getRsmDateOfManufacture(IMethodResult^ oResult);
        void getRsmDateOfService(IMethodResult^ oResult);
        void getRsmBluetoothAddress(IMethodResult^ oResult);
        void getRsmFirmwareVersion(IMethodResult^ oResult);
        void getRsmDeviceClass(IMethodResult^ oResult);
        void getRsmBatteryStatus(IMethodResult^ oResult);
        void getRsmBatteryCapacity(IMethodResult^ oResult);
        void getRsmBatteryId(IMethodResult^ oResult);
        void getRsmBluetoothAuthentication(IMethodResult^ oResult);
        void setRsmBluetoothAuthentication(bool rsmBluetoothAuthentication, IMethodResult^ oResult);
        void getRsmBluetoothEncryption(IMethodResult^ oResult);
        void setRsmBluetoothEncryption(bool rsmBluetoothEncryption, IMethodResult^ oResult);
        void getRsmBluetoothPinCode(IMethodResult^ oResult);
        void setRsmBluetoothPinCode(Platform::String^ rsmBluetoothPinCode, IMethodResult^ oResult);
        void getRsmBluetoothPinCodeType(IMethodResult^ oResult);
        void setRsmBluetoothPinCodeType(Platform::String^ rsmBluetoothPinCodeType, IMethodResult^ oResult);
        void getRsmBluetoothReconnectionAttempts(IMethodResult^ oResult);
        void setRsmBluetoothReconnectionAttempts(int rsmBluetoothReconnectionAttempts, IMethodResult^ oResult);
        void getRsmBluetoothBeepOnReconnectAttempt(IMethodResult^ oResult);
        void setRsmBluetoothBeepOnReconnectAttempt(bool rsmBluetoothBeepOnReconnectAttempt, IMethodResult^ oResult);
        void getRsmBluetoothHidAutoReconnect(IMethodResult^ oResult);
        void setRsmBluetoothHidAutoReconnect(Platform::String^ rsmBluetoothHidAutoReconnect, IMethodResult^ oResult);
        void getRsmBluetoothFriendlyName(IMethodResult^ oResult);
        void setRsmBluetoothFriendlyName(Platform::String^ rsmBluetoothFriendlyName, IMethodResult^ oResult);
        void getRsmBluetoothInquiryMode(IMethodResult^ oResult);
        void setRsmBluetoothInquiryMode(Platform::String^ rsmBluetoothInquiryMode, IMethodResult^ oResult);
        void getRsmBluetoothAutoReconnect(IMethodResult^ oResult);
        void setRsmBluetoothAutoReconnect(Platform::String^ rsmBluetoothAutoReconnect, IMethodResult^ oResult);
        void getRsmForceSavePairingBarcode(IMethodResult^ oResult);
        void setRsmForceSavePairingBarcode(bool rsmForceSavePairingBarcode, IMethodResult^ oResult);
        void getRsmLowBatteryIndication(IMethodResult^ oResult);
        void setRsmLowBatteryIndication(bool rsmLowBatteryIndication, IMethodResult^ oResult);
        void getRsmLowBatteryIndicationCycle(IMethodResult^ oResult);
        void setRsmLowBatteryIndicationCycle(int rsmLowBatteryIndicationCycle, IMethodResult^ oResult);
        void getRsmScanLineWidth(IMethodResult^ oResult);
        void setRsmScanLineWidth(Platform::String^ rsmScanLineWidth, IMethodResult^ oResult);
        void getRsmGoodScansDelay(IMethodResult^ oResult);
        void setRsmGoodScansDelay(int rsmGoodScansDelay, IMethodResult^ oResult);
        void getRsmDecodeFeedback(IMethodResult^ oResult);
        void setRsmDecodeFeedback(bool rsmDecodeFeedback, IMethodResult^ oResult);
        void getRsmIgnoreCode128Usps(IMethodResult^ oResult);
        void setRsmIgnoreCode128Usps(bool rsmIgnoreCode128Usps, IMethodResult^ oResult);
        void getRsmScanTriggerWakeup(IMethodResult^ oResult);
        void setRsmScanTriggerWakeup(bool rsmScanTriggerWakeup, IMethodResult^ oResult);
        void getRsmMems(IMethodResult^ oResult);
        void setRsmMems(bool rsmMems, IMethodResult^ oResult);
        void getRsmProximityEnable(IMethodResult^ oResult);
        void setRsmProximityEnable(bool rsmProximityEnable, IMethodResult^ oResult);
        void getRsmProximityContinuous(IMethodResult^ oResult);
        void setRsmProximityContinuous(bool rsmProximityContinuous, IMethodResult^ oResult);
        void getRsmProximityDistance(IMethodResult^ oResult);
        void setRsmProximityDistance(Platform::String^ rsmProximityDistance, IMethodResult^ oResult);
        void getRsmPagingEnable(IMethodResult^ oResult);
        void setRsmPagingEnable(bool rsmPagingEnable, IMethodResult^ oResult);
        void getRsmPagingBeepSequence(IMethodResult^ oResult);
        void setRsmPagingBeepSequence(int rsmPagingBeepSequence, IMethodResult^ oResult);
        void enable(Windows::Foundation::Collections::IMapView<Platform::String^, Platform::String^>^ propertyMap, IMethodResult^ oResult);
        void registerBluetoothStatus(IMethodResult^ oResult);
        void start(IMethodResult^ oResult);
        void stop(IMethodResult^ oResult);
        void disable(IMethodResult^ oResult);
        void barcode_recognize(Platform::String^ imageFilePath, IMethodResult^ oResult);
        void getSupportedProperties(IMethodResult^ oResult);
        void take(Windows::Foundation::Collections::IMapView<Platform::String^, Platform::String^>^ propertyMap, IMethodResult^ oResult);
        void take_barcode(Platform::String^ rubyCallbackURL, Windows::Foundation::Collections::IMapView<Platform::String^, Platform::String^>^ propertyMap, IMethodResult^ oResult);
        void commandRemoteScanner(Platform::String^ command, IMethodResult^ oResult);
        void getProperty(Platform::String^ propertyName, IMethodResult^ oResult);
        void getProperties(Windows::Foundation::Collections::IVectorView<Platform::String^>^ arrayofNames, IMethodResult^ oResult);
        void getAllProperties(IMethodResult^ oResult);
        void setProperty(Platform::String^ propertyName, Platform::String^ propertyValue, IMethodResult^ oResult);
        void setProperties(Windows::Foundation::Collections::IMapView<Platform::String^, Platform::String^>^ propertyMap, IMethodResult^ oResult);
    };

    public interface class IBarcodeChainwaySingletonImpl
    {
    public:
        void enumerate(IMethodResult^ oResult);
    };
    public interface class IBarcodeChainwayFactoryImpl
    {
    public:
        IBarcodeChainwayImpl^ getImpl(Platform::String^ id);
        IBarcodeChainwaySingletonImpl^ getSingletonImpl();
    };

    public ref class BarcodeChainwayRuntimeComponent sealed
    {
    public:
        BarcodeChainwayRuntimeComponent(IBarcodeChainwayImpl^ impl);
        void getProperty(Platform::String^ propertyName, IMethodResult^ oResult);
        void getProperties(Windows::Foundation::Collections::IVectorView<Platform::String^>^ arrayofNames, IMethodResult^ oResult);
        void getAllProperties(IMethodResult^ oResult);
        void setProperty(Platform::String^ propertyName, Platform::String^ propertyValue, IMethodResult^ oResult);
        void setProperties(Windows::Foundation::Collections::IMapView<Platform::String^, Platform::String^>^ propertyMap, IMethodResult^ oResult);
    private:
        IBarcodeChainwayImpl^ _impl;
        int64 _cppImpl;
        int64 getCppImpl();
    };

    public ref class BarcodeChainwaySingletonComponent sealed: public IBarcodeChainwaySingletonImpl
    {
    public:
        BarcodeChainwaySingletonComponent(IBarcodeChainwaySingletonImpl^ impl);
        virtual void enumerate(IMethodResult^ oResult);
    private:
        IBarcodeChainwaySingletonImpl^ _impl;
    };

    public ref class BarcodeChainwayFactoryComponent sealed
    {
    public:
        static void setImpl(IBarcodeChainwayFactoryImpl^ impl);
    };
}
