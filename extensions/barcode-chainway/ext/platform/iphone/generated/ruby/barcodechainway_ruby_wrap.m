
#import "IBarcodeChainway.h"
//#import "api_generator/common/ruby_helpers.h"

#import "ruby/ext/rho/rhoruby.h"
#import "api_generator/iphone/CMethodResult.h"
#import "api_generator/iphone/CRubyConverter.h"

extern VALUE getRuby_BarcodeChainway_Module();



@interface BarcodeChainway_RubyValueFactory : NSObject<IMethodResult_RubyObjectFactory> {
}

- (VALUE) makeRubyValue:(NSObject*)obj;
+ (BarcodeChainway_RubyValueFactory*) getSharedInstance;

@end

static BarcodeChainway_RubyValueFactory* our_BarcodeChainway_RubyValueFactory = nil;

@implementation BarcodeChainway_RubyValueFactory

- (VALUE) makeRubyValue:(NSObject*)obj {
    VALUE v = rho_ruby_get_NIL();
    if ([obj isKindOfClass:[NSString class]]) {
        // single objects id
        NSString* strRes = (NSString*)obj;
        v = rho_ruby_create_object_with_id( getRuby_BarcodeChainway_Module(), [strRes UTF8String] );
    }
    else if ([obj isKindOfClass:[NSArray class]]) {
        // list of IDs
        v = rho_ruby_create_array();
        NSArray* arrRes = (NSArray*)obj;
        int i;
        for (i = 0; i < [arrRes count]; i++) {
            NSString* strItem = (NSString*)[arrRes objectAtIndex:i];
            VALUE vItem = rho_ruby_create_object_with_id( getRuby_BarcodeChainway_Module(), [strItem UTF8String] );
            rho_ruby_add_to_array(v, vItem);
        }
    }
    return v;
}

+ (BarcodeChainway_RubyValueFactory*) getSharedInstance {
    if (our_BarcodeChainway_RubyValueFactory == nil) {
        our_BarcodeChainway_RubyValueFactory = [[BarcodeChainway_RubyValueFactory alloc] init];
    }
    return our_BarcodeChainway_RubyValueFactory;
}

@end


id<IBarcodeChainway> BarcodeChainway_makeInstanceByRubyObject(VALUE obj) {
    const char* szID = rho_ruby_get_object_id( obj );
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    return [factory getBarcodeChainwayByID:[NSString stringWithUTF8String:szID]];
}









@interface rb_BarcodeChainway_getAutoEnter_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAutoEnter_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAutoEnter_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAutoEnter_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAutoEnter_caller_params* par = [[[rb_BarcodeChainway_getAutoEnter_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAutoEnter_caller : NSObject {

}
+(rb_BarcodeChainway_getAutoEnter_caller*) getSharedInstance;
+(void) getAutoEnter:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params;
+(void) getAutoEnter_in_thread:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params;
+(void) getAutoEnter_in_UI_thread:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAutoEnter_caller* our_BarcodeChainway_getAutoEnter_caller = nil;

@implementation rb_BarcodeChainway_getAutoEnter_caller

+(rb_BarcodeChainway_getAutoEnter_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAutoEnter_caller == nil) {
        our_BarcodeChainway_getAutoEnter_caller = [[rb_BarcodeChainway_getAutoEnter_caller alloc] init];
    }
    return our_BarcodeChainway_getAutoEnter_caller;
}

-(void) command_getAutoEnter:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAutoEnter:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAutoEnter:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoEnter_caller getSharedInstance] command_getAutoEnter:caller_params];
}

+(void) getAutoEnter_in_thread:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoEnter_caller getSharedInstance] performSelectorInBackground:@selector(command_getAutoEnter:) withObject:caller_params];
}

+(void) getAutoEnter_in_UI_thread:(rb_BarcodeChainway_getAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoEnter_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAutoEnter:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAutoEnter_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::autoEnter"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAutoEnter_caller getAutoEnter_in_thread:[rb_BarcodeChainway_getAutoEnter_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAutoEnter_caller getAutoEnter:[rb_BarcodeChainway_getAutoEnter_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAutoEnter(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAutoEnter_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAutoEnter(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAutoEnter_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAutoEnter_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAutoEnter_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAutoEnter_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAutoEnter_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAutoEnter_caller_params* par = [[[rb_BarcodeChainway_setAutoEnter_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAutoEnter_caller : NSObject {

}
+(rb_BarcodeChainway_setAutoEnter_caller*) getSharedInstance;
+(void) setAutoEnter:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params;
+(void) setAutoEnter_in_thread:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params;
+(void) setAutoEnter_in_UI_thread:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAutoEnter_caller* our_BarcodeChainway_setAutoEnter_caller = nil;

@implementation rb_BarcodeChainway_setAutoEnter_caller

+(rb_BarcodeChainway_setAutoEnter_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAutoEnter_caller == nil) {
        our_BarcodeChainway_setAutoEnter_caller = [[rb_BarcodeChainway_setAutoEnter_caller alloc] init];
    }
    return our_BarcodeChainway_setAutoEnter_caller;
}

-(void) command_setAutoEnter:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAutoEnter:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAutoEnter:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoEnter_caller getSharedInstance] command_setAutoEnter:caller_params];
}

+(void) setAutoEnter_in_thread:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoEnter_caller getSharedInstance] performSelectorInBackground:@selector(command_setAutoEnter:) withObject:caller_params];
}

+(void) setAutoEnter_in_UI_thread:(rb_BarcodeChainway_setAutoEnter_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoEnter_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAutoEnter:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAutoEnter_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::autoEnter="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAutoEnter_caller setAutoEnter_in_thread:[rb_BarcodeChainway_setAutoEnter_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAutoEnter_caller setAutoEnter:[rb_BarcodeChainway_setAutoEnter_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAutoEnter(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAutoEnter_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAutoEnter(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAutoEnter_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAutoTab_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAutoTab_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAutoTab_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAutoTab_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAutoTab_caller_params* par = [[[rb_BarcodeChainway_getAutoTab_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAutoTab_caller : NSObject {

}
+(rb_BarcodeChainway_getAutoTab_caller*) getSharedInstance;
+(void) getAutoTab:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params;
+(void) getAutoTab_in_thread:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params;
+(void) getAutoTab_in_UI_thread:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAutoTab_caller* our_BarcodeChainway_getAutoTab_caller = nil;

@implementation rb_BarcodeChainway_getAutoTab_caller

+(rb_BarcodeChainway_getAutoTab_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAutoTab_caller == nil) {
        our_BarcodeChainway_getAutoTab_caller = [[rb_BarcodeChainway_getAutoTab_caller alloc] init];
    }
    return our_BarcodeChainway_getAutoTab_caller;
}

-(void) command_getAutoTab:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAutoTab:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAutoTab:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoTab_caller getSharedInstance] command_getAutoTab:caller_params];
}

+(void) getAutoTab_in_thread:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoTab_caller getSharedInstance] performSelectorInBackground:@selector(command_getAutoTab:) withObject:caller_params];
}

+(void) getAutoTab_in_UI_thread:(rb_BarcodeChainway_getAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAutoTab_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAutoTab:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAutoTab_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::autoTab"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAutoTab_caller getAutoTab_in_thread:[rb_BarcodeChainway_getAutoTab_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAutoTab_caller getAutoTab:[rb_BarcodeChainway_getAutoTab_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAutoTab(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAutoTab_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAutoTab(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAutoTab_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAutoTab_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAutoTab_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAutoTab_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAutoTab_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAutoTab_caller_params* par = [[[rb_BarcodeChainway_setAutoTab_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAutoTab_caller : NSObject {

}
+(rb_BarcodeChainway_setAutoTab_caller*) getSharedInstance;
+(void) setAutoTab:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params;
+(void) setAutoTab_in_thread:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params;
+(void) setAutoTab_in_UI_thread:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAutoTab_caller* our_BarcodeChainway_setAutoTab_caller = nil;

@implementation rb_BarcodeChainway_setAutoTab_caller

+(rb_BarcodeChainway_setAutoTab_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAutoTab_caller == nil) {
        our_BarcodeChainway_setAutoTab_caller = [[rb_BarcodeChainway_setAutoTab_caller alloc] init];
    }
    return our_BarcodeChainway_setAutoTab_caller;
}

-(void) command_setAutoTab:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAutoTab:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAutoTab:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoTab_caller getSharedInstance] command_setAutoTab:caller_params];
}

+(void) setAutoTab_in_thread:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoTab_caller getSharedInstance] performSelectorInBackground:@selector(command_setAutoTab:) withObject:caller_params];
}

+(void) setAutoTab_in_UI_thread:(rb_BarcodeChainway_setAutoTab_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAutoTab_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAutoTab:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAutoTab_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::autoTab="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAutoTab_caller setAutoTab_in_thread:[rb_BarcodeChainway_setAutoTab_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAutoTab_caller setAutoTab:[rb_BarcodeChainway_setAutoTab_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAutoTab(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAutoTab_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAutoTab(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAutoTab_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getHapticFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getHapticFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getHapticFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getHapticFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getHapticFeedback_caller_params* par = [[[rb_BarcodeChainway_getHapticFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getHapticFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_getHapticFeedback_caller*) getSharedInstance;
+(void) getHapticFeedback:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params;
+(void) getHapticFeedback_in_thread:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params;
+(void) getHapticFeedback_in_UI_thread:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getHapticFeedback_caller* our_BarcodeChainway_getHapticFeedback_caller = nil;

@implementation rb_BarcodeChainway_getHapticFeedback_caller

+(rb_BarcodeChainway_getHapticFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_getHapticFeedback_caller == nil) {
        our_BarcodeChainway_getHapticFeedback_caller = [[rb_BarcodeChainway_getHapticFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_getHapticFeedback_caller;
}

-(void) command_getHapticFeedback:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getHapticFeedback:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getHapticFeedback:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getHapticFeedback_caller getSharedInstance] command_getHapticFeedback:caller_params];
}

+(void) getHapticFeedback_in_thread:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getHapticFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_getHapticFeedback:) withObject:caller_params];
}

+(void) getHapticFeedback_in_UI_thread:(rb_BarcodeChainway_getHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getHapticFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getHapticFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getHapticFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::hapticFeedback"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getHapticFeedback_caller getHapticFeedback_in_thread:[rb_BarcodeChainway_getHapticFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getHapticFeedback_caller getHapticFeedback:[rb_BarcodeChainway_getHapticFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getHapticFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getHapticFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getHapticFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getHapticFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setHapticFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setHapticFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setHapticFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setHapticFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setHapticFeedback_caller_params* par = [[[rb_BarcodeChainway_setHapticFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setHapticFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_setHapticFeedback_caller*) getSharedInstance;
+(void) setHapticFeedback:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params;
+(void) setHapticFeedback_in_thread:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params;
+(void) setHapticFeedback_in_UI_thread:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setHapticFeedback_caller* our_BarcodeChainway_setHapticFeedback_caller = nil;

@implementation rb_BarcodeChainway_setHapticFeedback_caller

+(rb_BarcodeChainway_setHapticFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_setHapticFeedback_caller == nil) {
        our_BarcodeChainway_setHapticFeedback_caller = [[rb_BarcodeChainway_setHapticFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_setHapticFeedback_caller;
}

-(void) command_setHapticFeedback:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setHapticFeedback:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setHapticFeedback:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setHapticFeedback_caller getSharedInstance] command_setHapticFeedback:caller_params];
}

+(void) setHapticFeedback_in_thread:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setHapticFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_setHapticFeedback:) withObject:caller_params];
}

+(void) setHapticFeedback_in_UI_thread:(rb_BarcodeChainway_setHapticFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setHapticFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setHapticFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setHapticFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::hapticFeedback="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithBool:YES];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setHapticFeedback_caller setHapticFeedback_in_thread:[rb_BarcodeChainway_setHapticFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setHapticFeedback_caller setHapticFeedback:[rb_BarcodeChainway_setHapticFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setHapticFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setHapticFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setHapticFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setHapticFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getLinearSecurityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getLinearSecurityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getLinearSecurityLevel_caller_params* par = [[[rb_BarcodeChainway_getLinearSecurityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getLinearSecurityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_getLinearSecurityLevel_caller*) getSharedInstance;
+(void) getLinearSecurityLevel:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params;
+(void) getLinearSecurityLevel_in_thread:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params;
+(void) getLinearSecurityLevel_in_UI_thread:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getLinearSecurityLevel_caller* our_BarcodeChainway_getLinearSecurityLevel_caller = nil;

@implementation rb_BarcodeChainway_getLinearSecurityLevel_caller

+(rb_BarcodeChainway_getLinearSecurityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_getLinearSecurityLevel_caller == nil) {
        our_BarcodeChainway_getLinearSecurityLevel_caller = [[rb_BarcodeChainway_getLinearSecurityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_getLinearSecurityLevel_caller;
}

-(void) command_getLinearSecurityLevel:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getLinearSecurityLevel:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getLinearSecurityLevel:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLinearSecurityLevel_caller getSharedInstance] command_getLinearSecurityLevel:caller_params];
}

+(void) getLinearSecurityLevel_in_thread:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLinearSecurityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_getLinearSecurityLevel:) withObject:caller_params];
}

+(void) getLinearSecurityLevel_in_UI_thread:(rb_BarcodeChainway_getLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLinearSecurityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getLinearSecurityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getLinearSecurityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::linearSecurityLevel"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getLinearSecurityLevel_caller getLinearSecurityLevel_in_thread:[rb_BarcodeChainway_getLinearSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getLinearSecurityLevel_caller getLinearSecurityLevel:[rb_BarcodeChainway_getLinearSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getLinearSecurityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getLinearSecurityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getLinearSecurityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getLinearSecurityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setLinearSecurityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setLinearSecurityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setLinearSecurityLevel_caller_params* par = [[[rb_BarcodeChainway_setLinearSecurityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setLinearSecurityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_setLinearSecurityLevel_caller*) getSharedInstance;
+(void) setLinearSecurityLevel:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params;
+(void) setLinearSecurityLevel_in_thread:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params;
+(void) setLinearSecurityLevel_in_UI_thread:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setLinearSecurityLevel_caller* our_BarcodeChainway_setLinearSecurityLevel_caller = nil;

@implementation rb_BarcodeChainway_setLinearSecurityLevel_caller

+(rb_BarcodeChainway_setLinearSecurityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_setLinearSecurityLevel_caller == nil) {
        our_BarcodeChainway_setLinearSecurityLevel_caller = [[rb_BarcodeChainway_setLinearSecurityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_setLinearSecurityLevel_caller;
}

-(void) command_setLinearSecurityLevel:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setLinearSecurityLevel:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setLinearSecurityLevel:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLinearSecurityLevel_caller getSharedInstance] command_setLinearSecurityLevel:caller_params];
}

+(void) setLinearSecurityLevel_in_thread:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLinearSecurityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_setLinearSecurityLevel:) withObject:caller_params];
}

+(void) setLinearSecurityLevel_in_UI_thread:(rb_BarcodeChainway_setLinearSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLinearSecurityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setLinearSecurityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setLinearSecurityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::linearSecurityLevel="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setLinearSecurityLevel_caller setLinearSecurityLevel_in_thread:[rb_BarcodeChainway_setLinearSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setLinearSecurityLevel_caller setLinearSecurityLevel:[rb_BarcodeChainway_setLinearSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setLinearSecurityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setLinearSecurityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setLinearSecurityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setLinearSecurityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getScanTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getScanTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getScanTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getScanTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getScanTimeout_caller_params* par = [[[rb_BarcodeChainway_getScanTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getScanTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_getScanTimeout_caller*) getSharedInstance;
+(void) getScanTimeout:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params;
+(void) getScanTimeout_in_thread:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params;
+(void) getScanTimeout_in_UI_thread:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getScanTimeout_caller* our_BarcodeChainway_getScanTimeout_caller = nil;

@implementation rb_BarcodeChainway_getScanTimeout_caller

+(rb_BarcodeChainway_getScanTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_getScanTimeout_caller == nil) {
        our_BarcodeChainway_getScanTimeout_caller = [[rb_BarcodeChainway_getScanTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_getScanTimeout_caller;
}

-(void) command_getScanTimeout:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getScanTimeout:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getScanTimeout:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScanTimeout_caller getSharedInstance] command_getScanTimeout:caller_params];
}

+(void) getScanTimeout_in_thread:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScanTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_getScanTimeout:) withObject:caller_params];
}

+(void) getScanTimeout_in_UI_thread:(rb_BarcodeChainway_getScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScanTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getScanTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getScanTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::scanTimeout"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getScanTimeout_caller getScanTimeout_in_thread:[rb_BarcodeChainway_getScanTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getScanTimeout_caller getScanTimeout:[rb_BarcodeChainway_getScanTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getScanTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getScanTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getScanTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getScanTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setScanTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setScanTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setScanTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setScanTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setScanTimeout_caller_params* par = [[[rb_BarcodeChainway_setScanTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setScanTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_setScanTimeout_caller*) getSharedInstance;
+(void) setScanTimeout:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params;
+(void) setScanTimeout_in_thread:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params;
+(void) setScanTimeout_in_UI_thread:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setScanTimeout_caller* our_BarcodeChainway_setScanTimeout_caller = nil;

@implementation rb_BarcodeChainway_setScanTimeout_caller

+(rb_BarcodeChainway_setScanTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_setScanTimeout_caller == nil) {
        our_BarcodeChainway_setScanTimeout_caller = [[rb_BarcodeChainway_setScanTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_setScanTimeout_caller;
}

-(void) command_setScanTimeout:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setScanTimeout:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setScanTimeout:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setScanTimeout_caller getSharedInstance] command_setScanTimeout:caller_params];
}

+(void) setScanTimeout_in_thread:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setScanTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_setScanTimeout:) withObject:caller_params];
}

+(void) setScanTimeout_in_UI_thread:(rb_BarcodeChainway_setScanTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setScanTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setScanTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setScanTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::scanTimeout="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setScanTimeout_caller setScanTimeout_in_thread:[rb_BarcodeChainway_setScanTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setScanTimeout_caller setScanTimeout:[rb_BarcodeChainway_setScanTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setScanTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setScanTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setScanTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setScanTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRasterMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRasterMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRasterMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRasterMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRasterMode_caller_params* par = [[[rb_BarcodeChainway_getRasterMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRasterMode_caller : NSObject {

}
+(rb_BarcodeChainway_getRasterMode_caller*) getSharedInstance;
+(void) getRasterMode:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params;
+(void) getRasterMode_in_thread:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params;
+(void) getRasterMode_in_UI_thread:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRasterMode_caller* our_BarcodeChainway_getRasterMode_caller = nil;

@implementation rb_BarcodeChainway_getRasterMode_caller

+(rb_BarcodeChainway_getRasterMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRasterMode_caller == nil) {
        our_BarcodeChainway_getRasterMode_caller = [[rb_BarcodeChainway_getRasterMode_caller alloc] init];
    }
    return our_BarcodeChainway_getRasterMode_caller;
}

-(void) command_getRasterMode:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRasterMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRasterMode:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterMode_caller getSharedInstance] command_getRasterMode:caller_params];
}

+(void) getRasterMode_in_thread:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getRasterMode:) withObject:caller_params];
}

+(void) getRasterMode_in_UI_thread:(rb_BarcodeChainway_getRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRasterMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRasterMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rasterMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRasterMode_caller getRasterMode_in_thread:[rb_BarcodeChainway_getRasterMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRasterMode_caller getRasterMode:[rb_BarcodeChainway_getRasterMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRasterMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRasterMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRasterMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRasterMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRasterMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRasterMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRasterMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRasterMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRasterMode_caller_params* par = [[[rb_BarcodeChainway_setRasterMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRasterMode_caller : NSObject {

}
+(rb_BarcodeChainway_setRasterMode_caller*) getSharedInstance;
+(void) setRasterMode:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params;
+(void) setRasterMode_in_thread:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params;
+(void) setRasterMode_in_UI_thread:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRasterMode_caller* our_BarcodeChainway_setRasterMode_caller = nil;

@implementation rb_BarcodeChainway_setRasterMode_caller

+(rb_BarcodeChainway_setRasterMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRasterMode_caller == nil) {
        our_BarcodeChainway_setRasterMode_caller = [[rb_BarcodeChainway_setRasterMode_caller alloc] init];
    }
    return our_BarcodeChainway_setRasterMode_caller;
}

-(void) command_setRasterMode:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRasterMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRasterMode:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterMode_caller getSharedInstance] command_setRasterMode:caller_params];
}

+(void) setRasterMode_in_thread:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setRasterMode:) withObject:caller_params];
}

+(void) setRasterMode_in_UI_thread:(rb_BarcodeChainway_setRasterMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRasterMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRasterMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rasterMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRasterMode_caller setRasterMode_in_thread:[rb_BarcodeChainway_setRasterMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRasterMode_caller setRasterMode:[rb_BarcodeChainway_setRasterMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRasterMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRasterMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRasterMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRasterMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRasterHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRasterHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRasterHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRasterHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRasterHeight_caller_params* par = [[[rb_BarcodeChainway_getRasterHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRasterHeight_caller : NSObject {

}
+(rb_BarcodeChainway_getRasterHeight_caller*) getSharedInstance;
+(void) getRasterHeight:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params;
+(void) getRasterHeight_in_thread:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params;
+(void) getRasterHeight_in_UI_thread:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRasterHeight_caller* our_BarcodeChainway_getRasterHeight_caller = nil;

@implementation rb_BarcodeChainway_getRasterHeight_caller

+(rb_BarcodeChainway_getRasterHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRasterHeight_caller == nil) {
        our_BarcodeChainway_getRasterHeight_caller = [[rb_BarcodeChainway_getRasterHeight_caller alloc] init];
    }
    return our_BarcodeChainway_getRasterHeight_caller;
}

-(void) command_getRasterHeight:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRasterHeight:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRasterHeight:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterHeight_caller getSharedInstance] command_getRasterHeight:caller_params];
}

+(void) getRasterHeight_in_thread:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_getRasterHeight:) withObject:caller_params];
}

+(void) getRasterHeight_in_UI_thread:(rb_BarcodeChainway_getRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRasterHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRasterHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRasterHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rasterHeight"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRasterHeight_caller getRasterHeight_in_thread:[rb_BarcodeChainway_getRasterHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRasterHeight_caller getRasterHeight:[rb_BarcodeChainway_getRasterHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRasterHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRasterHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRasterHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRasterHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRasterHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRasterHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRasterHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRasterHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRasterHeight_caller_params* par = [[[rb_BarcodeChainway_setRasterHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRasterHeight_caller : NSObject {

}
+(rb_BarcodeChainway_setRasterHeight_caller*) getSharedInstance;
+(void) setRasterHeight:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params;
+(void) setRasterHeight_in_thread:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params;
+(void) setRasterHeight_in_UI_thread:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRasterHeight_caller* our_BarcodeChainway_setRasterHeight_caller = nil;

@implementation rb_BarcodeChainway_setRasterHeight_caller

+(rb_BarcodeChainway_setRasterHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRasterHeight_caller == nil) {
        our_BarcodeChainway_setRasterHeight_caller = [[rb_BarcodeChainway_setRasterHeight_caller alloc] init];
    }
    return our_BarcodeChainway_setRasterHeight_caller;
}

-(void) command_setRasterHeight:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRasterHeight:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRasterHeight:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterHeight_caller getSharedInstance] command_setRasterHeight:caller_params];
}

+(void) setRasterHeight_in_thread:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_setRasterHeight:) withObject:caller_params];
}

+(void) setRasterHeight_in_UI_thread:(rb_BarcodeChainway_setRasterHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRasterHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRasterHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRasterHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rasterHeight="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRasterHeight_caller setRasterHeight_in_thread:[rb_BarcodeChainway_setRasterHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRasterHeight_caller setRasterHeight:[rb_BarcodeChainway_setRasterHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRasterHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRasterHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRasterHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRasterHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAimType_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAimType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAimType_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAimType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAimType_caller_params* par = [[[rb_BarcodeChainway_getAimType_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAimType_caller : NSObject {

}
+(rb_BarcodeChainway_getAimType_caller*) getSharedInstance;
+(void) getAimType:(rb_BarcodeChainway_getAimType_caller_params*)caller_params;
+(void) getAimType_in_thread:(rb_BarcodeChainway_getAimType_caller_params*)caller_params;
+(void) getAimType_in_UI_thread:(rb_BarcodeChainway_getAimType_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAimType_caller* our_BarcodeChainway_getAimType_caller = nil;

@implementation rb_BarcodeChainway_getAimType_caller

+(rb_BarcodeChainway_getAimType_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAimType_caller == nil) {
        our_BarcodeChainway_getAimType_caller = [[rb_BarcodeChainway_getAimType_caller alloc] init];
    }
    return our_BarcodeChainway_getAimType_caller;
}

-(void) command_getAimType:(rb_BarcodeChainway_getAimType_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAimType:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAimType:(rb_BarcodeChainway_getAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimType_caller getSharedInstance] command_getAimType:caller_params];
}

+(void) getAimType_in_thread:(rb_BarcodeChainway_getAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimType_caller getSharedInstance] performSelectorInBackground:@selector(command_getAimType:) withObject:caller_params];
}

+(void) getAimType_in_UI_thread:(rb_BarcodeChainway_getAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimType_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAimType:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAimType_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aimType"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAimType_caller getAimType_in_thread:[rb_BarcodeChainway_getAimType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAimType_caller getAimType:[rb_BarcodeChainway_getAimType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAimType(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAimType_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAimType(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAimType_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAimType_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAimType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAimType_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAimType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAimType_caller_params* par = [[[rb_BarcodeChainway_setAimType_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAimType_caller : NSObject {

}
+(rb_BarcodeChainway_setAimType_caller*) getSharedInstance;
+(void) setAimType:(rb_BarcodeChainway_setAimType_caller_params*)caller_params;
+(void) setAimType_in_thread:(rb_BarcodeChainway_setAimType_caller_params*)caller_params;
+(void) setAimType_in_UI_thread:(rb_BarcodeChainway_setAimType_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAimType_caller* our_BarcodeChainway_setAimType_caller = nil;

@implementation rb_BarcodeChainway_setAimType_caller

+(rb_BarcodeChainway_setAimType_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAimType_caller == nil) {
        our_BarcodeChainway_setAimType_caller = [[rb_BarcodeChainway_setAimType_caller alloc] init];
    }
    return our_BarcodeChainway_setAimType_caller;
}

-(void) command_setAimType:(rb_BarcodeChainway_setAimType_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAimType:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAimType:(rb_BarcodeChainway_setAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimType_caller getSharedInstance] command_setAimType:caller_params];
}

+(void) setAimType_in_thread:(rb_BarcodeChainway_setAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimType_caller getSharedInstance] performSelectorInBackground:@selector(command_setAimType:) withObject:caller_params];
}

+(void) setAimType_in_UI_thread:(rb_BarcodeChainway_setAimType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimType_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAimType:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAimType_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aimType="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAimType_caller setAimType_in_thread:[rb_BarcodeChainway_setAimType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAimType_caller setAimType:[rb_BarcodeChainway_setAimType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAimType(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAimType_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAimType(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAimType_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getTimedAimDuration_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getTimedAimDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getTimedAimDuration_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getTimedAimDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getTimedAimDuration_caller_params* par = [[[rb_BarcodeChainway_getTimedAimDuration_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getTimedAimDuration_caller : NSObject {

}
+(rb_BarcodeChainway_getTimedAimDuration_caller*) getSharedInstance;
+(void) getTimedAimDuration:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params;
+(void) getTimedAimDuration_in_thread:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params;
+(void) getTimedAimDuration_in_UI_thread:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getTimedAimDuration_caller* our_BarcodeChainway_getTimedAimDuration_caller = nil;

@implementation rb_BarcodeChainway_getTimedAimDuration_caller

+(rb_BarcodeChainway_getTimedAimDuration_caller*) getSharedInstance {
    if (our_BarcodeChainway_getTimedAimDuration_caller == nil) {
        our_BarcodeChainway_getTimedAimDuration_caller = [[rb_BarcodeChainway_getTimedAimDuration_caller alloc] init];
    }
    return our_BarcodeChainway_getTimedAimDuration_caller;
}

-(void) command_getTimedAimDuration:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getTimedAimDuration:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getTimedAimDuration:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTimedAimDuration_caller getSharedInstance] command_getTimedAimDuration:caller_params];
}

+(void) getTimedAimDuration_in_thread:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTimedAimDuration_caller getSharedInstance] performSelectorInBackground:@selector(command_getTimedAimDuration:) withObject:caller_params];
}

+(void) getTimedAimDuration_in_UI_thread:(rb_BarcodeChainway_getTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTimedAimDuration_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getTimedAimDuration:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getTimedAimDuration_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::timedAimDuration"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getTimedAimDuration_caller getTimedAimDuration_in_thread:[rb_BarcodeChainway_getTimedAimDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getTimedAimDuration_caller getTimedAimDuration:[rb_BarcodeChainway_getTimedAimDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getTimedAimDuration(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getTimedAimDuration_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getTimedAimDuration(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getTimedAimDuration_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setTimedAimDuration_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setTimedAimDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setTimedAimDuration_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setTimedAimDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setTimedAimDuration_caller_params* par = [[[rb_BarcodeChainway_setTimedAimDuration_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setTimedAimDuration_caller : NSObject {

}
+(rb_BarcodeChainway_setTimedAimDuration_caller*) getSharedInstance;
+(void) setTimedAimDuration:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params;
+(void) setTimedAimDuration_in_thread:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params;
+(void) setTimedAimDuration_in_UI_thread:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setTimedAimDuration_caller* our_BarcodeChainway_setTimedAimDuration_caller = nil;

@implementation rb_BarcodeChainway_setTimedAimDuration_caller

+(rb_BarcodeChainway_setTimedAimDuration_caller*) getSharedInstance {
    if (our_BarcodeChainway_setTimedAimDuration_caller == nil) {
        our_BarcodeChainway_setTimedAimDuration_caller = [[rb_BarcodeChainway_setTimedAimDuration_caller alloc] init];
    }
    return our_BarcodeChainway_setTimedAimDuration_caller;
}

-(void) command_setTimedAimDuration:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setTimedAimDuration:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setTimedAimDuration:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTimedAimDuration_caller getSharedInstance] command_setTimedAimDuration:caller_params];
}

+(void) setTimedAimDuration_in_thread:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTimedAimDuration_caller getSharedInstance] performSelectorInBackground:@selector(command_setTimedAimDuration:) withObject:caller_params];
}

+(void) setTimedAimDuration_in_UI_thread:(rb_BarcodeChainway_setTimedAimDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTimedAimDuration_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setTimedAimDuration:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setTimedAimDuration_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::timedAimDuration="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setTimedAimDuration_caller setTimedAimDuration_in_thread:[rb_BarcodeChainway_setTimedAimDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setTimedAimDuration_caller setTimedAimDuration:[rb_BarcodeChainway_setTimedAimDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setTimedAimDuration(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setTimedAimDuration_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setTimedAimDuration(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setTimedAimDuration_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSameSymbolTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSameSymbolTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSameSymbolTimeout_caller_params* par = [[[rb_BarcodeChainway_getSameSymbolTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSameSymbolTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_getSameSymbolTimeout_caller*) getSharedInstance;
+(void) getSameSymbolTimeout:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params;
+(void) getSameSymbolTimeout_in_thread:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params;
+(void) getSameSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSameSymbolTimeout_caller* our_BarcodeChainway_getSameSymbolTimeout_caller = nil;

@implementation rb_BarcodeChainway_getSameSymbolTimeout_caller

+(rb_BarcodeChainway_getSameSymbolTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSameSymbolTimeout_caller == nil) {
        our_BarcodeChainway_getSameSymbolTimeout_caller = [[rb_BarcodeChainway_getSameSymbolTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_getSameSymbolTimeout_caller;
}

-(void) command_getSameSymbolTimeout:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSameSymbolTimeout:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSameSymbolTimeout:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSameSymbolTimeout_caller getSharedInstance] command_getSameSymbolTimeout:caller_params];
}

+(void) getSameSymbolTimeout_in_thread:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSameSymbolTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_getSameSymbolTimeout:) withObject:caller_params];
}

+(void) getSameSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_getSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSameSymbolTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSameSymbolTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSameSymbolTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::sameSymbolTimeout"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSameSymbolTimeout_caller getSameSymbolTimeout_in_thread:[rb_BarcodeChainway_getSameSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSameSymbolTimeout_caller getSameSymbolTimeout:[rb_BarcodeChainway_getSameSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSameSymbolTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSameSymbolTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSameSymbolTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSameSymbolTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setSameSymbolTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setSameSymbolTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setSameSymbolTimeout_caller_params* par = [[[rb_BarcodeChainway_setSameSymbolTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setSameSymbolTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_setSameSymbolTimeout_caller*) getSharedInstance;
+(void) setSameSymbolTimeout:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params;
+(void) setSameSymbolTimeout_in_thread:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params;
+(void) setSameSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setSameSymbolTimeout_caller* our_BarcodeChainway_setSameSymbolTimeout_caller = nil;

@implementation rb_BarcodeChainway_setSameSymbolTimeout_caller

+(rb_BarcodeChainway_setSameSymbolTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_setSameSymbolTimeout_caller == nil) {
        our_BarcodeChainway_setSameSymbolTimeout_caller = [[rb_BarcodeChainway_setSameSymbolTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_setSameSymbolTimeout_caller;
}

-(void) command_setSameSymbolTimeout:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setSameSymbolTimeout:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setSameSymbolTimeout:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSameSymbolTimeout_caller getSharedInstance] command_setSameSymbolTimeout:caller_params];
}

+(void) setSameSymbolTimeout_in_thread:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSameSymbolTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_setSameSymbolTimeout:) withObject:caller_params];
}

+(void) setSameSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_setSameSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSameSymbolTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setSameSymbolTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setSameSymbolTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::sameSymbolTimeout="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setSameSymbolTimeout_caller setSameSymbolTimeout_in_thread:[rb_BarcodeChainway_setSameSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setSameSymbolTimeout_caller setSameSymbolTimeout:[rb_BarcodeChainway_setSameSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setSameSymbolTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setSameSymbolTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setSameSymbolTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setSameSymbolTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params* par = [[[rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDifferentSymbolTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_getDifferentSymbolTimeout_caller*) getSharedInstance;
+(void) getDifferentSymbolTimeout:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params;
+(void) getDifferentSymbolTimeout_in_thread:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params;
+(void) getDifferentSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDifferentSymbolTimeout_caller* our_BarcodeChainway_getDifferentSymbolTimeout_caller = nil;

@implementation rb_BarcodeChainway_getDifferentSymbolTimeout_caller

+(rb_BarcodeChainway_getDifferentSymbolTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDifferentSymbolTimeout_caller == nil) {
        our_BarcodeChainway_getDifferentSymbolTimeout_caller = [[rb_BarcodeChainway_getDifferentSymbolTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_getDifferentSymbolTimeout_caller;
}

-(void) command_getDifferentSymbolTimeout:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDifferentSymbolTimeout:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDifferentSymbolTimeout:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDifferentSymbolTimeout_caller getSharedInstance] command_getDifferentSymbolTimeout:caller_params];
}

+(void) getDifferentSymbolTimeout_in_thread:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDifferentSymbolTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_getDifferentSymbolTimeout:) withObject:caller_params];
}

+(void) getDifferentSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDifferentSymbolTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDifferentSymbolTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDifferentSymbolTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::differentSymbolTimeout"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDifferentSymbolTimeout_caller getDifferentSymbolTimeout_in_thread:[rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDifferentSymbolTimeout_caller getDifferentSymbolTimeout:[rb_BarcodeChainway_getDifferentSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDifferentSymbolTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDifferentSymbolTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDifferentSymbolTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDifferentSymbolTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params* par = [[[rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDifferentSymbolTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_setDifferentSymbolTimeout_caller*) getSharedInstance;
+(void) setDifferentSymbolTimeout:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params;
+(void) setDifferentSymbolTimeout_in_thread:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params;
+(void) setDifferentSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDifferentSymbolTimeout_caller* our_BarcodeChainway_setDifferentSymbolTimeout_caller = nil;

@implementation rb_BarcodeChainway_setDifferentSymbolTimeout_caller

+(rb_BarcodeChainway_setDifferentSymbolTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDifferentSymbolTimeout_caller == nil) {
        our_BarcodeChainway_setDifferentSymbolTimeout_caller = [[rb_BarcodeChainway_setDifferentSymbolTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_setDifferentSymbolTimeout_caller;
}

-(void) command_setDifferentSymbolTimeout:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDifferentSymbolTimeout:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDifferentSymbolTimeout:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDifferentSymbolTimeout_caller getSharedInstance] command_setDifferentSymbolTimeout:caller_params];
}

+(void) setDifferentSymbolTimeout_in_thread:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDifferentSymbolTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_setDifferentSymbolTimeout:) withObject:caller_params];
}

+(void) setDifferentSymbolTimeout_in_UI_thread:(rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDifferentSymbolTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDifferentSymbolTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDifferentSymbolTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::differentSymbolTimeout="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDifferentSymbolTimeout_caller setDifferentSymbolTimeout_in_thread:[rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDifferentSymbolTimeout_caller setDifferentSymbolTimeout:[rb_BarcodeChainway_setDifferentSymbolTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDifferentSymbolTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDifferentSymbolTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDifferentSymbolTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDifferentSymbolTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAimMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAimMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAimMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAimMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAimMode_caller_params* par = [[[rb_BarcodeChainway_getAimMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAimMode_caller : NSObject {

}
+(rb_BarcodeChainway_getAimMode_caller*) getSharedInstance;
+(void) getAimMode:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params;
+(void) getAimMode_in_thread:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params;
+(void) getAimMode_in_UI_thread:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAimMode_caller* our_BarcodeChainway_getAimMode_caller = nil;

@implementation rb_BarcodeChainway_getAimMode_caller

+(rb_BarcodeChainway_getAimMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAimMode_caller == nil) {
        our_BarcodeChainway_getAimMode_caller = [[rb_BarcodeChainway_getAimMode_caller alloc] init];
    }
    return our_BarcodeChainway_getAimMode_caller;
}

-(void) command_getAimMode:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAimMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAimMode:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimMode_caller getSharedInstance] command_getAimMode:caller_params];
}

+(void) getAimMode_in_thread:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getAimMode:) withObject:caller_params];
}

+(void) getAimMode_in_UI_thread:(rb_BarcodeChainway_getAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAimMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAimMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAimMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aimMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAimMode_caller getAimMode_in_thread:[rb_BarcodeChainway_getAimMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAimMode_caller getAimMode:[rb_BarcodeChainway_getAimMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAimMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAimMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAimMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAimMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAimMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAimMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAimMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAimMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAimMode_caller_params* par = [[[rb_BarcodeChainway_setAimMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAimMode_caller : NSObject {

}
+(rb_BarcodeChainway_setAimMode_caller*) getSharedInstance;
+(void) setAimMode:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params;
+(void) setAimMode_in_thread:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params;
+(void) setAimMode_in_UI_thread:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAimMode_caller* our_BarcodeChainway_setAimMode_caller = nil;

@implementation rb_BarcodeChainway_setAimMode_caller

+(rb_BarcodeChainway_setAimMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAimMode_caller == nil) {
        our_BarcodeChainway_setAimMode_caller = [[rb_BarcodeChainway_setAimMode_caller alloc] init];
    }
    return our_BarcodeChainway_setAimMode_caller;
}

-(void) command_setAimMode:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAimMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAimMode:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimMode_caller getSharedInstance] command_setAimMode:caller_params];
}

+(void) setAimMode_in_thread:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setAimMode:) withObject:caller_params];
}

+(void) setAimMode_in_UI_thread:(rb_BarcodeChainway_setAimMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAimMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAimMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAimMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aimMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAimMode_caller setAimMode_in_thread:[rb_BarcodeChainway_setAimMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAimMode_caller setAimMode:[rb_BarcodeChainway_setAimMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAimMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAimMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAimMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAimMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getPicklistMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getPicklistMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getPicklistMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getPicklistMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getPicklistMode_caller_params* par = [[[rb_BarcodeChainway_getPicklistMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getPicklistMode_caller : NSObject {

}
+(rb_BarcodeChainway_getPicklistMode_caller*) getSharedInstance;
+(void) getPicklistMode:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params;
+(void) getPicklistMode_in_thread:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params;
+(void) getPicklistMode_in_UI_thread:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getPicklistMode_caller* our_BarcodeChainway_getPicklistMode_caller = nil;

@implementation rb_BarcodeChainway_getPicklistMode_caller

+(rb_BarcodeChainway_getPicklistMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getPicklistMode_caller == nil) {
        our_BarcodeChainway_getPicklistMode_caller = [[rb_BarcodeChainway_getPicklistMode_caller alloc] init];
    }
    return our_BarcodeChainway_getPicklistMode_caller;
}

-(void) command_getPicklistMode:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getPicklistMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getPicklistMode:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPicklistMode_caller getSharedInstance] command_getPicklistMode:caller_params];
}

+(void) getPicklistMode_in_thread:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPicklistMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getPicklistMode:) withObject:caller_params];
}

+(void) getPicklistMode_in_UI_thread:(rb_BarcodeChainway_getPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPicklistMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getPicklistMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getPicklistMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::picklistMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getPicklistMode_caller getPicklistMode_in_thread:[rb_BarcodeChainway_getPicklistMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getPicklistMode_caller getPicklistMode:[rb_BarcodeChainway_getPicklistMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getPicklistMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getPicklistMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getPicklistMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getPicklistMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setPicklistMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setPicklistMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setPicklistMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setPicklistMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setPicklistMode_caller_params* par = [[[rb_BarcodeChainway_setPicklistMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setPicklistMode_caller : NSObject {

}
+(rb_BarcodeChainway_setPicklistMode_caller*) getSharedInstance;
+(void) setPicklistMode:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params;
+(void) setPicklistMode_in_thread:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params;
+(void) setPicklistMode_in_UI_thread:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setPicklistMode_caller* our_BarcodeChainway_setPicklistMode_caller = nil;

@implementation rb_BarcodeChainway_setPicklistMode_caller

+(rb_BarcodeChainway_setPicklistMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setPicklistMode_caller == nil) {
        our_BarcodeChainway_setPicklistMode_caller = [[rb_BarcodeChainway_setPicklistMode_caller alloc] init];
    }
    return our_BarcodeChainway_setPicklistMode_caller;
}

-(void) command_setPicklistMode:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setPicklistMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setPicklistMode:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPicklistMode_caller getSharedInstance] command_setPicklistMode:caller_params];
}

+(void) setPicklistMode_in_thread:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPicklistMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setPicklistMode:) withObject:caller_params];
}

+(void) setPicklistMode_in_UI_thread:(rb_BarcodeChainway_setPicklistMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPicklistMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setPicklistMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setPicklistMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::picklistMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setPicklistMode_caller setPicklistMode_in_thread:[rb_BarcodeChainway_setPicklistMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setPicklistMode_caller setPicklistMode:[rb_BarcodeChainway_setPicklistMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setPicklistMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setPicklistMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setPicklistMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setPicklistMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderMode_caller_params* par = [[[rb_BarcodeChainway_getViewfinderMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderMode_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderMode_caller*) getSharedInstance;
+(void) getViewfinderMode:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params;
+(void) getViewfinderMode_in_thread:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params;
+(void) getViewfinderMode_in_UI_thread:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderMode_caller* our_BarcodeChainway_getViewfinderMode_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderMode_caller

+(rb_BarcodeChainway_getViewfinderMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderMode_caller == nil) {
        our_BarcodeChainway_getViewfinderMode_caller = [[rb_BarcodeChainway_getViewfinderMode_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderMode_caller;
}

-(void) command_getViewfinderMode:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderMode:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderMode_caller getSharedInstance] command_getViewfinderMode:caller_params];
}

+(void) getViewfinderMode_in_thread:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderMode:) withObject:caller_params];
}

+(void) getViewfinderMode_in_UI_thread:(rb_BarcodeChainway_getViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderMode_caller getViewfinderMode_in_thread:[rb_BarcodeChainway_getViewfinderMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderMode_caller getViewfinderMode:[rb_BarcodeChainway_getViewfinderMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderMode_caller_params* par = [[[rb_BarcodeChainway_setViewfinderMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderMode_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderMode_caller*) getSharedInstance;
+(void) setViewfinderMode:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params;
+(void) setViewfinderMode_in_thread:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params;
+(void) setViewfinderMode_in_UI_thread:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderMode_caller* our_BarcodeChainway_setViewfinderMode_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderMode_caller

+(rb_BarcodeChainway_setViewfinderMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderMode_caller == nil) {
        our_BarcodeChainway_setViewfinderMode_caller = [[rb_BarcodeChainway_setViewfinderMode_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderMode_caller;
}

-(void) command_setViewfinderMode:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderMode:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderMode_caller getSharedInstance] command_setViewfinderMode:caller_params];
}

+(void) setViewfinderMode_in_thread:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderMode:) withObject:caller_params];
}

+(void) setViewfinderMode_in_UI_thread:(rb_BarcodeChainway_setViewfinderMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderMode_caller setViewfinderMode_in_thread:[rb_BarcodeChainway_setViewfinderMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderMode_caller setViewfinderMode:[rb_BarcodeChainway_setViewfinderMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderX_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderX_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderX_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderX_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderX_caller_params* par = [[[rb_BarcodeChainway_getViewfinderX_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderX_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderX_caller*) getSharedInstance;
+(void) getViewfinderX:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params;
+(void) getViewfinderX_in_thread:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params;
+(void) getViewfinderX_in_UI_thread:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderX_caller* our_BarcodeChainway_getViewfinderX_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderX_caller

+(rb_BarcodeChainway_getViewfinderX_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderX_caller == nil) {
        our_BarcodeChainway_getViewfinderX_caller = [[rb_BarcodeChainway_getViewfinderX_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderX_caller;
}

-(void) command_getViewfinderX:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderX:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderX:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderX_caller getSharedInstance] command_getViewfinderX:caller_params];
}

+(void) getViewfinderX_in_thread:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderX_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderX:) withObject:caller_params];
}

+(void) getViewfinderX_in_UI_thread:(rb_BarcodeChainway_getViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderX_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderX:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderX_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderX"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderX_caller getViewfinderX_in_thread:[rb_BarcodeChainway_getViewfinderX_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderX_caller getViewfinderX:[rb_BarcodeChainway_getViewfinderX_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderX(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderX_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderX(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderX_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderX_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderX_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderX_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderX_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderX_caller_params* par = [[[rb_BarcodeChainway_setViewfinderX_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderX_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderX_caller*) getSharedInstance;
+(void) setViewfinderX:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params;
+(void) setViewfinderX_in_thread:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params;
+(void) setViewfinderX_in_UI_thread:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderX_caller* our_BarcodeChainway_setViewfinderX_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderX_caller

+(rb_BarcodeChainway_setViewfinderX_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderX_caller == nil) {
        our_BarcodeChainway_setViewfinderX_caller = [[rb_BarcodeChainway_setViewfinderX_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderX_caller;
}

-(void) command_setViewfinderX:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderX:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderX:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderX_caller getSharedInstance] command_setViewfinderX:caller_params];
}

+(void) setViewfinderX_in_thread:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderX_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderX:) withObject:caller_params];
}

+(void) setViewfinderX_in_UI_thread:(rb_BarcodeChainway_setViewfinderX_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderX_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderX:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderX_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderX="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderX_caller setViewfinderX_in_thread:[rb_BarcodeChainway_setViewfinderX_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderX_caller setViewfinderX:[rb_BarcodeChainway_setViewfinderX_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderX(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderX_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderX(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderX_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderY_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderY_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderY_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderY_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderY_caller_params* par = [[[rb_BarcodeChainway_getViewfinderY_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderY_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderY_caller*) getSharedInstance;
+(void) getViewfinderY:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params;
+(void) getViewfinderY_in_thread:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params;
+(void) getViewfinderY_in_UI_thread:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderY_caller* our_BarcodeChainway_getViewfinderY_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderY_caller

+(rb_BarcodeChainway_getViewfinderY_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderY_caller == nil) {
        our_BarcodeChainway_getViewfinderY_caller = [[rb_BarcodeChainway_getViewfinderY_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderY_caller;
}

-(void) command_getViewfinderY:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderY:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderY:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderY_caller getSharedInstance] command_getViewfinderY:caller_params];
}

+(void) getViewfinderY_in_thread:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderY_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderY:) withObject:caller_params];
}

+(void) getViewfinderY_in_UI_thread:(rb_BarcodeChainway_getViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderY_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderY:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderY_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderY"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderY_caller getViewfinderY_in_thread:[rb_BarcodeChainway_getViewfinderY_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderY_caller getViewfinderY:[rb_BarcodeChainway_getViewfinderY_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderY(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderY_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderY(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderY_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderY_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderY_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderY_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderY_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderY_caller_params* par = [[[rb_BarcodeChainway_setViewfinderY_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderY_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderY_caller*) getSharedInstance;
+(void) setViewfinderY:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params;
+(void) setViewfinderY_in_thread:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params;
+(void) setViewfinderY_in_UI_thread:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderY_caller* our_BarcodeChainway_setViewfinderY_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderY_caller

+(rb_BarcodeChainway_setViewfinderY_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderY_caller == nil) {
        our_BarcodeChainway_setViewfinderY_caller = [[rb_BarcodeChainway_setViewfinderY_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderY_caller;
}

-(void) command_setViewfinderY:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderY:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderY:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderY_caller getSharedInstance] command_setViewfinderY:caller_params];
}

+(void) setViewfinderY_in_thread:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderY_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderY:) withObject:caller_params];
}

+(void) setViewfinderY_in_UI_thread:(rb_BarcodeChainway_setViewfinderY_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderY_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderY:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderY_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderY="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderY_caller setViewfinderY_in_thread:[rb_BarcodeChainway_setViewfinderY_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderY_caller setViewfinderY:[rb_BarcodeChainway_setViewfinderY_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderY(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderY_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderY(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderY_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderWidth_caller_params* par = [[[rb_BarcodeChainway_getViewfinderWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderWidth_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderWidth_caller*) getSharedInstance;
+(void) getViewfinderWidth:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params;
+(void) getViewfinderWidth_in_thread:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params;
+(void) getViewfinderWidth_in_UI_thread:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderWidth_caller* our_BarcodeChainway_getViewfinderWidth_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderWidth_caller

+(rb_BarcodeChainway_getViewfinderWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderWidth_caller == nil) {
        our_BarcodeChainway_getViewfinderWidth_caller = [[rb_BarcodeChainway_getViewfinderWidth_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderWidth_caller;
}

-(void) command_getViewfinderWidth:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderWidth:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderWidth:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderWidth_caller getSharedInstance] command_getViewfinderWidth:caller_params];
}

+(void) getViewfinderWidth_in_thread:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderWidth:) withObject:caller_params];
}

+(void) getViewfinderWidth_in_UI_thread:(rb_BarcodeChainway_getViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderWidth"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderWidth_caller getViewfinderWidth_in_thread:[rb_BarcodeChainway_getViewfinderWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderWidth_caller getViewfinderWidth:[rb_BarcodeChainway_getViewfinderWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderWidth_caller_params* par = [[[rb_BarcodeChainway_setViewfinderWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderWidth_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderWidth_caller*) getSharedInstance;
+(void) setViewfinderWidth:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params;
+(void) setViewfinderWidth_in_thread:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params;
+(void) setViewfinderWidth_in_UI_thread:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderWidth_caller* our_BarcodeChainway_setViewfinderWidth_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderWidth_caller

+(rb_BarcodeChainway_setViewfinderWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderWidth_caller == nil) {
        our_BarcodeChainway_setViewfinderWidth_caller = [[rb_BarcodeChainway_setViewfinderWidth_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderWidth_caller;
}

-(void) command_setViewfinderWidth:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderWidth:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderWidth:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderWidth_caller getSharedInstance] command_setViewfinderWidth:caller_params];
}

+(void) setViewfinderWidth_in_thread:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderWidth:) withObject:caller_params];
}

+(void) setViewfinderWidth_in_UI_thread:(rb_BarcodeChainway_setViewfinderWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderWidth="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderWidth_caller setViewfinderWidth_in_thread:[rb_BarcodeChainway_setViewfinderWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderWidth_caller setViewfinderWidth:[rb_BarcodeChainway_setViewfinderWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderHeight_caller_params* par = [[[rb_BarcodeChainway_getViewfinderHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderHeight_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderHeight_caller*) getSharedInstance;
+(void) getViewfinderHeight:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params;
+(void) getViewfinderHeight_in_thread:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params;
+(void) getViewfinderHeight_in_UI_thread:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderHeight_caller* our_BarcodeChainway_getViewfinderHeight_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderHeight_caller

+(rb_BarcodeChainway_getViewfinderHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderHeight_caller == nil) {
        our_BarcodeChainway_getViewfinderHeight_caller = [[rb_BarcodeChainway_getViewfinderHeight_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderHeight_caller;
}

-(void) command_getViewfinderHeight:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderHeight:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderHeight:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderHeight_caller getSharedInstance] command_getViewfinderHeight:caller_params];
}

+(void) getViewfinderHeight_in_thread:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderHeight:) withObject:caller_params];
}

+(void) getViewfinderHeight_in_UI_thread:(rb_BarcodeChainway_getViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderHeight"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderHeight_caller getViewfinderHeight_in_thread:[rb_BarcodeChainway_getViewfinderHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderHeight_caller getViewfinderHeight:[rb_BarcodeChainway_getViewfinderHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderHeight_caller_params* par = [[[rb_BarcodeChainway_setViewfinderHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderHeight_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderHeight_caller*) getSharedInstance;
+(void) setViewfinderHeight:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params;
+(void) setViewfinderHeight_in_thread:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params;
+(void) setViewfinderHeight_in_UI_thread:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderHeight_caller* our_BarcodeChainway_setViewfinderHeight_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderHeight_caller

+(rb_BarcodeChainway_setViewfinderHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderHeight_caller == nil) {
        our_BarcodeChainway_setViewfinderHeight_caller = [[rb_BarcodeChainway_setViewfinderHeight_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderHeight_caller;
}

-(void) command_setViewfinderHeight:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderHeight:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderHeight:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderHeight_caller getSharedInstance] command_setViewfinderHeight:caller_params];
}

+(void) setViewfinderHeight_in_thread:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderHeight:) withObject:caller_params];
}

+(void) setViewfinderHeight_in_UI_thread:(rb_BarcodeChainway_setViewfinderHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderHeight="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderHeight_caller setViewfinderHeight_in_thread:[rb_BarcodeChainway_setViewfinderHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderHeight_caller setViewfinderHeight:[rb_BarcodeChainway_setViewfinderHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderFeedback_caller_params* par = [[[rb_BarcodeChainway_getViewfinderFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderFeedback_caller*) getSharedInstance;
+(void) getViewfinderFeedback:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params;
+(void) getViewfinderFeedback_in_thread:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params;
+(void) getViewfinderFeedback_in_UI_thread:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderFeedback_caller* our_BarcodeChainway_getViewfinderFeedback_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderFeedback_caller

+(rb_BarcodeChainway_getViewfinderFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderFeedback_caller == nil) {
        our_BarcodeChainway_getViewfinderFeedback_caller = [[rb_BarcodeChainway_getViewfinderFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderFeedback_caller;
}

-(void) command_getViewfinderFeedback:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderFeedback:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderFeedback:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedback_caller getSharedInstance] command_getViewfinderFeedback:caller_params];
}

+(void) getViewfinderFeedback_in_thread:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderFeedback:) withObject:caller_params];
}

+(void) getViewfinderFeedback_in_UI_thread:(rb_BarcodeChainway_getViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderFeedback"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderFeedback_caller getViewfinderFeedback_in_thread:[rb_BarcodeChainway_getViewfinderFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderFeedback_caller getViewfinderFeedback:[rb_BarcodeChainway_getViewfinderFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderFeedback_caller_params* par = [[[rb_BarcodeChainway_setViewfinderFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderFeedback_caller*) getSharedInstance;
+(void) setViewfinderFeedback:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params;
+(void) setViewfinderFeedback_in_thread:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params;
+(void) setViewfinderFeedback_in_UI_thread:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderFeedback_caller* our_BarcodeChainway_setViewfinderFeedback_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderFeedback_caller

+(rb_BarcodeChainway_setViewfinderFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderFeedback_caller == nil) {
        our_BarcodeChainway_setViewfinderFeedback_caller = [[rb_BarcodeChainway_setViewfinderFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderFeedback_caller;
}

-(void) command_setViewfinderFeedback:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderFeedback:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderFeedback:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedback_caller getSharedInstance] command_setViewfinderFeedback:caller_params];
}

+(void) setViewfinderFeedback_in_thread:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderFeedback:) withObject:caller_params];
}

+(void) setViewfinderFeedback_in_UI_thread:(rb_BarcodeChainway_setViewfinderFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderFeedback="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderFeedback_caller setViewfinderFeedback_in_thread:[rb_BarcodeChainway_setViewfinderFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderFeedback_caller setViewfinderFeedback:[rb_BarcodeChainway_setViewfinderFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params* par = [[[rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getViewfinderFeedbackTime_caller : NSObject {

}
+(rb_BarcodeChainway_getViewfinderFeedbackTime_caller*) getSharedInstance;
+(void) getViewfinderFeedbackTime:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params;
+(void) getViewfinderFeedbackTime_in_thread:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params;
+(void) getViewfinderFeedbackTime_in_UI_thread:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getViewfinderFeedbackTime_caller* our_BarcodeChainway_getViewfinderFeedbackTime_caller = nil;

@implementation rb_BarcodeChainway_getViewfinderFeedbackTime_caller

+(rb_BarcodeChainway_getViewfinderFeedbackTime_caller*) getSharedInstance {
    if (our_BarcodeChainway_getViewfinderFeedbackTime_caller == nil) {
        our_BarcodeChainway_getViewfinderFeedbackTime_caller = [[rb_BarcodeChainway_getViewfinderFeedbackTime_caller alloc] init];
    }
    return our_BarcodeChainway_getViewfinderFeedbackTime_caller;
}

-(void) command_getViewfinderFeedbackTime:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getViewfinderFeedbackTime:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getViewfinderFeedbackTime:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedbackTime_caller getSharedInstance] command_getViewfinderFeedbackTime:caller_params];
}

+(void) getViewfinderFeedbackTime_in_thread:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedbackTime_caller getSharedInstance] performSelectorInBackground:@selector(command_getViewfinderFeedbackTime:) withObject:caller_params];
}

+(void) getViewfinderFeedbackTime_in_UI_thread:(rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_getViewfinderFeedbackTime_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getViewfinderFeedbackTime:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getViewfinderFeedbackTime_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderFeedbackTime"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getViewfinderFeedbackTime_caller getViewfinderFeedbackTime_in_thread:[rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getViewfinderFeedbackTime_caller getViewfinderFeedbackTime:[rb_BarcodeChainway_getViewfinderFeedbackTime_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getViewfinderFeedbackTime(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getViewfinderFeedbackTime_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getViewfinderFeedbackTime(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getViewfinderFeedbackTime_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params* par = [[[rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setViewfinderFeedbackTime_caller : NSObject {

}
+(rb_BarcodeChainway_setViewfinderFeedbackTime_caller*) getSharedInstance;
+(void) setViewfinderFeedbackTime:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params;
+(void) setViewfinderFeedbackTime_in_thread:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params;
+(void) setViewfinderFeedbackTime_in_UI_thread:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setViewfinderFeedbackTime_caller* our_BarcodeChainway_setViewfinderFeedbackTime_caller = nil;

@implementation rb_BarcodeChainway_setViewfinderFeedbackTime_caller

+(rb_BarcodeChainway_setViewfinderFeedbackTime_caller*) getSharedInstance {
    if (our_BarcodeChainway_setViewfinderFeedbackTime_caller == nil) {
        our_BarcodeChainway_setViewfinderFeedbackTime_caller = [[rb_BarcodeChainway_setViewfinderFeedbackTime_caller alloc] init];
    }
    return our_BarcodeChainway_setViewfinderFeedbackTime_caller;
}

-(void) command_setViewfinderFeedbackTime:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setViewfinderFeedbackTime:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setViewfinderFeedbackTime:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedbackTime_caller getSharedInstance] command_setViewfinderFeedbackTime:caller_params];
}

+(void) setViewfinderFeedbackTime_in_thread:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedbackTime_caller getSharedInstance] performSelectorInBackground:@selector(command_setViewfinderFeedbackTime:) withObject:caller_params];
}

+(void) setViewfinderFeedbackTime_in_UI_thread:(rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params*)caller_params {
    [[rb_BarcodeChainway_setViewfinderFeedbackTime_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setViewfinderFeedbackTime:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setViewfinderFeedbackTime_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::viewfinderFeedbackTime="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setViewfinderFeedbackTime_caller setViewfinderFeedbackTime_in_thread:[rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setViewfinderFeedbackTime_caller setViewfinderFeedbackTime:[rb_BarcodeChainway_setViewfinderFeedbackTime_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setViewfinderFeedbackTime(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setViewfinderFeedbackTime_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setViewfinderFeedbackTime(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setViewfinderFeedbackTime_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getFocusMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getFocusMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getFocusMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getFocusMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getFocusMode_caller_params* par = [[[rb_BarcodeChainway_getFocusMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getFocusMode_caller : NSObject {

}
+(rb_BarcodeChainway_getFocusMode_caller*) getSharedInstance;
+(void) getFocusMode:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params;
+(void) getFocusMode_in_thread:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params;
+(void) getFocusMode_in_UI_thread:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getFocusMode_caller* our_BarcodeChainway_getFocusMode_caller = nil;

@implementation rb_BarcodeChainway_getFocusMode_caller

+(rb_BarcodeChainway_getFocusMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getFocusMode_caller == nil) {
        our_BarcodeChainway_getFocusMode_caller = [[rb_BarcodeChainway_getFocusMode_caller alloc] init];
    }
    return our_BarcodeChainway_getFocusMode_caller;
}

-(void) command_getFocusMode:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getFocusMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getFocusMode:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFocusMode_caller getSharedInstance] command_getFocusMode:caller_params];
}

+(void) getFocusMode_in_thread:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFocusMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getFocusMode:) withObject:caller_params];
}

+(void) getFocusMode_in_UI_thread:(rb_BarcodeChainway_getFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFocusMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getFocusMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getFocusMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::focusMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getFocusMode_caller getFocusMode_in_thread:[rb_BarcodeChainway_getFocusMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getFocusMode_caller getFocusMode:[rb_BarcodeChainway_getFocusMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getFocusMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getFocusMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getFocusMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getFocusMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setFocusMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setFocusMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setFocusMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setFocusMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setFocusMode_caller_params* par = [[[rb_BarcodeChainway_setFocusMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setFocusMode_caller : NSObject {

}
+(rb_BarcodeChainway_setFocusMode_caller*) getSharedInstance;
+(void) setFocusMode:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params;
+(void) setFocusMode_in_thread:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params;
+(void) setFocusMode_in_UI_thread:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setFocusMode_caller* our_BarcodeChainway_setFocusMode_caller = nil;

@implementation rb_BarcodeChainway_setFocusMode_caller

+(rb_BarcodeChainway_setFocusMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setFocusMode_caller == nil) {
        our_BarcodeChainway_setFocusMode_caller = [[rb_BarcodeChainway_setFocusMode_caller alloc] init];
    }
    return our_BarcodeChainway_setFocusMode_caller;
}

-(void) command_setFocusMode:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setFocusMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setFocusMode:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setFocusMode_caller getSharedInstance] command_setFocusMode:caller_params];
}

+(void) setFocusMode_in_thread:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setFocusMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setFocusMode:) withObject:caller_params];
}

+(void) setFocusMode_in_UI_thread:(rb_BarcodeChainway_setFocusMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setFocusMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setFocusMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setFocusMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::focusMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setFocusMode_caller setFocusMode_in_thread:[rb_BarcodeChainway_setFocusMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setFocusMode_caller setFocusMode:[rb_BarcodeChainway_setFocusMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setFocusMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setFocusMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setFocusMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setFocusMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getIlluminationMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getIlluminationMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getIlluminationMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getIlluminationMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getIlluminationMode_caller_params* par = [[[rb_BarcodeChainway_getIlluminationMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getIlluminationMode_caller : NSObject {

}
+(rb_BarcodeChainway_getIlluminationMode_caller*) getSharedInstance;
+(void) getIlluminationMode:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params;
+(void) getIlluminationMode_in_thread:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params;
+(void) getIlluminationMode_in_UI_thread:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getIlluminationMode_caller* our_BarcodeChainway_getIlluminationMode_caller = nil;

@implementation rb_BarcodeChainway_getIlluminationMode_caller

+(rb_BarcodeChainway_getIlluminationMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getIlluminationMode_caller == nil) {
        our_BarcodeChainway_getIlluminationMode_caller = [[rb_BarcodeChainway_getIlluminationMode_caller alloc] init];
    }
    return our_BarcodeChainway_getIlluminationMode_caller;
}

-(void) command_getIlluminationMode:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getIlluminationMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getIlluminationMode:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getIlluminationMode_caller getSharedInstance] command_getIlluminationMode:caller_params];
}

+(void) getIlluminationMode_in_thread:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getIlluminationMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getIlluminationMode:) withObject:caller_params];
}

+(void) getIlluminationMode_in_UI_thread:(rb_BarcodeChainway_getIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getIlluminationMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getIlluminationMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getIlluminationMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::illuminationMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getIlluminationMode_caller getIlluminationMode_in_thread:[rb_BarcodeChainway_getIlluminationMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getIlluminationMode_caller getIlluminationMode:[rb_BarcodeChainway_getIlluminationMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getIlluminationMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getIlluminationMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getIlluminationMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getIlluminationMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setIlluminationMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setIlluminationMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setIlluminationMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setIlluminationMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setIlluminationMode_caller_params* par = [[[rb_BarcodeChainway_setIlluminationMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setIlluminationMode_caller : NSObject {

}
+(rb_BarcodeChainway_setIlluminationMode_caller*) getSharedInstance;
+(void) setIlluminationMode:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params;
+(void) setIlluminationMode_in_thread:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params;
+(void) setIlluminationMode_in_UI_thread:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setIlluminationMode_caller* our_BarcodeChainway_setIlluminationMode_caller = nil;

@implementation rb_BarcodeChainway_setIlluminationMode_caller

+(rb_BarcodeChainway_setIlluminationMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setIlluminationMode_caller == nil) {
        our_BarcodeChainway_setIlluminationMode_caller = [[rb_BarcodeChainway_setIlluminationMode_caller alloc] init];
    }
    return our_BarcodeChainway_setIlluminationMode_caller;
}

-(void) command_setIlluminationMode:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setIlluminationMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setIlluminationMode:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setIlluminationMode_caller getSharedInstance] command_setIlluminationMode:caller_params];
}

+(void) setIlluminationMode_in_thread:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setIlluminationMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setIlluminationMode:) withObject:caller_params];
}

+(void) setIlluminationMode_in_UI_thread:(rb_BarcodeChainway_setIlluminationMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setIlluminationMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setIlluminationMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setIlluminationMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::illuminationMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setIlluminationMode_caller setIlluminationMode_in_thread:[rb_BarcodeChainway_setIlluminationMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setIlluminationMode_caller setIlluminationMode:[rb_BarcodeChainway_setIlluminationMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setIlluminationMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setIlluminationMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setIlluminationMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setIlluminationMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDpmMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDpmMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDpmMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDpmMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDpmMode_caller_params* par = [[[rb_BarcodeChainway_getDpmMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDpmMode_caller : NSObject {

}
+(rb_BarcodeChainway_getDpmMode_caller*) getSharedInstance;
+(void) getDpmMode:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params;
+(void) getDpmMode_in_thread:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params;
+(void) getDpmMode_in_UI_thread:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDpmMode_caller* our_BarcodeChainway_getDpmMode_caller = nil;

@implementation rb_BarcodeChainway_getDpmMode_caller

+(rb_BarcodeChainway_getDpmMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDpmMode_caller == nil) {
        our_BarcodeChainway_getDpmMode_caller = [[rb_BarcodeChainway_getDpmMode_caller alloc] init];
    }
    return our_BarcodeChainway_getDpmMode_caller;
}

-(void) command_getDpmMode:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDpmMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDpmMode:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDpmMode_caller getSharedInstance] command_getDpmMode:caller_params];
}

+(void) getDpmMode_in_thread:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDpmMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getDpmMode:) withObject:caller_params];
}

+(void) getDpmMode_in_UI_thread:(rb_BarcodeChainway_getDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDpmMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDpmMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDpmMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dpmMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDpmMode_caller getDpmMode_in_thread:[rb_BarcodeChainway_getDpmMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDpmMode_caller getDpmMode:[rb_BarcodeChainway_getDpmMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDpmMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDpmMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDpmMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDpmMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDpmMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDpmMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDpmMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDpmMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDpmMode_caller_params* par = [[[rb_BarcodeChainway_setDpmMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDpmMode_caller : NSObject {

}
+(rb_BarcodeChainway_setDpmMode_caller*) getSharedInstance;
+(void) setDpmMode:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params;
+(void) setDpmMode_in_thread:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params;
+(void) setDpmMode_in_UI_thread:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDpmMode_caller* our_BarcodeChainway_setDpmMode_caller = nil;

@implementation rb_BarcodeChainway_setDpmMode_caller

+(rb_BarcodeChainway_setDpmMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDpmMode_caller == nil) {
        our_BarcodeChainway_setDpmMode_caller = [[rb_BarcodeChainway_setDpmMode_caller alloc] init];
    }
    return our_BarcodeChainway_setDpmMode_caller;
}

-(void) command_setDpmMode:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDpmMode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDpmMode:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDpmMode_caller getSharedInstance] command_setDpmMode:caller_params];
}

+(void) setDpmMode_in_thread:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDpmMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setDpmMode:) withObject:caller_params];
}

+(void) setDpmMode_in_UI_thread:(rb_BarcodeChainway_setDpmMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDpmMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDpmMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDpmMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dpmMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDpmMode_caller setDpmMode_in_thread:[rb_BarcodeChainway_setDpmMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDpmMode_caller setDpmMode:[rb_BarcodeChainway_setDpmMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDpmMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDpmMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDpmMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDpmMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getInverse1dMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getInverse1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getInverse1dMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getInverse1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getInverse1dMode_caller_params* par = [[[rb_BarcodeChainway_getInverse1dMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getInverse1dMode_caller : NSObject {

}
+(rb_BarcodeChainway_getInverse1dMode_caller*) getSharedInstance;
+(void) getInverse1dMode:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params;
+(void) getInverse1dMode_in_thread:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params;
+(void) getInverse1dMode_in_UI_thread:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getInverse1dMode_caller* our_BarcodeChainway_getInverse1dMode_caller = nil;

@implementation rb_BarcodeChainway_getInverse1dMode_caller

+(rb_BarcodeChainway_getInverse1dMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getInverse1dMode_caller == nil) {
        our_BarcodeChainway_getInverse1dMode_caller = [[rb_BarcodeChainway_getInverse1dMode_caller alloc] init];
    }
    return our_BarcodeChainway_getInverse1dMode_caller;
}

-(void) command_getInverse1dMode:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getInverse1dMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getInverse1dMode:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInverse1dMode_caller getSharedInstance] command_getInverse1dMode:caller_params];
}

+(void) getInverse1dMode_in_thread:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInverse1dMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getInverse1dMode:) withObject:caller_params];
}

+(void) getInverse1dMode_in_UI_thread:(rb_BarcodeChainway_getInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInverse1dMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getInverse1dMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getInverse1dMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::inverse1dMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getInverse1dMode_caller getInverse1dMode_in_thread:[rb_BarcodeChainway_getInverse1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getInverse1dMode_caller getInverse1dMode:[rb_BarcodeChainway_getInverse1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getInverse1dMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getInverse1dMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getInverse1dMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getInverse1dMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setInverse1dMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setInverse1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setInverse1dMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setInverse1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setInverse1dMode_caller_params* par = [[[rb_BarcodeChainway_setInverse1dMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setInverse1dMode_caller : NSObject {

}
+(rb_BarcodeChainway_setInverse1dMode_caller*) getSharedInstance;
+(void) setInverse1dMode:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params;
+(void) setInverse1dMode_in_thread:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params;
+(void) setInverse1dMode_in_UI_thread:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setInverse1dMode_caller* our_BarcodeChainway_setInverse1dMode_caller = nil;

@implementation rb_BarcodeChainway_setInverse1dMode_caller

+(rb_BarcodeChainway_setInverse1dMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setInverse1dMode_caller == nil) {
        our_BarcodeChainway_setInverse1dMode_caller = [[rb_BarcodeChainway_setInverse1dMode_caller alloc] init];
    }
    return our_BarcodeChainway_setInverse1dMode_caller;
}

-(void) command_setInverse1dMode:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setInverse1dMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setInverse1dMode:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInverse1dMode_caller getSharedInstance] command_setInverse1dMode:caller_params];
}

+(void) setInverse1dMode_in_thread:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInverse1dMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setInverse1dMode:) withObject:caller_params];
}

+(void) setInverse1dMode_in_UI_thread:(rb_BarcodeChainway_setInverse1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInverse1dMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setInverse1dMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setInverse1dMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::inverse1dMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setInverse1dMode_caller setInverse1dMode_in_thread:[rb_BarcodeChainway_setInverse1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setInverse1dMode_caller setInverse1dMode:[rb_BarcodeChainway_setInverse1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setInverse1dMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setInverse1dMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setInverse1dMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setInverse1dMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getPoorQuality1dMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getPoorQuality1dMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getPoorQuality1dMode_caller_params* par = [[[rb_BarcodeChainway_getPoorQuality1dMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getPoorQuality1dMode_caller : NSObject {

}
+(rb_BarcodeChainway_getPoorQuality1dMode_caller*) getSharedInstance;
+(void) getPoorQuality1dMode:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params;
+(void) getPoorQuality1dMode_in_thread:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params;
+(void) getPoorQuality1dMode_in_UI_thread:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getPoorQuality1dMode_caller* our_BarcodeChainway_getPoorQuality1dMode_caller = nil;

@implementation rb_BarcodeChainway_getPoorQuality1dMode_caller

+(rb_BarcodeChainway_getPoorQuality1dMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getPoorQuality1dMode_caller == nil) {
        our_BarcodeChainway_getPoorQuality1dMode_caller = [[rb_BarcodeChainway_getPoorQuality1dMode_caller alloc] init];
    }
    return our_BarcodeChainway_getPoorQuality1dMode_caller;
}

-(void) command_getPoorQuality1dMode:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getPoorQuality1dMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getPoorQuality1dMode:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPoorQuality1dMode_caller getSharedInstance] command_getPoorQuality1dMode:caller_params];
}

+(void) getPoorQuality1dMode_in_thread:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPoorQuality1dMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getPoorQuality1dMode:) withObject:caller_params];
}

+(void) getPoorQuality1dMode_in_UI_thread:(rb_BarcodeChainway_getPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPoorQuality1dMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getPoorQuality1dMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getPoorQuality1dMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::poorQuality1dMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getPoorQuality1dMode_caller getPoorQuality1dMode_in_thread:[rb_BarcodeChainway_getPoorQuality1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getPoorQuality1dMode_caller getPoorQuality1dMode:[rb_BarcodeChainway_getPoorQuality1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getPoorQuality1dMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getPoorQuality1dMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getPoorQuality1dMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getPoorQuality1dMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setPoorQuality1dMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setPoorQuality1dMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setPoorQuality1dMode_caller_params* par = [[[rb_BarcodeChainway_setPoorQuality1dMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setPoorQuality1dMode_caller : NSObject {

}
+(rb_BarcodeChainway_setPoorQuality1dMode_caller*) getSharedInstance;
+(void) setPoorQuality1dMode:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params;
+(void) setPoorQuality1dMode_in_thread:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params;
+(void) setPoorQuality1dMode_in_UI_thread:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setPoorQuality1dMode_caller* our_BarcodeChainway_setPoorQuality1dMode_caller = nil;

@implementation rb_BarcodeChainway_setPoorQuality1dMode_caller

+(rb_BarcodeChainway_setPoorQuality1dMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setPoorQuality1dMode_caller == nil) {
        our_BarcodeChainway_setPoorQuality1dMode_caller = [[rb_BarcodeChainway_setPoorQuality1dMode_caller alloc] init];
    }
    return our_BarcodeChainway_setPoorQuality1dMode_caller;
}

-(void) command_setPoorQuality1dMode:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setPoorQuality1dMode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setPoorQuality1dMode:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPoorQuality1dMode_caller getSharedInstance] command_setPoorQuality1dMode:caller_params];
}

+(void) setPoorQuality1dMode_in_thread:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPoorQuality1dMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setPoorQuality1dMode:) withObject:caller_params];
}

+(void) setPoorQuality1dMode_in_UI_thread:(rb_BarcodeChainway_setPoorQuality1dMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPoorQuality1dMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setPoorQuality1dMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setPoorQuality1dMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::poorQuality1dMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setPoorQuality1dMode_caller setPoorQuality1dMode_in_thread:[rb_BarcodeChainway_setPoorQuality1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setPoorQuality1dMode_caller setPoorQuality1dMode:[rb_BarcodeChainway_setPoorQuality1dMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setPoorQuality1dMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setPoorQuality1dMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setPoorQuality1dMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setPoorQuality1dMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getBeamWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getBeamWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getBeamWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getBeamWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getBeamWidth_caller_params* par = [[[rb_BarcodeChainway_getBeamWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getBeamWidth_caller : NSObject {

}
+(rb_BarcodeChainway_getBeamWidth_caller*) getSharedInstance;
+(void) getBeamWidth:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params;
+(void) getBeamWidth_in_thread:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params;
+(void) getBeamWidth_in_UI_thread:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getBeamWidth_caller* our_BarcodeChainway_getBeamWidth_caller = nil;

@implementation rb_BarcodeChainway_getBeamWidth_caller

+(rb_BarcodeChainway_getBeamWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_getBeamWidth_caller == nil) {
        our_BarcodeChainway_getBeamWidth_caller = [[rb_BarcodeChainway_getBeamWidth_caller alloc] init];
    }
    return our_BarcodeChainway_getBeamWidth_caller;
}

-(void) command_getBeamWidth:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getBeamWidth:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getBeamWidth:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBeamWidth_caller getSharedInstance] command_getBeamWidth:caller_params];
}

+(void) getBeamWidth_in_thread:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBeamWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_getBeamWidth:) withObject:caller_params];
}

+(void) getBeamWidth_in_UI_thread:(rb_BarcodeChainway_getBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBeamWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getBeamWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getBeamWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::beamWidth"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getBeamWidth_caller getBeamWidth_in_thread:[rb_BarcodeChainway_getBeamWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getBeamWidth_caller getBeamWidth:[rb_BarcodeChainway_getBeamWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getBeamWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getBeamWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getBeamWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getBeamWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setBeamWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setBeamWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setBeamWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setBeamWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setBeamWidth_caller_params* par = [[[rb_BarcodeChainway_setBeamWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setBeamWidth_caller : NSObject {

}
+(rb_BarcodeChainway_setBeamWidth_caller*) getSharedInstance;
+(void) setBeamWidth:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params;
+(void) setBeamWidth_in_thread:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params;
+(void) setBeamWidth_in_UI_thread:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setBeamWidth_caller* our_BarcodeChainway_setBeamWidth_caller = nil;

@implementation rb_BarcodeChainway_setBeamWidth_caller

+(rb_BarcodeChainway_setBeamWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_setBeamWidth_caller == nil) {
        our_BarcodeChainway_setBeamWidth_caller = [[rb_BarcodeChainway_setBeamWidth_caller alloc] init];
    }
    return our_BarcodeChainway_setBeamWidth_caller;
}

-(void) command_setBeamWidth:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setBeamWidth:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setBeamWidth:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBeamWidth_caller getSharedInstance] command_setBeamWidth:caller_params];
}

+(void) setBeamWidth_in_thread:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBeamWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_setBeamWidth:) withObject:caller_params];
}

+(void) setBeamWidth_in_UI_thread:(rb_BarcodeChainway_setBeamWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBeamWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setBeamWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setBeamWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::beamWidth="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setBeamWidth_caller setBeamWidth_in_thread:[rb_BarcodeChainway_setBeamWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setBeamWidth_caller setBeamWidth:[rb_BarcodeChainway_setBeamWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setBeamWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setBeamWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setBeamWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setBeamWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDbpMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDbpMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDbpMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDbpMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDbpMode_caller_params* par = [[[rb_BarcodeChainway_getDbpMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDbpMode_caller : NSObject {

}
+(rb_BarcodeChainway_getDbpMode_caller*) getSharedInstance;
+(void) getDbpMode:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params;
+(void) getDbpMode_in_thread:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params;
+(void) getDbpMode_in_UI_thread:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDbpMode_caller* our_BarcodeChainway_getDbpMode_caller = nil;

@implementation rb_BarcodeChainway_getDbpMode_caller

+(rb_BarcodeChainway_getDbpMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDbpMode_caller == nil) {
        our_BarcodeChainway_getDbpMode_caller = [[rb_BarcodeChainway_getDbpMode_caller alloc] init];
    }
    return our_BarcodeChainway_getDbpMode_caller;
}

-(void) command_getDbpMode:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDbpMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDbpMode:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDbpMode_caller getSharedInstance] command_getDbpMode:caller_params];
}

+(void) getDbpMode_in_thread:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDbpMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getDbpMode:) withObject:caller_params];
}

+(void) getDbpMode_in_UI_thread:(rb_BarcodeChainway_getDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDbpMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDbpMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDbpMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dbpMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDbpMode_caller getDbpMode_in_thread:[rb_BarcodeChainway_getDbpMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDbpMode_caller getDbpMode:[rb_BarcodeChainway_getDbpMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDbpMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDbpMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDbpMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDbpMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDbpMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDbpMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDbpMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDbpMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDbpMode_caller_params* par = [[[rb_BarcodeChainway_setDbpMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDbpMode_caller : NSObject {

}
+(rb_BarcodeChainway_setDbpMode_caller*) getSharedInstance;
+(void) setDbpMode:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params;
+(void) setDbpMode_in_thread:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params;
+(void) setDbpMode_in_UI_thread:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDbpMode_caller* our_BarcodeChainway_setDbpMode_caller = nil;

@implementation rb_BarcodeChainway_setDbpMode_caller

+(rb_BarcodeChainway_setDbpMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDbpMode_caller == nil) {
        our_BarcodeChainway_setDbpMode_caller = [[rb_BarcodeChainway_setDbpMode_caller alloc] init];
    }
    return our_BarcodeChainway_setDbpMode_caller;
}

-(void) command_setDbpMode:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDbpMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDbpMode:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDbpMode_caller getSharedInstance] command_setDbpMode:caller_params];
}

+(void) setDbpMode_in_thread:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDbpMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setDbpMode:) withObject:caller_params];
}

+(void) setDbpMode_in_UI_thread:(rb_BarcodeChainway_setDbpMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDbpMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDbpMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDbpMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dbpMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDbpMode_caller setDbpMode_in_thread:[rb_BarcodeChainway_setDbpMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDbpMode_caller setDbpMode:[rb_BarcodeChainway_setDbpMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDbpMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDbpMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDbpMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDbpMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getKlasseEins_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getKlasseEins_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getKlasseEins_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getKlasseEins_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getKlasseEins_caller_params* par = [[[rb_BarcodeChainway_getKlasseEins_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getKlasseEins_caller : NSObject {

}
+(rb_BarcodeChainway_getKlasseEins_caller*) getSharedInstance;
+(void) getKlasseEins:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params;
+(void) getKlasseEins_in_thread:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params;
+(void) getKlasseEins_in_UI_thread:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getKlasseEins_caller* our_BarcodeChainway_getKlasseEins_caller = nil;

@implementation rb_BarcodeChainway_getKlasseEins_caller

+(rb_BarcodeChainway_getKlasseEins_caller*) getSharedInstance {
    if (our_BarcodeChainway_getKlasseEins_caller == nil) {
        our_BarcodeChainway_getKlasseEins_caller = [[rb_BarcodeChainway_getKlasseEins_caller alloc] init];
    }
    return our_BarcodeChainway_getKlasseEins_caller;
}

-(void) command_getKlasseEins:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getKlasseEins:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getKlasseEins:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKlasseEins_caller getSharedInstance] command_getKlasseEins:caller_params];
}

+(void) getKlasseEins_in_thread:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKlasseEins_caller getSharedInstance] performSelectorInBackground:@selector(command_getKlasseEins:) withObject:caller_params];
}

+(void) getKlasseEins_in_UI_thread:(rb_BarcodeChainway_getKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKlasseEins_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getKlasseEins:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getKlasseEins_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::klasseEins"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getKlasseEins_caller getKlasseEins_in_thread:[rb_BarcodeChainway_getKlasseEins_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getKlasseEins_caller getKlasseEins:[rb_BarcodeChainway_getKlasseEins_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getKlasseEins(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getKlasseEins_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getKlasseEins(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getKlasseEins_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setKlasseEins_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setKlasseEins_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setKlasseEins_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setKlasseEins_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setKlasseEins_caller_params* par = [[[rb_BarcodeChainway_setKlasseEins_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setKlasseEins_caller : NSObject {

}
+(rb_BarcodeChainway_setKlasseEins_caller*) getSharedInstance;
+(void) setKlasseEins:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params;
+(void) setKlasseEins_in_thread:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params;
+(void) setKlasseEins_in_UI_thread:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setKlasseEins_caller* our_BarcodeChainway_setKlasseEins_caller = nil;

@implementation rb_BarcodeChainway_setKlasseEins_caller

+(rb_BarcodeChainway_setKlasseEins_caller*) getSharedInstance {
    if (our_BarcodeChainway_setKlasseEins_caller == nil) {
        our_BarcodeChainway_setKlasseEins_caller = [[rb_BarcodeChainway_setKlasseEins_caller alloc] init];
    }
    return our_BarcodeChainway_setKlasseEins_caller;
}

-(void) command_setKlasseEins:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setKlasseEins:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setKlasseEins:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKlasseEins_caller getSharedInstance] command_setKlasseEins:caller_params];
}

+(void) setKlasseEins_in_thread:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKlasseEins_caller getSharedInstance] performSelectorInBackground:@selector(command_setKlasseEins:) withObject:caller_params];
}

+(void) setKlasseEins_in_UI_thread:(rb_BarcodeChainway_setKlasseEins_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKlasseEins_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setKlasseEins:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setKlasseEins_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::klasseEins="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setKlasseEins_caller setKlasseEins_in_thread:[rb_BarcodeChainway_setKlasseEins_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setKlasseEins_caller setKlasseEins:[rb_BarcodeChainway_setKlasseEins_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setKlasseEins(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setKlasseEins_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setKlasseEins(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setKlasseEins_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAdaptiveScanning_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAdaptiveScanning_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAdaptiveScanning_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAdaptiveScanning_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAdaptiveScanning_caller_params* par = [[[rb_BarcodeChainway_getAdaptiveScanning_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAdaptiveScanning_caller : NSObject {

}
+(rb_BarcodeChainway_getAdaptiveScanning_caller*) getSharedInstance;
+(void) getAdaptiveScanning:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params;
+(void) getAdaptiveScanning_in_thread:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params;
+(void) getAdaptiveScanning_in_UI_thread:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAdaptiveScanning_caller* our_BarcodeChainway_getAdaptiveScanning_caller = nil;

@implementation rb_BarcodeChainway_getAdaptiveScanning_caller

+(rb_BarcodeChainway_getAdaptiveScanning_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAdaptiveScanning_caller == nil) {
        our_BarcodeChainway_getAdaptiveScanning_caller = [[rb_BarcodeChainway_getAdaptiveScanning_caller alloc] init];
    }
    return our_BarcodeChainway_getAdaptiveScanning_caller;
}

-(void) command_getAdaptiveScanning:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAdaptiveScanning:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAdaptiveScanning:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAdaptiveScanning_caller getSharedInstance] command_getAdaptiveScanning:caller_params];
}

+(void) getAdaptiveScanning_in_thread:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAdaptiveScanning_caller getSharedInstance] performSelectorInBackground:@selector(command_getAdaptiveScanning:) withObject:caller_params];
}

+(void) getAdaptiveScanning_in_UI_thread:(rb_BarcodeChainway_getAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAdaptiveScanning_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAdaptiveScanning:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAdaptiveScanning_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::adaptiveScanning"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAdaptiveScanning_caller getAdaptiveScanning_in_thread:[rb_BarcodeChainway_getAdaptiveScanning_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAdaptiveScanning_caller getAdaptiveScanning:[rb_BarcodeChainway_getAdaptiveScanning_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAdaptiveScanning(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAdaptiveScanning_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAdaptiveScanning(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAdaptiveScanning_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAdaptiveScanning_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAdaptiveScanning_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAdaptiveScanning_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAdaptiveScanning_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAdaptiveScanning_caller_params* par = [[[rb_BarcodeChainway_setAdaptiveScanning_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAdaptiveScanning_caller : NSObject {

}
+(rb_BarcodeChainway_setAdaptiveScanning_caller*) getSharedInstance;
+(void) setAdaptiveScanning:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params;
+(void) setAdaptiveScanning_in_thread:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params;
+(void) setAdaptiveScanning_in_UI_thread:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAdaptiveScanning_caller* our_BarcodeChainway_setAdaptiveScanning_caller = nil;

@implementation rb_BarcodeChainway_setAdaptiveScanning_caller

+(rb_BarcodeChainway_setAdaptiveScanning_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAdaptiveScanning_caller == nil) {
        our_BarcodeChainway_setAdaptiveScanning_caller = [[rb_BarcodeChainway_setAdaptiveScanning_caller alloc] init];
    }
    return our_BarcodeChainway_setAdaptiveScanning_caller;
}

-(void) command_setAdaptiveScanning:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAdaptiveScanning:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAdaptiveScanning:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAdaptiveScanning_caller getSharedInstance] command_setAdaptiveScanning:caller_params];
}

+(void) setAdaptiveScanning_in_thread:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAdaptiveScanning_caller getSharedInstance] performSelectorInBackground:@selector(command_setAdaptiveScanning:) withObject:caller_params];
}

+(void) setAdaptiveScanning_in_UI_thread:(rb_BarcodeChainway_setAdaptiveScanning_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAdaptiveScanning_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAdaptiveScanning:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAdaptiveScanning_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::adaptiveScanning="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAdaptiveScanning_caller setAdaptiveScanning_in_thread:[rb_BarcodeChainway_setAdaptiveScanning_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAdaptiveScanning_caller setAdaptiveScanning:[rb_BarcodeChainway_setAdaptiveScanning_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAdaptiveScanning(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAdaptiveScanning_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAdaptiveScanning(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAdaptiveScanning_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getBidirectionalRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getBidirectionalRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getBidirectionalRedundancy_caller_params* par = [[[rb_BarcodeChainway_getBidirectionalRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getBidirectionalRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getBidirectionalRedundancy_caller*) getSharedInstance;
+(void) getBidirectionalRedundancy:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params;
+(void) getBidirectionalRedundancy_in_thread:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params;
+(void) getBidirectionalRedundancy_in_UI_thread:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getBidirectionalRedundancy_caller* our_BarcodeChainway_getBidirectionalRedundancy_caller = nil;

@implementation rb_BarcodeChainway_getBidirectionalRedundancy_caller

+(rb_BarcodeChainway_getBidirectionalRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getBidirectionalRedundancy_caller == nil) {
        our_BarcodeChainway_getBidirectionalRedundancy_caller = [[rb_BarcodeChainway_getBidirectionalRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getBidirectionalRedundancy_caller;
}

-(void) command_getBidirectionalRedundancy:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getBidirectionalRedundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getBidirectionalRedundancy:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBidirectionalRedundancy_caller getSharedInstance] command_getBidirectionalRedundancy:caller_params];
}

+(void) getBidirectionalRedundancy_in_thread:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBidirectionalRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getBidirectionalRedundancy:) withObject:caller_params];
}

+(void) getBidirectionalRedundancy_in_UI_thread:(rb_BarcodeChainway_getBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBidirectionalRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getBidirectionalRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getBidirectionalRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::bidirectionalRedundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getBidirectionalRedundancy_caller getBidirectionalRedundancy_in_thread:[rb_BarcodeChainway_getBidirectionalRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getBidirectionalRedundancy_caller getBidirectionalRedundancy:[rb_BarcodeChainway_getBidirectionalRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getBidirectionalRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getBidirectionalRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getBidirectionalRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getBidirectionalRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setBidirectionalRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setBidirectionalRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setBidirectionalRedundancy_caller_params* par = [[[rb_BarcodeChainway_setBidirectionalRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setBidirectionalRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setBidirectionalRedundancy_caller*) getSharedInstance;
+(void) setBidirectionalRedundancy:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params;
+(void) setBidirectionalRedundancy_in_thread:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params;
+(void) setBidirectionalRedundancy_in_UI_thread:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setBidirectionalRedundancy_caller* our_BarcodeChainway_setBidirectionalRedundancy_caller = nil;

@implementation rb_BarcodeChainway_setBidirectionalRedundancy_caller

+(rb_BarcodeChainway_setBidirectionalRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setBidirectionalRedundancy_caller == nil) {
        our_BarcodeChainway_setBidirectionalRedundancy_caller = [[rb_BarcodeChainway_setBidirectionalRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setBidirectionalRedundancy_caller;
}

-(void) command_setBidirectionalRedundancy:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setBidirectionalRedundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setBidirectionalRedundancy:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBidirectionalRedundancy_caller getSharedInstance] command_setBidirectionalRedundancy:caller_params];
}

+(void) setBidirectionalRedundancy_in_thread:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBidirectionalRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setBidirectionalRedundancy:) withObject:caller_params];
}

+(void) setBidirectionalRedundancy_in_UI_thread:(rb_BarcodeChainway_setBidirectionalRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBidirectionalRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setBidirectionalRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setBidirectionalRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::bidirectionalRedundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setBidirectionalRedundancy_caller setBidirectionalRedundancy_in_thread:[rb_BarcodeChainway_setBidirectionalRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setBidirectionalRedundancy_caller setBidirectionalRedundancy:[rb_BarcodeChainway_setBidirectionalRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setBidirectionalRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setBidirectionalRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setBidirectionalRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setBidirectionalRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getBarcodeDataFormat_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getBarcodeDataFormat_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getBarcodeDataFormat_caller_params* par = [[[rb_BarcodeChainway_getBarcodeDataFormat_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getBarcodeDataFormat_caller : NSObject {

}
+(rb_BarcodeChainway_getBarcodeDataFormat_caller*) getSharedInstance;
+(void) getBarcodeDataFormat:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params;
+(void) getBarcodeDataFormat_in_thread:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params;
+(void) getBarcodeDataFormat_in_UI_thread:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getBarcodeDataFormat_caller* our_BarcodeChainway_getBarcodeDataFormat_caller = nil;

@implementation rb_BarcodeChainway_getBarcodeDataFormat_caller

+(rb_BarcodeChainway_getBarcodeDataFormat_caller*) getSharedInstance {
    if (our_BarcodeChainway_getBarcodeDataFormat_caller == nil) {
        our_BarcodeChainway_getBarcodeDataFormat_caller = [[rb_BarcodeChainway_getBarcodeDataFormat_caller alloc] init];
    }
    return our_BarcodeChainway_getBarcodeDataFormat_caller;
}

-(void) command_getBarcodeDataFormat:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getBarcodeDataFormat:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getBarcodeDataFormat:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBarcodeDataFormat_caller getSharedInstance] command_getBarcodeDataFormat:caller_params];
}

+(void) getBarcodeDataFormat_in_thread:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBarcodeDataFormat_caller getSharedInstance] performSelectorInBackground:@selector(command_getBarcodeDataFormat:) withObject:caller_params];
}

+(void) getBarcodeDataFormat_in_UI_thread:(rb_BarcodeChainway_getBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getBarcodeDataFormat_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getBarcodeDataFormat:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getBarcodeDataFormat_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::barcodeDataFormat"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getBarcodeDataFormat_caller getBarcodeDataFormat_in_thread:[rb_BarcodeChainway_getBarcodeDataFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getBarcodeDataFormat_caller getBarcodeDataFormat:[rb_BarcodeChainway_getBarcodeDataFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getBarcodeDataFormat(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getBarcodeDataFormat_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getBarcodeDataFormat(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getBarcodeDataFormat_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setBarcodeDataFormat_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setBarcodeDataFormat_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setBarcodeDataFormat_caller_params* par = [[[rb_BarcodeChainway_setBarcodeDataFormat_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setBarcodeDataFormat_caller : NSObject {

}
+(rb_BarcodeChainway_setBarcodeDataFormat_caller*) getSharedInstance;
+(void) setBarcodeDataFormat:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params;
+(void) setBarcodeDataFormat_in_thread:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params;
+(void) setBarcodeDataFormat_in_UI_thread:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setBarcodeDataFormat_caller* our_BarcodeChainway_setBarcodeDataFormat_caller = nil;

@implementation rb_BarcodeChainway_setBarcodeDataFormat_caller

+(rb_BarcodeChainway_setBarcodeDataFormat_caller*) getSharedInstance {
    if (our_BarcodeChainway_setBarcodeDataFormat_caller == nil) {
        our_BarcodeChainway_setBarcodeDataFormat_caller = [[rb_BarcodeChainway_setBarcodeDataFormat_caller alloc] init];
    }
    return our_BarcodeChainway_setBarcodeDataFormat_caller;
}

-(void) command_setBarcodeDataFormat:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setBarcodeDataFormat:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setBarcodeDataFormat:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBarcodeDataFormat_caller getSharedInstance] command_setBarcodeDataFormat:caller_params];
}

+(void) setBarcodeDataFormat_in_thread:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBarcodeDataFormat_caller getSharedInstance] performSelectorInBackground:@selector(command_setBarcodeDataFormat:) withObject:caller_params];
}

+(void) setBarcodeDataFormat_in_UI_thread:(rb_BarcodeChainway_setBarcodeDataFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setBarcodeDataFormat_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setBarcodeDataFormat:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setBarcodeDataFormat_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::barcodeDataFormat="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setBarcodeDataFormat_caller setBarcodeDataFormat_in_thread:[rb_BarcodeChainway_setBarcodeDataFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setBarcodeDataFormat_caller setBarcodeDataFormat:[rb_BarcodeChainway_setBarcodeDataFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setBarcodeDataFormat(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setBarcodeDataFormat_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setBarcodeDataFormat(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setBarcodeDataFormat_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDataBufferSize_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDataBufferSize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDataBufferSize_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDataBufferSize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDataBufferSize_caller_params* par = [[[rb_BarcodeChainway_getDataBufferSize_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDataBufferSize_caller : NSObject {

}
+(rb_BarcodeChainway_getDataBufferSize_caller*) getSharedInstance;
+(void) getDataBufferSize:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params;
+(void) getDataBufferSize_in_thread:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params;
+(void) getDataBufferSize_in_UI_thread:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDataBufferSize_caller* our_BarcodeChainway_getDataBufferSize_caller = nil;

@implementation rb_BarcodeChainway_getDataBufferSize_caller

+(rb_BarcodeChainway_getDataBufferSize_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDataBufferSize_caller == nil) {
        our_BarcodeChainway_getDataBufferSize_caller = [[rb_BarcodeChainway_getDataBufferSize_caller alloc] init];
    }
    return our_BarcodeChainway_getDataBufferSize_caller;
}

-(void) command_getDataBufferSize:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDataBufferSize:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDataBufferSize:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDataBufferSize_caller getSharedInstance] command_getDataBufferSize:caller_params];
}

+(void) getDataBufferSize_in_thread:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDataBufferSize_caller getSharedInstance] performSelectorInBackground:@selector(command_getDataBufferSize:) withObject:caller_params];
}

+(void) getDataBufferSize_in_UI_thread:(rb_BarcodeChainway_getDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDataBufferSize_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDataBufferSize:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDataBufferSize_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dataBufferSize"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDataBufferSize_caller getDataBufferSize_in_thread:[rb_BarcodeChainway_getDataBufferSize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDataBufferSize_caller getDataBufferSize:[rb_BarcodeChainway_getDataBufferSize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDataBufferSize(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDataBufferSize_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDataBufferSize(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDataBufferSize_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDataBufferSize_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDataBufferSize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDataBufferSize_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDataBufferSize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDataBufferSize_caller_params* par = [[[rb_BarcodeChainway_setDataBufferSize_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDataBufferSize_caller : NSObject {

}
+(rb_BarcodeChainway_setDataBufferSize_caller*) getSharedInstance;
+(void) setDataBufferSize:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params;
+(void) setDataBufferSize_in_thread:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params;
+(void) setDataBufferSize_in_UI_thread:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDataBufferSize_caller* our_BarcodeChainway_setDataBufferSize_caller = nil;

@implementation rb_BarcodeChainway_setDataBufferSize_caller

+(rb_BarcodeChainway_setDataBufferSize_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDataBufferSize_caller == nil) {
        our_BarcodeChainway_setDataBufferSize_caller = [[rb_BarcodeChainway_setDataBufferSize_caller alloc] init];
    }
    return our_BarcodeChainway_setDataBufferSize_caller;
}

-(void) command_setDataBufferSize:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDataBufferSize:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDataBufferSize:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDataBufferSize_caller getSharedInstance] command_setDataBufferSize:caller_params];
}

+(void) setDataBufferSize_in_thread:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDataBufferSize_caller getSharedInstance] performSelectorInBackground:@selector(command_setDataBufferSize:) withObject:caller_params];
}

+(void) setDataBufferSize_in_UI_thread:(rb_BarcodeChainway_setDataBufferSize_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDataBufferSize_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDataBufferSize:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDataBufferSize_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dataBufferSize="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDataBufferSize_caller setDataBufferSize_in_thread:[rb_BarcodeChainway_setDataBufferSize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDataBufferSize_caller setDataBufferSize:[rb_BarcodeChainway_setDataBufferSize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDataBufferSize(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDataBufferSize_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDataBufferSize(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDataBufferSize_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getConnectionIdleTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getConnectionIdleTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getConnectionIdleTimeout_caller_params* par = [[[rb_BarcodeChainway_getConnectionIdleTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getConnectionIdleTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_getConnectionIdleTimeout_caller*) getSharedInstance;
+(void) getConnectionIdleTimeout:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params;
+(void) getConnectionIdleTimeout_in_thread:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params;
+(void) getConnectionIdleTimeout_in_UI_thread:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getConnectionIdleTimeout_caller* our_BarcodeChainway_getConnectionIdleTimeout_caller = nil;

@implementation rb_BarcodeChainway_getConnectionIdleTimeout_caller

+(rb_BarcodeChainway_getConnectionIdleTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_getConnectionIdleTimeout_caller == nil) {
        our_BarcodeChainway_getConnectionIdleTimeout_caller = [[rb_BarcodeChainway_getConnectionIdleTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_getConnectionIdleTimeout_caller;
}

-(void) command_getConnectionIdleTimeout:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getConnectionIdleTimeout:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getConnectionIdleTimeout:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getConnectionIdleTimeout_caller getSharedInstance] command_getConnectionIdleTimeout:caller_params];
}

+(void) getConnectionIdleTimeout_in_thread:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getConnectionIdleTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_getConnectionIdleTimeout:) withObject:caller_params];
}

+(void) getConnectionIdleTimeout_in_UI_thread:(rb_BarcodeChainway_getConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getConnectionIdleTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getConnectionIdleTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getConnectionIdleTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::connectionIdleTimeout"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getConnectionIdleTimeout_caller getConnectionIdleTimeout_in_thread:[rb_BarcodeChainway_getConnectionIdleTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getConnectionIdleTimeout_caller getConnectionIdleTimeout:[rb_BarcodeChainway_getConnectionIdleTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getConnectionIdleTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getConnectionIdleTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getConnectionIdleTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getConnectionIdleTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setConnectionIdleTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setConnectionIdleTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setConnectionIdleTimeout_caller_params* par = [[[rb_BarcodeChainway_setConnectionIdleTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setConnectionIdleTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_setConnectionIdleTimeout_caller*) getSharedInstance;
+(void) setConnectionIdleTimeout:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params;
+(void) setConnectionIdleTimeout_in_thread:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params;
+(void) setConnectionIdleTimeout_in_UI_thread:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setConnectionIdleTimeout_caller* our_BarcodeChainway_setConnectionIdleTimeout_caller = nil;

@implementation rb_BarcodeChainway_setConnectionIdleTimeout_caller

+(rb_BarcodeChainway_setConnectionIdleTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_setConnectionIdleTimeout_caller == nil) {
        our_BarcodeChainway_setConnectionIdleTimeout_caller = [[rb_BarcodeChainway_setConnectionIdleTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_setConnectionIdleTimeout_caller;
}

-(void) command_setConnectionIdleTimeout:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setConnectionIdleTimeout:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setConnectionIdleTimeout:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setConnectionIdleTimeout_caller getSharedInstance] command_setConnectionIdleTimeout:caller_params];
}

+(void) setConnectionIdleTimeout_in_thread:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setConnectionIdleTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_setConnectionIdleTimeout:) withObject:caller_params];
}

+(void) setConnectionIdleTimeout_in_UI_thread:(rb_BarcodeChainway_setConnectionIdleTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setConnectionIdleTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setConnectionIdleTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setConnectionIdleTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::connectionIdleTimeout="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setConnectionIdleTimeout_caller setConnectionIdleTimeout_in_thread:[rb_BarcodeChainway_setConnectionIdleTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setConnectionIdleTimeout_caller setConnectionIdleTimeout:[rb_BarcodeChainway_setConnectionIdleTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setConnectionIdleTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setConnectionIdleTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setConnectionIdleTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setConnectionIdleTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params* par = [[[rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDisconnectBtOnDisable_caller : NSObject {

}
+(rb_BarcodeChainway_getDisconnectBtOnDisable_caller*) getSharedInstance;
+(void) getDisconnectBtOnDisable:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params;
+(void) getDisconnectBtOnDisable_in_thread:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params;
+(void) getDisconnectBtOnDisable_in_UI_thread:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDisconnectBtOnDisable_caller* our_BarcodeChainway_getDisconnectBtOnDisable_caller = nil;

@implementation rb_BarcodeChainway_getDisconnectBtOnDisable_caller

+(rb_BarcodeChainway_getDisconnectBtOnDisable_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDisconnectBtOnDisable_caller == nil) {
        our_BarcodeChainway_getDisconnectBtOnDisable_caller = [[rb_BarcodeChainway_getDisconnectBtOnDisable_caller alloc] init];
    }
    return our_BarcodeChainway_getDisconnectBtOnDisable_caller;
}

-(void) command_getDisconnectBtOnDisable:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDisconnectBtOnDisable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDisconnectBtOnDisable:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisconnectBtOnDisable_caller getSharedInstance] command_getDisconnectBtOnDisable:caller_params];
}

+(void) getDisconnectBtOnDisable_in_thread:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisconnectBtOnDisable_caller getSharedInstance] performSelectorInBackground:@selector(command_getDisconnectBtOnDisable:) withObject:caller_params];
}

+(void) getDisconnectBtOnDisable_in_UI_thread:(rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisconnectBtOnDisable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDisconnectBtOnDisable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDisconnectBtOnDisable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::disconnectBtOnDisable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDisconnectBtOnDisable_caller getDisconnectBtOnDisable_in_thread:[rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDisconnectBtOnDisable_caller getDisconnectBtOnDisable:[rb_BarcodeChainway_getDisconnectBtOnDisable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDisconnectBtOnDisable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDisconnectBtOnDisable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDisconnectBtOnDisable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDisconnectBtOnDisable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params* par = [[[rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDisconnectBtOnDisable_caller : NSObject {

}
+(rb_BarcodeChainway_setDisconnectBtOnDisable_caller*) getSharedInstance;
+(void) setDisconnectBtOnDisable:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params;
+(void) setDisconnectBtOnDisable_in_thread:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params;
+(void) setDisconnectBtOnDisable_in_UI_thread:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDisconnectBtOnDisable_caller* our_BarcodeChainway_setDisconnectBtOnDisable_caller = nil;

@implementation rb_BarcodeChainway_setDisconnectBtOnDisable_caller

+(rb_BarcodeChainway_setDisconnectBtOnDisable_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDisconnectBtOnDisable_caller == nil) {
        our_BarcodeChainway_setDisconnectBtOnDisable_caller = [[rb_BarcodeChainway_setDisconnectBtOnDisable_caller alloc] init];
    }
    return our_BarcodeChainway_setDisconnectBtOnDisable_caller;
}

-(void) command_setDisconnectBtOnDisable:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDisconnectBtOnDisable:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDisconnectBtOnDisable:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisconnectBtOnDisable_caller getSharedInstance] command_setDisconnectBtOnDisable:caller_params];
}

+(void) setDisconnectBtOnDisable_in_thread:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisconnectBtOnDisable_caller getSharedInstance] performSelectorInBackground:@selector(command_setDisconnectBtOnDisable:) withObject:caller_params];
}

+(void) setDisconnectBtOnDisable_in_UI_thread:(rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisconnectBtOnDisable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDisconnectBtOnDisable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDisconnectBtOnDisable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::disconnectBtOnDisable="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDisconnectBtOnDisable_caller setDisconnectBtOnDisable_in_thread:[rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDisconnectBtOnDisable_caller setDisconnectBtOnDisable:[rb_BarcodeChainway_setDisconnectBtOnDisable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDisconnectBtOnDisable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDisconnectBtOnDisable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDisconnectBtOnDisable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDisconnectBtOnDisable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params* par = [[[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller : NSObject {

}
+(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller*) getSharedInstance;
+(void) getDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;
+(void) getDisplayBtAddressBarcodeOnEnable_in_thread:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;
+(void) getDisplayBtAddressBarcodeOnEnable_in_UI_thread:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller* our_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller = nil;

@implementation rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller

+(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller == nil) {
        our_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller = [[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller alloc] init];
    }
    return our_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller;
}

-(void) command_getDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDisplayBtAddressBarcodeOnEnable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] command_getDisplayBtAddressBarcodeOnEnable:caller_params];
}

+(void) getDisplayBtAddressBarcodeOnEnable_in_thread:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_getDisplayBtAddressBarcodeOnEnable:) withObject:caller_params];
}

+(void) getDisplayBtAddressBarcodeOnEnable_in_UI_thread:(rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDisplayBtAddressBarcodeOnEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::displayBtAddressBarcodeOnEnable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller getDisplayBtAddressBarcodeOnEnable_in_thread:[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller getDisplayBtAddressBarcodeOnEnable:[rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDisplayBtAddressBarcodeOnEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDisplayBtAddressBarcodeOnEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params* par = [[[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller : NSObject {

}
+(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller*) getSharedInstance;
+(void) setDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;
+(void) setDisplayBtAddressBarcodeOnEnable_in_thread:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;
+(void) setDisplayBtAddressBarcodeOnEnable_in_UI_thread:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller* our_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller = nil;

@implementation rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller

+(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller == nil) {
        our_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller = [[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller alloc] init];
    }
    return our_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller;
}

-(void) command_setDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDisplayBtAddressBarcodeOnEnable:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDisplayBtAddressBarcodeOnEnable:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] command_setDisplayBtAddressBarcodeOnEnable:caller_params];
}

+(void) setDisplayBtAddressBarcodeOnEnable_in_thread:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_setDisplayBtAddressBarcodeOnEnable:) withObject:caller_params];
}

+(void) setDisplayBtAddressBarcodeOnEnable_in_UI_thread:(rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDisplayBtAddressBarcodeOnEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::displayBtAddressBarcodeOnEnable="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller setDisplayBtAddressBarcodeOnEnable_in_thread:[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller setDisplayBtAddressBarcodeOnEnable:[rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDisplayBtAddressBarcodeOnEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDisplayBtAddressBarcodeOnEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getEnableTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getEnableTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getEnableTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getEnableTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getEnableTimeout_caller_params* par = [[[rb_BarcodeChainway_getEnableTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getEnableTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_getEnableTimeout_caller*) getSharedInstance;
+(void) getEnableTimeout:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params;
+(void) getEnableTimeout_in_thread:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params;
+(void) getEnableTimeout_in_UI_thread:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getEnableTimeout_caller* our_BarcodeChainway_getEnableTimeout_caller = nil;

@implementation rb_BarcodeChainway_getEnableTimeout_caller

+(rb_BarcodeChainway_getEnableTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_getEnableTimeout_caller == nil) {
        our_BarcodeChainway_getEnableTimeout_caller = [[rb_BarcodeChainway_getEnableTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_getEnableTimeout_caller;
}

-(void) command_getEnableTimeout:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getEnableTimeout:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getEnableTimeout:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEnableTimeout_caller getSharedInstance] command_getEnableTimeout:caller_params];
}

+(void) getEnableTimeout_in_thread:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEnableTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_getEnableTimeout:) withObject:caller_params];
}

+(void) getEnableTimeout_in_UI_thread:(rb_BarcodeChainway_getEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEnableTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getEnableTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getEnableTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::enableTimeout"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getEnableTimeout_caller getEnableTimeout_in_thread:[rb_BarcodeChainway_getEnableTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getEnableTimeout_caller getEnableTimeout:[rb_BarcodeChainway_getEnableTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getEnableTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getEnableTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getEnableTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getEnableTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setEnableTimeout_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setEnableTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setEnableTimeout_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setEnableTimeout_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setEnableTimeout_caller_params* par = [[[rb_BarcodeChainway_setEnableTimeout_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setEnableTimeout_caller : NSObject {

}
+(rb_BarcodeChainway_setEnableTimeout_caller*) getSharedInstance;
+(void) setEnableTimeout:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params;
+(void) setEnableTimeout_in_thread:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params;
+(void) setEnableTimeout_in_UI_thread:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setEnableTimeout_caller* our_BarcodeChainway_setEnableTimeout_caller = nil;

@implementation rb_BarcodeChainway_setEnableTimeout_caller

+(rb_BarcodeChainway_setEnableTimeout_caller*) getSharedInstance {
    if (our_BarcodeChainway_setEnableTimeout_caller == nil) {
        our_BarcodeChainway_setEnableTimeout_caller = [[rb_BarcodeChainway_setEnableTimeout_caller alloc] init];
    }
    return our_BarcodeChainway_setEnableTimeout_caller;
}

-(void) command_setEnableTimeout:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setEnableTimeout:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setEnableTimeout:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEnableTimeout_caller getSharedInstance] command_setEnableTimeout:caller_params];
}

+(void) setEnableTimeout_in_thread:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEnableTimeout_caller getSharedInstance] performSelectorInBackground:@selector(command_setEnableTimeout:) withObject:caller_params];
}

+(void) setEnableTimeout_in_UI_thread:(rb_BarcodeChainway_setEnableTimeout_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEnableTimeout_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setEnableTimeout:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setEnableTimeout_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::enableTimeout="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setEnableTimeout_caller setEnableTimeout_in_thread:[rb_BarcodeChainway_setEnableTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setEnableTimeout_caller setEnableTimeout:[rb_BarcodeChainway_setEnableTimeout_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setEnableTimeout(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setEnableTimeout_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setEnableTimeout(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setEnableTimeout_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getFriendlyName_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getFriendlyName_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getFriendlyName_caller_params* par = [[[rb_BarcodeChainway_getFriendlyName_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getFriendlyName_caller : NSObject {

}
+(rb_BarcodeChainway_getFriendlyName_caller*) getSharedInstance;
+(void) getFriendlyName:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params;
+(void) getFriendlyName_in_thread:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params;
+(void) getFriendlyName_in_UI_thread:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getFriendlyName_caller* our_BarcodeChainway_getFriendlyName_caller = nil;

@implementation rb_BarcodeChainway_getFriendlyName_caller

+(rb_BarcodeChainway_getFriendlyName_caller*) getSharedInstance {
    if (our_BarcodeChainway_getFriendlyName_caller == nil) {
        our_BarcodeChainway_getFriendlyName_caller = [[rb_BarcodeChainway_getFriendlyName_caller alloc] init];
    }
    return our_BarcodeChainway_getFriendlyName_caller;
}

-(void) command_getFriendlyName:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getFriendlyName:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getFriendlyName:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFriendlyName_caller getSharedInstance] command_getFriendlyName:caller_params];
}

+(void) getFriendlyName_in_thread:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFriendlyName_caller getSharedInstance] performSelectorInBackground:@selector(command_getFriendlyName:) withObject:caller_params];
}

+(void) getFriendlyName_in_UI_thread:(rb_BarcodeChainway_getFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getFriendlyName_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getFriendlyName:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getFriendlyName_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::friendlyName"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getFriendlyName_caller getFriendlyName_in_thread:[rb_BarcodeChainway_getFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getFriendlyName_caller getFriendlyName:[rb_BarcodeChainway_getFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getFriendlyName(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getFriendlyName_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getFriendlyName(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getFriendlyName_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getLcdMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getLcdMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getLcdMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getLcdMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getLcdMode_caller_params* par = [[[rb_BarcodeChainway_getLcdMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getLcdMode_caller : NSObject {

}
+(rb_BarcodeChainway_getLcdMode_caller*) getSharedInstance;
+(void) getLcdMode:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params;
+(void) getLcdMode_in_thread:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params;
+(void) getLcdMode_in_UI_thread:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getLcdMode_caller* our_BarcodeChainway_getLcdMode_caller = nil;

@implementation rb_BarcodeChainway_getLcdMode_caller

+(rb_BarcodeChainway_getLcdMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getLcdMode_caller == nil) {
        our_BarcodeChainway_getLcdMode_caller = [[rb_BarcodeChainway_getLcdMode_caller alloc] init];
    }
    return our_BarcodeChainway_getLcdMode_caller;
}

-(void) command_getLcdMode:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getLcdMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getLcdMode:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLcdMode_caller getSharedInstance] command_getLcdMode:caller_params];
}

+(void) getLcdMode_in_thread:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLcdMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getLcdMode:) withObject:caller_params];
}

+(void) getLcdMode_in_UI_thread:(rb_BarcodeChainway_getLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLcdMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getLcdMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getLcdMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::lcdMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getLcdMode_caller getLcdMode_in_thread:[rb_BarcodeChainway_getLcdMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getLcdMode_caller getLcdMode:[rb_BarcodeChainway_getLcdMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getLcdMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getLcdMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getLcdMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getLcdMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setLcdMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setLcdMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setLcdMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setLcdMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setLcdMode_caller_params* par = [[[rb_BarcodeChainway_setLcdMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setLcdMode_caller : NSObject {

}
+(rb_BarcodeChainway_setLcdMode_caller*) getSharedInstance;
+(void) setLcdMode:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params;
+(void) setLcdMode_in_thread:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params;
+(void) setLcdMode_in_UI_thread:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setLcdMode_caller* our_BarcodeChainway_setLcdMode_caller = nil;

@implementation rb_BarcodeChainway_setLcdMode_caller

+(rb_BarcodeChainway_setLcdMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setLcdMode_caller == nil) {
        our_BarcodeChainway_setLcdMode_caller = [[rb_BarcodeChainway_setLcdMode_caller alloc] init];
    }
    return our_BarcodeChainway_setLcdMode_caller;
}

-(void) command_setLcdMode:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setLcdMode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setLcdMode:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLcdMode_caller getSharedInstance] command_setLcdMode:caller_params];
}

+(void) setLcdMode_in_thread:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLcdMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setLcdMode:) withObject:caller_params];
}

+(void) setLcdMode_in_UI_thread:(rb_BarcodeChainway_setLcdMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLcdMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setLcdMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setLcdMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::lcdMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithBool:NO];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setLcdMode_caller setLcdMode_in_thread:[rb_BarcodeChainway_setLcdMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setLcdMode_caller setLcdMode:[rb_BarcodeChainway_setLcdMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setLcdMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setLcdMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setLcdMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setLcdMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getLowBatteryScan_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getLowBatteryScan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getLowBatteryScan_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getLowBatteryScan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getLowBatteryScan_caller_params* par = [[[rb_BarcodeChainway_getLowBatteryScan_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getLowBatteryScan_caller : NSObject {

}
+(rb_BarcodeChainway_getLowBatteryScan_caller*) getSharedInstance;
+(void) getLowBatteryScan:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params;
+(void) getLowBatteryScan_in_thread:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params;
+(void) getLowBatteryScan_in_UI_thread:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getLowBatteryScan_caller* our_BarcodeChainway_getLowBatteryScan_caller = nil;

@implementation rb_BarcodeChainway_getLowBatteryScan_caller

+(rb_BarcodeChainway_getLowBatteryScan_caller*) getSharedInstance {
    if (our_BarcodeChainway_getLowBatteryScan_caller == nil) {
        our_BarcodeChainway_getLowBatteryScan_caller = [[rb_BarcodeChainway_getLowBatteryScan_caller alloc] init];
    }
    return our_BarcodeChainway_getLowBatteryScan_caller;
}

-(void) command_getLowBatteryScan:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getLowBatteryScan:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getLowBatteryScan:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLowBatteryScan_caller getSharedInstance] command_getLowBatteryScan:caller_params];
}

+(void) getLowBatteryScan_in_thread:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLowBatteryScan_caller getSharedInstance] performSelectorInBackground:@selector(command_getLowBatteryScan:) withObject:caller_params];
}

+(void) getLowBatteryScan_in_UI_thread:(rb_BarcodeChainway_getLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getLowBatteryScan_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getLowBatteryScan:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getLowBatteryScan_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::lowBatteryScan"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getLowBatteryScan_caller getLowBatteryScan_in_thread:[rb_BarcodeChainway_getLowBatteryScan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getLowBatteryScan_caller getLowBatteryScan:[rb_BarcodeChainway_getLowBatteryScan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getLowBatteryScan(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getLowBatteryScan_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getLowBatteryScan(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getLowBatteryScan_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setLowBatteryScan_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setLowBatteryScan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setLowBatteryScan_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setLowBatteryScan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setLowBatteryScan_caller_params* par = [[[rb_BarcodeChainway_setLowBatteryScan_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setLowBatteryScan_caller : NSObject {

}
+(rb_BarcodeChainway_setLowBatteryScan_caller*) getSharedInstance;
+(void) setLowBatteryScan:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params;
+(void) setLowBatteryScan_in_thread:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params;
+(void) setLowBatteryScan_in_UI_thread:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setLowBatteryScan_caller* our_BarcodeChainway_setLowBatteryScan_caller = nil;

@implementation rb_BarcodeChainway_setLowBatteryScan_caller

+(rb_BarcodeChainway_setLowBatteryScan_caller*) getSharedInstance {
    if (our_BarcodeChainway_setLowBatteryScan_caller == nil) {
        our_BarcodeChainway_setLowBatteryScan_caller = [[rb_BarcodeChainway_setLowBatteryScan_caller alloc] init];
    }
    return our_BarcodeChainway_setLowBatteryScan_caller;
}

-(void) command_setLowBatteryScan:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setLowBatteryScan:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setLowBatteryScan:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLowBatteryScan_caller getSharedInstance] command_setLowBatteryScan:caller_params];
}

+(void) setLowBatteryScan_in_thread:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLowBatteryScan_caller getSharedInstance] performSelectorInBackground:@selector(command_setLowBatteryScan:) withObject:caller_params];
}

+(void) setLowBatteryScan_in_UI_thread:(rb_BarcodeChainway_setLowBatteryScan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setLowBatteryScan_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setLowBatteryScan:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setLowBatteryScan_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::lowBatteryScan="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithBool:NO];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setLowBatteryScan_caller setLowBatteryScan_in_thread:[rb_BarcodeChainway_setLowBatteryScan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setLowBatteryScan_caller setLowBatteryScan:[rb_BarcodeChainway_setLowBatteryScan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setLowBatteryScan(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setLowBatteryScan_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setLowBatteryScan(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setLowBatteryScan_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getTriggerConnected_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getTriggerConnected_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getTriggerConnected_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getTriggerConnected_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getTriggerConnected_caller_params* par = [[[rb_BarcodeChainway_getTriggerConnected_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getTriggerConnected_caller : NSObject {

}
+(rb_BarcodeChainway_getTriggerConnected_caller*) getSharedInstance;
+(void) getTriggerConnected:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params;
+(void) getTriggerConnected_in_thread:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params;
+(void) getTriggerConnected_in_UI_thread:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getTriggerConnected_caller* our_BarcodeChainway_getTriggerConnected_caller = nil;

@implementation rb_BarcodeChainway_getTriggerConnected_caller

+(rb_BarcodeChainway_getTriggerConnected_caller*) getSharedInstance {
    if (our_BarcodeChainway_getTriggerConnected_caller == nil) {
        our_BarcodeChainway_getTriggerConnected_caller = [[rb_BarcodeChainway_getTriggerConnected_caller alloc] init];
    }
    return our_BarcodeChainway_getTriggerConnected_caller;
}

-(void) command_getTriggerConnected:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getTriggerConnected:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getTriggerConnected:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTriggerConnected_caller getSharedInstance] command_getTriggerConnected:caller_params];
}

+(void) getTriggerConnected_in_thread:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTriggerConnected_caller getSharedInstance] performSelectorInBackground:@selector(command_getTriggerConnected:) withObject:caller_params];
}

+(void) getTriggerConnected_in_UI_thread:(rb_BarcodeChainway_getTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTriggerConnected_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getTriggerConnected:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getTriggerConnected_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::triggerConnected"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getTriggerConnected_caller getTriggerConnected_in_thread:[rb_BarcodeChainway_getTriggerConnected_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getTriggerConnected_caller getTriggerConnected:[rb_BarcodeChainway_getTriggerConnected_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getTriggerConnected(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getTriggerConnected_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getTriggerConnected(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getTriggerConnected_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setTriggerConnected_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setTriggerConnected_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setTriggerConnected_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setTriggerConnected_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setTriggerConnected_caller_params* par = [[[rb_BarcodeChainway_setTriggerConnected_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setTriggerConnected_caller : NSObject {

}
+(rb_BarcodeChainway_setTriggerConnected_caller*) getSharedInstance;
+(void) setTriggerConnected:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params;
+(void) setTriggerConnected_in_thread:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params;
+(void) setTriggerConnected_in_UI_thread:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setTriggerConnected_caller* our_BarcodeChainway_setTriggerConnected_caller = nil;

@implementation rb_BarcodeChainway_setTriggerConnected_caller

+(rb_BarcodeChainway_setTriggerConnected_caller*) getSharedInstance {
    if (our_BarcodeChainway_setTriggerConnected_caller == nil) {
        our_BarcodeChainway_setTriggerConnected_caller = [[rb_BarcodeChainway_setTriggerConnected_caller alloc] init];
    }
    return our_BarcodeChainway_setTriggerConnected_caller;
}

-(void) command_setTriggerConnected:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setTriggerConnected:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setTriggerConnected:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTriggerConnected_caller getSharedInstance] command_setTriggerConnected:caller_params];
}

+(void) setTriggerConnected_in_thread:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTriggerConnected_caller getSharedInstance] performSelectorInBackground:@selector(command_setTriggerConnected:) withObject:caller_params];
}

+(void) setTriggerConnected_in_UI_thread:(rb_BarcodeChainway_setTriggerConnected_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTriggerConnected_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setTriggerConnected:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setTriggerConnected_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::triggerConnected="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithBool:YES];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setTriggerConnected_caller setTriggerConnected_in_thread:[rb_BarcodeChainway_setTriggerConnected_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setTriggerConnected_caller setTriggerConnected:[rb_BarcodeChainway_setTriggerConnected_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setTriggerConnected(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setTriggerConnected_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setTriggerConnected(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setTriggerConnected_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params* par = [[[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDisableScannerDuringNavigate_caller : NSObject {

}
+(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller*) getSharedInstance;
+(void) getDisableScannerDuringNavigate:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params;
+(void) getDisableScannerDuringNavigate_in_thread:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params;
+(void) getDisableScannerDuringNavigate_in_UI_thread:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDisableScannerDuringNavigate_caller* our_BarcodeChainway_getDisableScannerDuringNavigate_caller = nil;

@implementation rb_BarcodeChainway_getDisableScannerDuringNavigate_caller

+(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDisableScannerDuringNavigate_caller == nil) {
        our_BarcodeChainway_getDisableScannerDuringNavigate_caller = [[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller alloc] init];
    }
    return our_BarcodeChainway_getDisableScannerDuringNavigate_caller;
}

-(void) command_getDisableScannerDuringNavigate:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDisableScannerDuringNavigate:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDisableScannerDuringNavigate:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller getSharedInstance] command_getDisableScannerDuringNavigate:caller_params];
}

+(void) getDisableScannerDuringNavigate_in_thread:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller getSharedInstance] performSelectorInBackground:@selector(command_getDisableScannerDuringNavigate:) withObject:caller_params];
}

+(void) getDisableScannerDuringNavigate_in_UI_thread:(rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDisableScannerDuringNavigate:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDisableScannerDuringNavigate_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::disableScannerDuringNavigate"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDisableScannerDuringNavigate_caller getDisableScannerDuringNavigate_in_thread:[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDisableScannerDuringNavigate_caller getDisableScannerDuringNavigate:[rb_BarcodeChainway_getDisableScannerDuringNavigate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDisableScannerDuringNavigate(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDisableScannerDuringNavigate_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDisableScannerDuringNavigate(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDisableScannerDuringNavigate_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params* par = [[[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDisableScannerDuringNavigate_caller : NSObject {

}
+(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller*) getSharedInstance;
+(void) setDisableScannerDuringNavigate:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params;
+(void) setDisableScannerDuringNavigate_in_thread:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params;
+(void) setDisableScannerDuringNavigate_in_UI_thread:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDisableScannerDuringNavigate_caller* our_BarcodeChainway_setDisableScannerDuringNavigate_caller = nil;

@implementation rb_BarcodeChainway_setDisableScannerDuringNavigate_caller

+(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDisableScannerDuringNavigate_caller == nil) {
        our_BarcodeChainway_setDisableScannerDuringNavigate_caller = [[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller alloc] init];
    }
    return our_BarcodeChainway_setDisableScannerDuringNavigate_caller;
}

-(void) command_setDisableScannerDuringNavigate:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDisableScannerDuringNavigate:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDisableScannerDuringNavigate:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller getSharedInstance] command_setDisableScannerDuringNavigate:caller_params];
}

+(void) setDisableScannerDuringNavigate_in_thread:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller getSharedInstance] performSelectorInBackground:@selector(command_setDisableScannerDuringNavigate:) withObject:caller_params];
}

+(void) setDisableScannerDuringNavigate_in_UI_thread:(rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDisableScannerDuringNavigate:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDisableScannerDuringNavigate_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::disableScannerDuringNavigate="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithBool:YES];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDisableScannerDuringNavigate_caller setDisableScannerDuringNavigate_in_thread:[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDisableScannerDuringNavigate_caller setDisableScannerDuringNavigate:[rb_BarcodeChainway_setDisableScannerDuringNavigate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDisableScannerDuringNavigate(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDisableScannerDuringNavigate_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDisableScannerDuringNavigate(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDisableScannerDuringNavigate_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDecodeVolume_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDecodeVolume_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDecodeVolume_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDecodeVolume_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDecodeVolume_caller_params* par = [[[rb_BarcodeChainway_getDecodeVolume_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDecodeVolume_caller : NSObject {

}
+(rb_BarcodeChainway_getDecodeVolume_caller*) getSharedInstance;
+(void) getDecodeVolume:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params;
+(void) getDecodeVolume_in_thread:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params;
+(void) getDecodeVolume_in_UI_thread:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDecodeVolume_caller* our_BarcodeChainway_getDecodeVolume_caller = nil;

@implementation rb_BarcodeChainway_getDecodeVolume_caller

+(rb_BarcodeChainway_getDecodeVolume_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDecodeVolume_caller == nil) {
        our_BarcodeChainway_getDecodeVolume_caller = [[rb_BarcodeChainway_getDecodeVolume_caller alloc] init];
    }
    return our_BarcodeChainway_getDecodeVolume_caller;
}

-(void) command_getDecodeVolume:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDecodeVolume:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDecodeVolume:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeVolume_caller getSharedInstance] command_getDecodeVolume:caller_params];
}

+(void) getDecodeVolume_in_thread:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeVolume_caller getSharedInstance] performSelectorInBackground:@selector(command_getDecodeVolume:) withObject:caller_params];
}

+(void) getDecodeVolume_in_UI_thread:(rb_BarcodeChainway_getDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeVolume_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDecodeVolume:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDecodeVolume_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeVolume"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDecodeVolume_caller getDecodeVolume_in_thread:[rb_BarcodeChainway_getDecodeVolume_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDecodeVolume_caller getDecodeVolume:[rb_BarcodeChainway_getDecodeVolume_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDecodeVolume(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDecodeVolume_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDecodeVolume(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDecodeVolume_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDecodeVolume_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDecodeVolume_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDecodeVolume_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDecodeVolume_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDecodeVolume_caller_params* par = [[[rb_BarcodeChainway_setDecodeVolume_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDecodeVolume_caller : NSObject {

}
+(rb_BarcodeChainway_setDecodeVolume_caller*) getSharedInstance;
+(void) setDecodeVolume:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params;
+(void) setDecodeVolume_in_thread:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params;
+(void) setDecodeVolume_in_UI_thread:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDecodeVolume_caller* our_BarcodeChainway_setDecodeVolume_caller = nil;

@implementation rb_BarcodeChainway_setDecodeVolume_caller

+(rb_BarcodeChainway_setDecodeVolume_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDecodeVolume_caller == nil) {
        our_BarcodeChainway_setDecodeVolume_caller = [[rb_BarcodeChainway_setDecodeVolume_caller alloc] init];
    }
    return our_BarcodeChainway_setDecodeVolume_caller;
}

-(void) command_setDecodeVolume:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDecodeVolume:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDecodeVolume:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeVolume_caller getSharedInstance] command_setDecodeVolume:caller_params];
}

+(void) setDecodeVolume_in_thread:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeVolume_caller getSharedInstance] performSelectorInBackground:@selector(command_setDecodeVolume:) withObject:caller_params];
}

+(void) setDecodeVolume_in_UI_thread:(rb_BarcodeChainway_setDecodeVolume_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeVolume_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDecodeVolume:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDecodeVolume_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeVolume="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithInt:5];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDecodeVolume_caller setDecodeVolume_in_thread:[rb_BarcodeChainway_setDecodeVolume_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDecodeVolume_caller setDecodeVolume:[rb_BarcodeChainway_setDecodeVolume_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDecodeVolume(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDecodeVolume_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDecodeVolume(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDecodeVolume_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDecodeDuration_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDecodeDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDecodeDuration_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDecodeDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDecodeDuration_caller_params* par = [[[rb_BarcodeChainway_getDecodeDuration_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDecodeDuration_caller : NSObject {

}
+(rb_BarcodeChainway_getDecodeDuration_caller*) getSharedInstance;
+(void) getDecodeDuration:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params;
+(void) getDecodeDuration_in_thread:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params;
+(void) getDecodeDuration_in_UI_thread:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDecodeDuration_caller* our_BarcodeChainway_getDecodeDuration_caller = nil;

@implementation rb_BarcodeChainway_getDecodeDuration_caller

+(rb_BarcodeChainway_getDecodeDuration_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDecodeDuration_caller == nil) {
        our_BarcodeChainway_getDecodeDuration_caller = [[rb_BarcodeChainway_getDecodeDuration_caller alloc] init];
    }
    return our_BarcodeChainway_getDecodeDuration_caller;
}

-(void) command_getDecodeDuration:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDecodeDuration:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDecodeDuration:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeDuration_caller getSharedInstance] command_getDecodeDuration:caller_params];
}

+(void) getDecodeDuration_in_thread:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeDuration_caller getSharedInstance] performSelectorInBackground:@selector(command_getDecodeDuration:) withObject:caller_params];
}

+(void) getDecodeDuration_in_UI_thread:(rb_BarcodeChainway_getDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeDuration_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDecodeDuration:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDecodeDuration_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeDuration"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDecodeDuration_caller getDecodeDuration_in_thread:[rb_BarcodeChainway_getDecodeDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDecodeDuration_caller getDecodeDuration:[rb_BarcodeChainway_getDecodeDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDecodeDuration(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDecodeDuration_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDecodeDuration(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDecodeDuration_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDecodeDuration_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDecodeDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDecodeDuration_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDecodeDuration_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDecodeDuration_caller_params* par = [[[rb_BarcodeChainway_setDecodeDuration_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDecodeDuration_caller : NSObject {

}
+(rb_BarcodeChainway_setDecodeDuration_caller*) getSharedInstance;
+(void) setDecodeDuration:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params;
+(void) setDecodeDuration_in_thread:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params;
+(void) setDecodeDuration_in_UI_thread:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDecodeDuration_caller* our_BarcodeChainway_setDecodeDuration_caller = nil;

@implementation rb_BarcodeChainway_setDecodeDuration_caller

+(rb_BarcodeChainway_setDecodeDuration_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDecodeDuration_caller == nil) {
        our_BarcodeChainway_setDecodeDuration_caller = [[rb_BarcodeChainway_setDecodeDuration_caller alloc] init];
    }
    return our_BarcodeChainway_setDecodeDuration_caller;
}

-(void) command_setDecodeDuration:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDecodeDuration:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDecodeDuration:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeDuration_caller getSharedInstance] command_setDecodeDuration:caller_params];
}

+(void) setDecodeDuration_in_thread:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeDuration_caller getSharedInstance] performSelectorInBackground:@selector(command_setDecodeDuration:) withObject:caller_params];
}

+(void) setDecodeDuration_in_UI_thread:(rb_BarcodeChainway_setDecodeDuration_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeDuration_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDecodeDuration:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDecodeDuration_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeDuration="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithInt:250];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDecodeDuration_caller setDecodeDuration_in_thread:[rb_BarcodeChainway_setDecodeDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDecodeDuration_caller setDecodeDuration:[rb_BarcodeChainway_setDecodeDuration_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDecodeDuration(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDecodeDuration_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDecodeDuration(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDecodeDuration_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDecodeFrequency_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDecodeFrequency_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDecodeFrequency_caller_params* par = [[[rb_BarcodeChainway_getDecodeFrequency_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDecodeFrequency_caller : NSObject {

}
+(rb_BarcodeChainway_getDecodeFrequency_caller*) getSharedInstance;
+(void) getDecodeFrequency:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params;
+(void) getDecodeFrequency_in_thread:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params;
+(void) getDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDecodeFrequency_caller* our_BarcodeChainway_getDecodeFrequency_caller = nil;

@implementation rb_BarcodeChainway_getDecodeFrequency_caller

+(rb_BarcodeChainway_getDecodeFrequency_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDecodeFrequency_caller == nil) {
        our_BarcodeChainway_getDecodeFrequency_caller = [[rb_BarcodeChainway_getDecodeFrequency_caller alloc] init];
    }
    return our_BarcodeChainway_getDecodeFrequency_caller;
}

-(void) command_getDecodeFrequency:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDecodeFrequency:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDecodeFrequency:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeFrequency_caller getSharedInstance] command_getDecodeFrequency:caller_params];
}

+(void) getDecodeFrequency_in_thread:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeFrequency_caller getSharedInstance] performSelectorInBackground:@selector(command_getDecodeFrequency:) withObject:caller_params];
}

+(void) getDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_getDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeFrequency_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDecodeFrequency:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDecodeFrequency_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeFrequency"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDecodeFrequency_caller getDecodeFrequency_in_thread:[rb_BarcodeChainway_getDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDecodeFrequency_caller getDecodeFrequency:[rb_BarcodeChainway_getDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDecodeFrequency(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDecodeFrequency_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDecodeFrequency(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDecodeFrequency_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDecodeFrequency_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDecodeFrequency_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDecodeFrequency_caller_params* par = [[[rb_BarcodeChainway_setDecodeFrequency_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDecodeFrequency_caller : NSObject {

}
+(rb_BarcodeChainway_setDecodeFrequency_caller*) getSharedInstance;
+(void) setDecodeFrequency:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params;
+(void) setDecodeFrequency_in_thread:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params;
+(void) setDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDecodeFrequency_caller* our_BarcodeChainway_setDecodeFrequency_caller = nil;

@implementation rb_BarcodeChainway_setDecodeFrequency_caller

+(rb_BarcodeChainway_setDecodeFrequency_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDecodeFrequency_caller == nil) {
        our_BarcodeChainway_setDecodeFrequency_caller = [[rb_BarcodeChainway_setDecodeFrequency_caller alloc] init];
    }
    return our_BarcodeChainway_setDecodeFrequency_caller;
}

-(void) command_setDecodeFrequency:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDecodeFrequency:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDecodeFrequency:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeFrequency_caller getSharedInstance] command_setDecodeFrequency:caller_params];
}

+(void) setDecodeFrequency_in_thread:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeFrequency_caller getSharedInstance] performSelectorInBackground:@selector(command_setDecodeFrequency:) withObject:caller_params];
}

+(void) setDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_setDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeFrequency_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDecodeFrequency:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDecodeFrequency_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeFrequency="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithInt:3000];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDecodeFrequency_caller setDecodeFrequency_in_thread:[rb_BarcodeChainway_setDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDecodeFrequency_caller setDecodeFrequency:[rb_BarcodeChainway_setDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDecodeFrequency(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDecodeFrequency_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDecodeFrequency(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDecodeFrequency_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params* par = [[[rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getInvalidDecodeFrequency_caller : NSObject {

}
+(rb_BarcodeChainway_getInvalidDecodeFrequency_caller*) getSharedInstance;
+(void) getInvalidDecodeFrequency:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params;
+(void) getInvalidDecodeFrequency_in_thread:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params;
+(void) getInvalidDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getInvalidDecodeFrequency_caller* our_BarcodeChainway_getInvalidDecodeFrequency_caller = nil;

@implementation rb_BarcodeChainway_getInvalidDecodeFrequency_caller

+(rb_BarcodeChainway_getInvalidDecodeFrequency_caller*) getSharedInstance {
    if (our_BarcodeChainway_getInvalidDecodeFrequency_caller == nil) {
        our_BarcodeChainway_getInvalidDecodeFrequency_caller = [[rb_BarcodeChainway_getInvalidDecodeFrequency_caller alloc] init];
    }
    return our_BarcodeChainway_getInvalidDecodeFrequency_caller;
}

-(void) command_getInvalidDecodeFrequency:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getInvalidDecodeFrequency:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getInvalidDecodeFrequency:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeFrequency_caller getSharedInstance] command_getInvalidDecodeFrequency:caller_params];
}

+(void) getInvalidDecodeFrequency_in_thread:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeFrequency_caller getSharedInstance] performSelectorInBackground:@selector(command_getInvalidDecodeFrequency:) withObject:caller_params];
}

+(void) getInvalidDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeFrequency_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getInvalidDecodeFrequency:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getInvalidDecodeFrequency_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::invalidDecodeFrequency"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getInvalidDecodeFrequency_caller getInvalidDecodeFrequency_in_thread:[rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getInvalidDecodeFrequency_caller getInvalidDecodeFrequency:[rb_BarcodeChainway_getInvalidDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getInvalidDecodeFrequency(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getInvalidDecodeFrequency_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getInvalidDecodeFrequency(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getInvalidDecodeFrequency_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params* par = [[[rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setInvalidDecodeFrequency_caller : NSObject {

}
+(rb_BarcodeChainway_setInvalidDecodeFrequency_caller*) getSharedInstance;
+(void) setInvalidDecodeFrequency:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params;
+(void) setInvalidDecodeFrequency_in_thread:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params;
+(void) setInvalidDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setInvalidDecodeFrequency_caller* our_BarcodeChainway_setInvalidDecodeFrequency_caller = nil;

@implementation rb_BarcodeChainway_setInvalidDecodeFrequency_caller

+(rb_BarcodeChainway_setInvalidDecodeFrequency_caller*) getSharedInstance {
    if (our_BarcodeChainway_setInvalidDecodeFrequency_caller == nil) {
        our_BarcodeChainway_setInvalidDecodeFrequency_caller = [[rb_BarcodeChainway_setInvalidDecodeFrequency_caller alloc] init];
    }
    return our_BarcodeChainway_setInvalidDecodeFrequency_caller;
}

-(void) command_setInvalidDecodeFrequency:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setInvalidDecodeFrequency:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setInvalidDecodeFrequency:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeFrequency_caller getSharedInstance] command_setInvalidDecodeFrequency:caller_params];
}

+(void) setInvalidDecodeFrequency_in_thread:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeFrequency_caller getSharedInstance] performSelectorInBackground:@selector(command_setInvalidDecodeFrequency:) withObject:caller_params];
}

+(void) setInvalidDecodeFrequency_in_UI_thread:(rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeFrequency_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setInvalidDecodeFrequency:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setInvalidDecodeFrequency_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::invalidDecodeFrequency="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    
                params[0]= [NSNumber numberWithInt:2500];

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setInvalidDecodeFrequency_caller setInvalidDecodeFrequency_in_thread:[rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setInvalidDecodeFrequency_caller setInvalidDecodeFrequency:[rb_BarcodeChainway_setInvalidDecodeFrequency_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setInvalidDecodeFrequency(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setInvalidDecodeFrequency_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setInvalidDecodeFrequency(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setInvalidDecodeFrequency_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDecodeSound_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDecodeSound_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDecodeSound_caller_params* par = [[[rb_BarcodeChainway_getDecodeSound_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDecodeSound_caller : NSObject {

}
+(rb_BarcodeChainway_getDecodeSound_caller*) getSharedInstance;
+(void) getDecodeSound:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params;
+(void) getDecodeSound_in_thread:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params;
+(void) getDecodeSound_in_UI_thread:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDecodeSound_caller* our_BarcodeChainway_getDecodeSound_caller = nil;

@implementation rb_BarcodeChainway_getDecodeSound_caller

+(rb_BarcodeChainway_getDecodeSound_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDecodeSound_caller == nil) {
        our_BarcodeChainway_getDecodeSound_caller = [[rb_BarcodeChainway_getDecodeSound_caller alloc] init];
    }
    return our_BarcodeChainway_getDecodeSound_caller;
}

-(void) command_getDecodeSound:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDecodeSound:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDecodeSound:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeSound_caller getSharedInstance] command_getDecodeSound:caller_params];
}

+(void) getDecodeSound_in_thread:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeSound_caller getSharedInstance] performSelectorInBackground:@selector(command_getDecodeSound:) withObject:caller_params];
}

+(void) getDecodeSound_in_UI_thread:(rb_BarcodeChainway_getDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDecodeSound_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDecodeSound:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDecodeSound_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeSound"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDecodeSound_caller getDecodeSound_in_thread:[rb_BarcodeChainway_getDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDecodeSound_caller getDecodeSound:[rb_BarcodeChainway_getDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDecodeSound(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDecodeSound_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDecodeSound(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDecodeSound_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDecodeSound_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDecodeSound_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDecodeSound_caller_params* par = [[[rb_BarcodeChainway_setDecodeSound_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDecodeSound_caller : NSObject {

}
+(rb_BarcodeChainway_setDecodeSound_caller*) getSharedInstance;
+(void) setDecodeSound:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params;
+(void) setDecodeSound_in_thread:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params;
+(void) setDecodeSound_in_UI_thread:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDecodeSound_caller* our_BarcodeChainway_setDecodeSound_caller = nil;

@implementation rb_BarcodeChainway_setDecodeSound_caller

+(rb_BarcodeChainway_setDecodeSound_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDecodeSound_caller == nil) {
        our_BarcodeChainway_setDecodeSound_caller = [[rb_BarcodeChainway_setDecodeSound_caller alloc] init];
    }
    return our_BarcodeChainway_setDecodeSound_caller;
}

-(void) command_setDecodeSound:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDecodeSound:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDecodeSound:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeSound_caller getSharedInstance] command_setDecodeSound:caller_params];
}

+(void) setDecodeSound_in_thread:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeSound_caller getSharedInstance] performSelectorInBackground:@selector(command_setDecodeSound:) withObject:caller_params];
}

+(void) setDecodeSound_in_UI_thread:(rb_BarcodeChainway_setDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDecodeSound_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDecodeSound:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDecodeSound_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::decodeSound="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDecodeSound_caller setDecodeSound_in_thread:[rb_BarcodeChainway_setDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDecodeSound_caller setDecodeSound:[rb_BarcodeChainway_setDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDecodeSound(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDecodeSound_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDecodeSound(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDecodeSound_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getInvalidDecodeSound_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getInvalidDecodeSound_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getInvalidDecodeSound_caller_params* par = [[[rb_BarcodeChainway_getInvalidDecodeSound_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getInvalidDecodeSound_caller : NSObject {

}
+(rb_BarcodeChainway_getInvalidDecodeSound_caller*) getSharedInstance;
+(void) getInvalidDecodeSound:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params;
+(void) getInvalidDecodeSound_in_thread:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params;
+(void) getInvalidDecodeSound_in_UI_thread:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getInvalidDecodeSound_caller* our_BarcodeChainway_getInvalidDecodeSound_caller = nil;

@implementation rb_BarcodeChainway_getInvalidDecodeSound_caller

+(rb_BarcodeChainway_getInvalidDecodeSound_caller*) getSharedInstance {
    if (our_BarcodeChainway_getInvalidDecodeSound_caller == nil) {
        our_BarcodeChainway_getInvalidDecodeSound_caller = [[rb_BarcodeChainway_getInvalidDecodeSound_caller alloc] init];
    }
    return our_BarcodeChainway_getInvalidDecodeSound_caller;
}

-(void) command_getInvalidDecodeSound:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getInvalidDecodeSound:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getInvalidDecodeSound:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeSound_caller getSharedInstance] command_getInvalidDecodeSound:caller_params];
}

+(void) getInvalidDecodeSound_in_thread:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeSound_caller getSharedInstance] performSelectorInBackground:@selector(command_getInvalidDecodeSound:) withObject:caller_params];
}

+(void) getInvalidDecodeSound_in_UI_thread:(rb_BarcodeChainway_getInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_getInvalidDecodeSound_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getInvalidDecodeSound:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getInvalidDecodeSound_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::invalidDecodeSound"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getInvalidDecodeSound_caller getInvalidDecodeSound_in_thread:[rb_BarcodeChainway_getInvalidDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getInvalidDecodeSound_caller getInvalidDecodeSound:[rb_BarcodeChainway_getInvalidDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getInvalidDecodeSound(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getInvalidDecodeSound_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getInvalidDecodeSound(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getInvalidDecodeSound_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setInvalidDecodeSound_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setInvalidDecodeSound_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setInvalidDecodeSound_caller_params* par = [[[rb_BarcodeChainway_setInvalidDecodeSound_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setInvalidDecodeSound_caller : NSObject {

}
+(rb_BarcodeChainway_setInvalidDecodeSound_caller*) getSharedInstance;
+(void) setInvalidDecodeSound:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params;
+(void) setInvalidDecodeSound_in_thread:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params;
+(void) setInvalidDecodeSound_in_UI_thread:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setInvalidDecodeSound_caller* our_BarcodeChainway_setInvalidDecodeSound_caller = nil;

@implementation rb_BarcodeChainway_setInvalidDecodeSound_caller

+(rb_BarcodeChainway_setInvalidDecodeSound_caller*) getSharedInstance {
    if (our_BarcodeChainway_setInvalidDecodeSound_caller == nil) {
        our_BarcodeChainway_setInvalidDecodeSound_caller = [[rb_BarcodeChainway_setInvalidDecodeSound_caller alloc] init];
    }
    return our_BarcodeChainway_setInvalidDecodeSound_caller;
}

-(void) command_setInvalidDecodeSound:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setInvalidDecodeSound:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setInvalidDecodeSound:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeSound_caller getSharedInstance] command_setInvalidDecodeSound:caller_params];
}

+(void) setInvalidDecodeSound_in_thread:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeSound_caller getSharedInstance] performSelectorInBackground:@selector(command_setInvalidDecodeSound:) withObject:caller_params];
}

+(void) setInvalidDecodeSound_in_UI_thread:(rb_BarcodeChainway_setInvalidDecodeSound_caller_params*)caller_params {
    [[rb_BarcodeChainway_setInvalidDecodeSound_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setInvalidDecodeSound:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setInvalidDecodeSound_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::invalidDecodeSound="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setInvalidDecodeSound_caller setInvalidDecodeSound_in_thread:[rb_BarcodeChainway_setInvalidDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setInvalidDecodeSound_caller setInvalidDecodeSound:[rb_BarcodeChainway_setInvalidDecodeSound_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setInvalidDecodeSound(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setInvalidDecodeSound_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setInvalidDecodeSound(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setInvalidDecodeSound_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getScannerType_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getScannerType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getScannerType_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getScannerType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getScannerType_caller_params* par = [[[rb_BarcodeChainway_getScannerType_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getScannerType_caller : NSObject {

}
+(rb_BarcodeChainway_getScannerType_caller*) getSharedInstance;
+(void) getScannerType:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params;
+(void) getScannerType_in_thread:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params;
+(void) getScannerType_in_UI_thread:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getScannerType_caller* our_BarcodeChainway_getScannerType_caller = nil;

@implementation rb_BarcodeChainway_getScannerType_caller

+(rb_BarcodeChainway_getScannerType_caller*) getSharedInstance {
    if (our_BarcodeChainway_getScannerType_caller == nil) {
        our_BarcodeChainway_getScannerType_caller = [[rb_BarcodeChainway_getScannerType_caller alloc] init];
    }
    return our_BarcodeChainway_getScannerType_caller;
}

-(void) command_getScannerType:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getScannerType:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getScannerType:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScannerType_caller getSharedInstance] command_getScannerType:caller_params];
}

+(void) getScannerType_in_thread:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScannerType_caller getSharedInstance] performSelectorInBackground:@selector(command_getScannerType:) withObject:caller_params];
}

+(void) getScannerType_in_UI_thread:(rb_BarcodeChainway_getScannerType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getScannerType_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getScannerType:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getScannerType_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::scannerType"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getScannerType_caller getScannerType_in_thread:[rb_BarcodeChainway_getScannerType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getScannerType_caller getScannerType:[rb_BarcodeChainway_getScannerType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getScannerType(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getScannerType_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getScannerType(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getScannerType_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAllDecoders_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAllDecoders_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAllDecoders_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAllDecoders_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAllDecoders_caller_params* par = [[[rb_BarcodeChainway_getAllDecoders_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAllDecoders_caller : NSObject {

}
+(rb_BarcodeChainway_getAllDecoders_caller*) getSharedInstance;
+(void) getAllDecoders:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params;
+(void) getAllDecoders_in_thread:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params;
+(void) getAllDecoders_in_UI_thread:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAllDecoders_caller* our_BarcodeChainway_getAllDecoders_caller = nil;

@implementation rb_BarcodeChainway_getAllDecoders_caller

+(rb_BarcodeChainway_getAllDecoders_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAllDecoders_caller == nil) {
        our_BarcodeChainway_getAllDecoders_caller = [[rb_BarcodeChainway_getAllDecoders_caller alloc] init];
    }
    return our_BarcodeChainway_getAllDecoders_caller;
}

-(void) command_getAllDecoders:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAllDecoders:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAllDecoders:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllDecoders_caller getSharedInstance] command_getAllDecoders:caller_params];
}

+(void) getAllDecoders_in_thread:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllDecoders_caller getSharedInstance] performSelectorInBackground:@selector(command_getAllDecoders:) withObject:caller_params];
}

+(void) getAllDecoders_in_UI_thread:(rb_BarcodeChainway_getAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllDecoders_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAllDecoders:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAllDecoders_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::allDecoders"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAllDecoders_caller getAllDecoders_in_thread:[rb_BarcodeChainway_getAllDecoders_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAllDecoders_caller getAllDecoders:[rb_BarcodeChainway_getAllDecoders_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAllDecoders(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAllDecoders_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAllDecoders(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAllDecoders_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAllDecoders_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAllDecoders_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAllDecoders_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAllDecoders_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAllDecoders_caller_params* par = [[[rb_BarcodeChainway_setAllDecoders_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAllDecoders_caller : NSObject {

}
+(rb_BarcodeChainway_setAllDecoders_caller*) getSharedInstance;
+(void) setAllDecoders:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params;
+(void) setAllDecoders_in_thread:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params;
+(void) setAllDecoders_in_UI_thread:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAllDecoders_caller* our_BarcodeChainway_setAllDecoders_caller = nil;

@implementation rb_BarcodeChainway_setAllDecoders_caller

+(rb_BarcodeChainway_setAllDecoders_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAllDecoders_caller == nil) {
        our_BarcodeChainway_setAllDecoders_caller = [[rb_BarcodeChainway_setAllDecoders_caller alloc] init];
    }
    return our_BarcodeChainway_setAllDecoders_caller;
}

-(void) command_setAllDecoders:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAllDecoders:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAllDecoders:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAllDecoders_caller getSharedInstance] command_setAllDecoders:caller_params];
}

+(void) setAllDecoders_in_thread:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAllDecoders_caller getSharedInstance] performSelectorInBackground:@selector(command_setAllDecoders:) withObject:caller_params];
}

+(void) setAllDecoders_in_UI_thread:(rb_BarcodeChainway_setAllDecoders_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAllDecoders_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAllDecoders:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAllDecoders_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::allDecoders="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAllDecoders_caller setAllDecoders_in_thread:[rb_BarcodeChainway_setAllDecoders_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAllDecoders_caller setAllDecoders:[rb_BarcodeChainway_setAllDecoders_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAllDecoders(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAllDecoders_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAllDecoders(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAllDecoders_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAztec_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAztec_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAztec_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAztec_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAztec_caller_params* par = [[[rb_BarcodeChainway_getAztec_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAztec_caller : NSObject {

}
+(rb_BarcodeChainway_getAztec_caller*) getSharedInstance;
+(void) getAztec:(rb_BarcodeChainway_getAztec_caller_params*)caller_params;
+(void) getAztec_in_thread:(rb_BarcodeChainway_getAztec_caller_params*)caller_params;
+(void) getAztec_in_UI_thread:(rb_BarcodeChainway_getAztec_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAztec_caller* our_BarcodeChainway_getAztec_caller = nil;

@implementation rb_BarcodeChainway_getAztec_caller

+(rb_BarcodeChainway_getAztec_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAztec_caller == nil) {
        our_BarcodeChainway_getAztec_caller = [[rb_BarcodeChainway_getAztec_caller alloc] init];
    }
    return our_BarcodeChainway_getAztec_caller;
}

-(void) command_getAztec:(rb_BarcodeChainway_getAztec_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAztec:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAztec:(rb_BarcodeChainway_getAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAztec_caller getSharedInstance] command_getAztec:caller_params];
}

+(void) getAztec_in_thread:(rb_BarcodeChainway_getAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAztec_caller getSharedInstance] performSelectorInBackground:@selector(command_getAztec:) withObject:caller_params];
}

+(void) getAztec_in_UI_thread:(rb_BarcodeChainway_getAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAztec_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAztec:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAztec_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aztec"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAztec_caller getAztec_in_thread:[rb_BarcodeChainway_getAztec_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAztec_caller getAztec:[rb_BarcodeChainway_getAztec_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAztec(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAztec_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAztec(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAztec_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAztec_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAztec_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAztec_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAztec_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAztec_caller_params* par = [[[rb_BarcodeChainway_setAztec_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAztec_caller : NSObject {

}
+(rb_BarcodeChainway_setAztec_caller*) getSharedInstance;
+(void) setAztec:(rb_BarcodeChainway_setAztec_caller_params*)caller_params;
+(void) setAztec_in_thread:(rb_BarcodeChainway_setAztec_caller_params*)caller_params;
+(void) setAztec_in_UI_thread:(rb_BarcodeChainway_setAztec_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAztec_caller* our_BarcodeChainway_setAztec_caller = nil;

@implementation rb_BarcodeChainway_setAztec_caller

+(rb_BarcodeChainway_setAztec_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAztec_caller == nil) {
        our_BarcodeChainway_setAztec_caller = [[rb_BarcodeChainway_setAztec_caller alloc] init];
    }
    return our_BarcodeChainway_setAztec_caller;
}

-(void) command_setAztec:(rb_BarcodeChainway_setAztec_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAztec:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAztec:(rb_BarcodeChainway_setAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAztec_caller getSharedInstance] command_setAztec:caller_params];
}

+(void) setAztec_in_thread:(rb_BarcodeChainway_setAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAztec_caller getSharedInstance] performSelectorInBackground:@selector(command_setAztec:) withObject:caller_params];
}

+(void) setAztec_in_UI_thread:(rb_BarcodeChainway_setAztec_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAztec_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAztec:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAztec_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::aztec="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAztec_caller setAztec_in_thread:[rb_BarcodeChainway_setAztec_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAztec_caller setAztec:[rb_BarcodeChainway_setAztec_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAztec(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAztec_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAztec(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAztec_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getChinese2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getChinese2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getChinese2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getChinese2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getChinese2of5_caller_params* par = [[[rb_BarcodeChainway_getChinese2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getChinese2of5_caller : NSObject {

}
+(rb_BarcodeChainway_getChinese2of5_caller*) getSharedInstance;
+(void) getChinese2of5:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params;
+(void) getChinese2of5_in_thread:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params;
+(void) getChinese2of5_in_UI_thread:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getChinese2of5_caller* our_BarcodeChainway_getChinese2of5_caller = nil;

@implementation rb_BarcodeChainway_getChinese2of5_caller

+(rb_BarcodeChainway_getChinese2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getChinese2of5_caller == nil) {
        our_BarcodeChainway_getChinese2of5_caller = [[rb_BarcodeChainway_getChinese2of5_caller alloc] init];
    }
    return our_BarcodeChainway_getChinese2of5_caller;
}

-(void) command_getChinese2of5:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getChinese2of5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getChinese2of5:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getChinese2of5_caller getSharedInstance] command_getChinese2of5:caller_params];
}

+(void) getChinese2of5_in_thread:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getChinese2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_getChinese2of5:) withObject:caller_params];
}

+(void) getChinese2of5_in_UI_thread:(rb_BarcodeChainway_getChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getChinese2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getChinese2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getChinese2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::chinese2of5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getChinese2of5_caller getChinese2of5_in_thread:[rb_BarcodeChainway_getChinese2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getChinese2of5_caller getChinese2of5:[rb_BarcodeChainway_getChinese2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getChinese2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getChinese2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getChinese2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getChinese2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setChinese2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setChinese2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setChinese2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setChinese2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setChinese2of5_caller_params* par = [[[rb_BarcodeChainway_setChinese2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setChinese2of5_caller : NSObject {

}
+(rb_BarcodeChainway_setChinese2of5_caller*) getSharedInstance;
+(void) setChinese2of5:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params;
+(void) setChinese2of5_in_thread:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params;
+(void) setChinese2of5_in_UI_thread:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setChinese2of5_caller* our_BarcodeChainway_setChinese2of5_caller = nil;

@implementation rb_BarcodeChainway_setChinese2of5_caller

+(rb_BarcodeChainway_setChinese2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setChinese2of5_caller == nil) {
        our_BarcodeChainway_setChinese2of5_caller = [[rb_BarcodeChainway_setChinese2of5_caller alloc] init];
    }
    return our_BarcodeChainway_setChinese2of5_caller;
}

-(void) command_setChinese2of5:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setChinese2of5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setChinese2of5:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setChinese2of5_caller getSharedInstance] command_setChinese2of5:caller_params];
}

+(void) setChinese2of5_in_thread:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setChinese2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_setChinese2of5:) withObject:caller_params];
}

+(void) setChinese2of5_in_UI_thread:(rb_BarcodeChainway_setChinese2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setChinese2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setChinese2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setChinese2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::chinese2of5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setChinese2of5_caller setChinese2of5_in_thread:[rb_BarcodeChainway_setChinese2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setChinese2of5_caller setChinese2of5:[rb_BarcodeChainway_setChinese2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setChinese2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setChinese2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setChinese2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setChinese2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabar_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabar_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabar_caller_params* par = [[[rb_BarcodeChainway_getCodabar_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabar_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabar_caller*) getSharedInstance;
+(void) getCodabar:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params;
+(void) getCodabar_in_thread:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params;
+(void) getCodabar_in_UI_thread:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabar_caller* our_BarcodeChainway_getCodabar_caller = nil;

@implementation rb_BarcodeChainway_getCodabar_caller

+(rb_BarcodeChainway_getCodabar_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabar_caller == nil) {
        our_BarcodeChainway_getCodabar_caller = [[rb_BarcodeChainway_getCodabar_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabar_caller;
}

-(void) command_getCodabar:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabar:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabar:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabar_caller getSharedInstance] command_getCodabar:caller_params];
}

+(void) getCodabar_in_thread:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabar_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabar:) withObject:caller_params];
}

+(void) getCodabar_in_UI_thread:(rb_BarcodeChainway_getCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabar_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabar:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabar_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabar"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabar_caller getCodabar_in_thread:[rb_BarcodeChainway_getCodabar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabar_caller getCodabar:[rb_BarcodeChainway_getCodabar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabar(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabar_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabar(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabar_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabar_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabar_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabar_caller_params* par = [[[rb_BarcodeChainway_setCodabar_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabar_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabar_caller*) getSharedInstance;
+(void) setCodabar:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params;
+(void) setCodabar_in_thread:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params;
+(void) setCodabar_in_UI_thread:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabar_caller* our_BarcodeChainway_setCodabar_caller = nil;

@implementation rb_BarcodeChainway_setCodabar_caller

+(rb_BarcodeChainway_setCodabar_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabar_caller == nil) {
        our_BarcodeChainway_setCodabar_caller = [[rb_BarcodeChainway_setCodabar_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabar_caller;
}

-(void) command_setCodabar:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabar:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabar:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabar_caller getSharedInstance] command_setCodabar:caller_params];
}

+(void) setCodabar_in_thread:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabar_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabar:) withObject:caller_params];
}

+(void) setCodabar_in_UI_thread:(rb_BarcodeChainway_setCodabar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabar_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabar:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabar_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabar="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabar_caller setCodabar_in_thread:[rb_BarcodeChainway_setCodabar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabar_caller setCodabar:[rb_BarcodeChainway_setCodabar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabar(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabar_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabar(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabar_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabarClsiEditing_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabarClsiEditing_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabarClsiEditing_caller_params* par = [[[rb_BarcodeChainway_getCodabarClsiEditing_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabarClsiEditing_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabarClsiEditing_caller*) getSharedInstance;
+(void) getCodabarClsiEditing:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params;
+(void) getCodabarClsiEditing_in_thread:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params;
+(void) getCodabarClsiEditing_in_UI_thread:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabarClsiEditing_caller* our_BarcodeChainway_getCodabarClsiEditing_caller = nil;

@implementation rb_BarcodeChainway_getCodabarClsiEditing_caller

+(rb_BarcodeChainway_getCodabarClsiEditing_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabarClsiEditing_caller == nil) {
        our_BarcodeChainway_getCodabarClsiEditing_caller = [[rb_BarcodeChainway_getCodabarClsiEditing_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabarClsiEditing_caller;
}

-(void) command_getCodabarClsiEditing:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabarClsiEditing:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabarClsiEditing:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarClsiEditing_caller getSharedInstance] command_getCodabarClsiEditing:caller_params];
}

+(void) getCodabarClsiEditing_in_thread:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarClsiEditing_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabarClsiEditing:) withObject:caller_params];
}

+(void) getCodabarClsiEditing_in_UI_thread:(rb_BarcodeChainway_getCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarClsiEditing_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabarClsiEditing:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabarClsiEditing_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarClsiEditing"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabarClsiEditing_caller getCodabarClsiEditing_in_thread:[rb_BarcodeChainway_getCodabarClsiEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabarClsiEditing_caller getCodabarClsiEditing:[rb_BarcodeChainway_getCodabarClsiEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabarClsiEditing(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabarClsiEditing_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabarClsiEditing(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabarClsiEditing_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabarClsiEditing_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabarClsiEditing_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabarClsiEditing_caller_params* par = [[[rb_BarcodeChainway_setCodabarClsiEditing_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabarClsiEditing_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabarClsiEditing_caller*) getSharedInstance;
+(void) setCodabarClsiEditing:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params;
+(void) setCodabarClsiEditing_in_thread:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params;
+(void) setCodabarClsiEditing_in_UI_thread:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabarClsiEditing_caller* our_BarcodeChainway_setCodabarClsiEditing_caller = nil;

@implementation rb_BarcodeChainway_setCodabarClsiEditing_caller

+(rb_BarcodeChainway_setCodabarClsiEditing_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabarClsiEditing_caller == nil) {
        our_BarcodeChainway_setCodabarClsiEditing_caller = [[rb_BarcodeChainway_setCodabarClsiEditing_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabarClsiEditing_caller;
}

-(void) command_setCodabarClsiEditing:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabarClsiEditing:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabarClsiEditing:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarClsiEditing_caller getSharedInstance] command_setCodabarClsiEditing:caller_params];
}

+(void) setCodabarClsiEditing_in_thread:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarClsiEditing_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabarClsiEditing:) withObject:caller_params];
}

+(void) setCodabarClsiEditing_in_UI_thread:(rb_BarcodeChainway_setCodabarClsiEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarClsiEditing_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabarClsiEditing:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabarClsiEditing_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarClsiEditing="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabarClsiEditing_caller setCodabarClsiEditing_in_thread:[rb_BarcodeChainway_setCodabarClsiEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabarClsiEditing_caller setCodabarClsiEditing:[rb_BarcodeChainway_setCodabarClsiEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabarClsiEditing(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabarClsiEditing_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabarClsiEditing(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabarClsiEditing_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabarMaxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabarMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabarMaxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabarMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabarMaxLength_caller_params* par = [[[rb_BarcodeChainway_getCodabarMaxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabarMaxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabarMaxLength_caller*) getSharedInstance;
+(void) getCodabarMaxLength:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params;
+(void) getCodabarMaxLength_in_thread:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params;
+(void) getCodabarMaxLength_in_UI_thread:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabarMaxLength_caller* our_BarcodeChainway_getCodabarMaxLength_caller = nil;

@implementation rb_BarcodeChainway_getCodabarMaxLength_caller

+(rb_BarcodeChainway_getCodabarMaxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabarMaxLength_caller == nil) {
        our_BarcodeChainway_getCodabarMaxLength_caller = [[rb_BarcodeChainway_getCodabarMaxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabarMaxLength_caller;
}

-(void) command_getCodabarMaxLength:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabarMaxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabarMaxLength:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMaxLength_caller getSharedInstance] command_getCodabarMaxLength:caller_params];
}

+(void) getCodabarMaxLength_in_thread:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMaxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabarMaxLength:) withObject:caller_params];
}

+(void) getCodabarMaxLength_in_UI_thread:(rb_BarcodeChainway_getCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMaxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabarMaxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabarMaxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarMaxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabarMaxLength_caller getCodabarMaxLength_in_thread:[rb_BarcodeChainway_getCodabarMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabarMaxLength_caller getCodabarMaxLength:[rb_BarcodeChainway_getCodabarMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabarMaxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabarMaxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabarMaxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabarMaxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabarMaxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabarMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabarMaxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabarMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabarMaxLength_caller_params* par = [[[rb_BarcodeChainway_setCodabarMaxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabarMaxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabarMaxLength_caller*) getSharedInstance;
+(void) setCodabarMaxLength:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params;
+(void) setCodabarMaxLength_in_thread:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params;
+(void) setCodabarMaxLength_in_UI_thread:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabarMaxLength_caller* our_BarcodeChainway_setCodabarMaxLength_caller = nil;

@implementation rb_BarcodeChainway_setCodabarMaxLength_caller

+(rb_BarcodeChainway_setCodabarMaxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabarMaxLength_caller == nil) {
        our_BarcodeChainway_setCodabarMaxLength_caller = [[rb_BarcodeChainway_setCodabarMaxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabarMaxLength_caller;
}

-(void) command_setCodabarMaxLength:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabarMaxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabarMaxLength:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMaxLength_caller getSharedInstance] command_setCodabarMaxLength:caller_params];
}

+(void) setCodabarMaxLength_in_thread:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMaxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabarMaxLength:) withObject:caller_params];
}

+(void) setCodabarMaxLength_in_UI_thread:(rb_BarcodeChainway_setCodabarMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMaxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabarMaxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabarMaxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarMaxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabarMaxLength_caller setCodabarMaxLength_in_thread:[rb_BarcodeChainway_setCodabarMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabarMaxLength_caller setCodabarMaxLength:[rb_BarcodeChainway_setCodabarMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabarMaxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabarMaxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabarMaxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabarMaxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabarMinLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabarMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabarMinLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabarMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabarMinLength_caller_params* par = [[[rb_BarcodeChainway_getCodabarMinLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabarMinLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabarMinLength_caller*) getSharedInstance;
+(void) getCodabarMinLength:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params;
+(void) getCodabarMinLength_in_thread:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params;
+(void) getCodabarMinLength_in_UI_thread:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabarMinLength_caller* our_BarcodeChainway_getCodabarMinLength_caller = nil;

@implementation rb_BarcodeChainway_getCodabarMinLength_caller

+(rb_BarcodeChainway_getCodabarMinLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabarMinLength_caller == nil) {
        our_BarcodeChainway_getCodabarMinLength_caller = [[rb_BarcodeChainway_getCodabarMinLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabarMinLength_caller;
}

-(void) command_getCodabarMinLength:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabarMinLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabarMinLength:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMinLength_caller getSharedInstance] command_getCodabarMinLength:caller_params];
}

+(void) getCodabarMinLength_in_thread:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMinLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabarMinLength:) withObject:caller_params];
}

+(void) getCodabarMinLength_in_UI_thread:(rb_BarcodeChainway_getCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarMinLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabarMinLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabarMinLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarMinLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabarMinLength_caller getCodabarMinLength_in_thread:[rb_BarcodeChainway_getCodabarMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabarMinLength_caller getCodabarMinLength:[rb_BarcodeChainway_getCodabarMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabarMinLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabarMinLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabarMinLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabarMinLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabarMinLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabarMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabarMinLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabarMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabarMinLength_caller_params* par = [[[rb_BarcodeChainway_setCodabarMinLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabarMinLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabarMinLength_caller*) getSharedInstance;
+(void) setCodabarMinLength:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params;
+(void) setCodabarMinLength_in_thread:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params;
+(void) setCodabarMinLength_in_UI_thread:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabarMinLength_caller* our_BarcodeChainway_setCodabarMinLength_caller = nil;

@implementation rb_BarcodeChainway_setCodabarMinLength_caller

+(rb_BarcodeChainway_setCodabarMinLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabarMinLength_caller == nil) {
        our_BarcodeChainway_setCodabarMinLength_caller = [[rb_BarcodeChainway_setCodabarMinLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabarMinLength_caller;
}

-(void) command_setCodabarMinLength:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabarMinLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabarMinLength:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMinLength_caller getSharedInstance] command_setCodabarMinLength:caller_params];
}

+(void) setCodabarMinLength_in_thread:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMinLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabarMinLength:) withObject:caller_params];
}

+(void) setCodabarMinLength_in_UI_thread:(rb_BarcodeChainway_setCodabarMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarMinLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabarMinLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabarMinLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarMinLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabarMinLength_caller setCodabarMinLength_in_thread:[rb_BarcodeChainway_setCodabarMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabarMinLength_caller setCodabarMinLength:[rb_BarcodeChainway_setCodabarMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabarMinLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabarMinLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabarMinLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabarMinLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabarNotisEditing_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabarNotisEditing_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabarNotisEditing_caller_params* par = [[[rb_BarcodeChainway_getCodabarNotisEditing_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabarNotisEditing_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabarNotisEditing_caller*) getSharedInstance;
+(void) getCodabarNotisEditing:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params;
+(void) getCodabarNotisEditing_in_thread:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params;
+(void) getCodabarNotisEditing_in_UI_thread:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabarNotisEditing_caller* our_BarcodeChainway_getCodabarNotisEditing_caller = nil;

@implementation rb_BarcodeChainway_getCodabarNotisEditing_caller

+(rb_BarcodeChainway_getCodabarNotisEditing_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabarNotisEditing_caller == nil) {
        our_BarcodeChainway_getCodabarNotisEditing_caller = [[rb_BarcodeChainway_getCodabarNotisEditing_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabarNotisEditing_caller;
}

-(void) command_getCodabarNotisEditing:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabarNotisEditing:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabarNotisEditing:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarNotisEditing_caller getSharedInstance] command_getCodabarNotisEditing:caller_params];
}

+(void) getCodabarNotisEditing_in_thread:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarNotisEditing_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabarNotisEditing:) withObject:caller_params];
}

+(void) getCodabarNotisEditing_in_UI_thread:(rb_BarcodeChainway_getCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarNotisEditing_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabarNotisEditing:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabarNotisEditing_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarNotisEditing"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabarNotisEditing_caller getCodabarNotisEditing_in_thread:[rb_BarcodeChainway_getCodabarNotisEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabarNotisEditing_caller getCodabarNotisEditing:[rb_BarcodeChainway_getCodabarNotisEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabarNotisEditing(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabarNotisEditing_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabarNotisEditing(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabarNotisEditing_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabarNotisEditing_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabarNotisEditing_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabarNotisEditing_caller_params* par = [[[rb_BarcodeChainway_setCodabarNotisEditing_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabarNotisEditing_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabarNotisEditing_caller*) getSharedInstance;
+(void) setCodabarNotisEditing:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params;
+(void) setCodabarNotisEditing_in_thread:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params;
+(void) setCodabarNotisEditing_in_UI_thread:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabarNotisEditing_caller* our_BarcodeChainway_setCodabarNotisEditing_caller = nil;

@implementation rb_BarcodeChainway_setCodabarNotisEditing_caller

+(rb_BarcodeChainway_setCodabarNotisEditing_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabarNotisEditing_caller == nil) {
        our_BarcodeChainway_setCodabarNotisEditing_caller = [[rb_BarcodeChainway_setCodabarNotisEditing_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabarNotisEditing_caller;
}

-(void) command_setCodabarNotisEditing:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabarNotisEditing:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabarNotisEditing:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarNotisEditing_caller getSharedInstance] command_setCodabarNotisEditing:caller_params];
}

+(void) setCodabarNotisEditing_in_thread:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarNotisEditing_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabarNotisEditing:) withObject:caller_params];
}

+(void) setCodabarNotisEditing_in_UI_thread:(rb_BarcodeChainway_setCodabarNotisEditing_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarNotisEditing_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabarNotisEditing:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabarNotisEditing_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarNotisEditing="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabarNotisEditing_caller setCodabarNotisEditing_in_thread:[rb_BarcodeChainway_setCodabarNotisEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabarNotisEditing_caller setCodabarNotisEditing:[rb_BarcodeChainway_setCodabarNotisEditing_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabarNotisEditing(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabarNotisEditing_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabarNotisEditing(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabarNotisEditing_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCodabarRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCodabarRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCodabarRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCodabarRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCodabarRedundancy_caller_params* par = [[[rb_BarcodeChainway_getCodabarRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCodabarRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getCodabarRedundancy_caller*) getSharedInstance;
+(void) getCodabarRedundancy:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params;
+(void) getCodabarRedundancy_in_thread:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params;
+(void) getCodabarRedundancy_in_UI_thread:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCodabarRedundancy_caller* our_BarcodeChainway_getCodabarRedundancy_caller = nil;

@implementation rb_BarcodeChainway_getCodabarRedundancy_caller

+(rb_BarcodeChainway_getCodabarRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCodabarRedundancy_caller == nil) {
        our_BarcodeChainway_getCodabarRedundancy_caller = [[rb_BarcodeChainway_getCodabarRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getCodabarRedundancy_caller;
}

-(void) command_getCodabarRedundancy:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCodabarRedundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCodabarRedundancy:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarRedundancy_caller getSharedInstance] command_getCodabarRedundancy:caller_params];
}

+(void) getCodabarRedundancy_in_thread:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getCodabarRedundancy:) withObject:caller_params];
}

+(void) getCodabarRedundancy_in_UI_thread:(rb_BarcodeChainway_getCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCodabarRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCodabarRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCodabarRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarRedundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCodabarRedundancy_caller getCodabarRedundancy_in_thread:[rb_BarcodeChainway_getCodabarRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCodabarRedundancy_caller getCodabarRedundancy:[rb_BarcodeChainway_getCodabarRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCodabarRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCodabarRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCodabarRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCodabarRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCodabarRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCodabarRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCodabarRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCodabarRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCodabarRedundancy_caller_params* par = [[[rb_BarcodeChainway_setCodabarRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCodabarRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setCodabarRedundancy_caller*) getSharedInstance;
+(void) setCodabarRedundancy:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params;
+(void) setCodabarRedundancy_in_thread:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params;
+(void) setCodabarRedundancy_in_UI_thread:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCodabarRedundancy_caller* our_BarcodeChainway_setCodabarRedundancy_caller = nil;

@implementation rb_BarcodeChainway_setCodabarRedundancy_caller

+(rb_BarcodeChainway_setCodabarRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCodabarRedundancy_caller == nil) {
        our_BarcodeChainway_setCodabarRedundancy_caller = [[rb_BarcodeChainway_setCodabarRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setCodabarRedundancy_caller;
}

-(void) command_setCodabarRedundancy:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCodabarRedundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCodabarRedundancy:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarRedundancy_caller getSharedInstance] command_setCodabarRedundancy:caller_params];
}

+(void) setCodabarRedundancy_in_thread:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setCodabarRedundancy:) withObject:caller_params];
}

+(void) setCodabarRedundancy_in_UI_thread:(rb_BarcodeChainway_setCodabarRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCodabarRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCodabarRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCodabarRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::codabarRedundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCodabarRedundancy_caller setCodabarRedundancy_in_thread:[rb_BarcodeChainway_setCodabarRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCodabarRedundancy_caller setCodabarRedundancy:[rb_BarcodeChainway_setCodabarRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCodabarRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCodabarRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCodabarRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCodabarRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11_caller_params* par = [[[rb_BarcodeChainway_getCode11_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11_caller*) getSharedInstance;
+(void) getCode11:(rb_BarcodeChainway_getCode11_caller_params*)caller_params;
+(void) getCode11_in_thread:(rb_BarcodeChainway_getCode11_caller_params*)caller_params;
+(void) getCode11_in_UI_thread:(rb_BarcodeChainway_getCode11_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11_caller* our_BarcodeChainway_getCode11_caller = nil;

@implementation rb_BarcodeChainway_getCode11_caller

+(rb_BarcodeChainway_getCode11_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11_caller == nil) {
        our_BarcodeChainway_getCode11_caller = [[rb_BarcodeChainway_getCode11_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11_caller;
}

-(void) command_getCode11:(rb_BarcodeChainway_getCode11_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11:(rb_BarcodeChainway_getCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11_caller getSharedInstance] command_getCode11:caller_params];
}

+(void) getCode11_in_thread:(rb_BarcodeChainway_getCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11:) withObject:caller_params];
}

+(void) getCode11_in_UI_thread:(rb_BarcodeChainway_getCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11_caller getCode11_in_thread:[rb_BarcodeChainway_getCode11_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11_caller getCode11:[rb_BarcodeChainway_getCode11_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11_caller_params* par = [[[rb_BarcodeChainway_setCode11_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11_caller*) getSharedInstance;
+(void) setCode11:(rb_BarcodeChainway_setCode11_caller_params*)caller_params;
+(void) setCode11_in_thread:(rb_BarcodeChainway_setCode11_caller_params*)caller_params;
+(void) setCode11_in_UI_thread:(rb_BarcodeChainway_setCode11_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11_caller* our_BarcodeChainway_setCode11_caller = nil;

@implementation rb_BarcodeChainway_setCode11_caller

+(rb_BarcodeChainway_setCode11_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11_caller == nil) {
        our_BarcodeChainway_setCode11_caller = [[rb_BarcodeChainway_setCode11_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11_caller;
}

-(void) command_setCode11:(rb_BarcodeChainway_setCode11_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11:(rb_BarcodeChainway_setCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11_caller getSharedInstance] command_setCode11:caller_params];
}

+(void) setCode11_in_thread:(rb_BarcodeChainway_setCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11:) withObject:caller_params];
}

+(void) setCode11_in_UI_thread:(rb_BarcodeChainway_setCode11_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11_caller setCode11_in_thread:[rb_BarcodeChainway_setCode11_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11_caller setCode11:[rb_BarcodeChainway_setCode11_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11checkDigitCount_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11checkDigitCount_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11checkDigitCount_caller_params* par = [[[rb_BarcodeChainway_getCode11checkDigitCount_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11checkDigitCount_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11checkDigitCount_caller*) getSharedInstance;
+(void) getCode11checkDigitCount:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params;
+(void) getCode11checkDigitCount_in_thread:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params;
+(void) getCode11checkDigitCount_in_UI_thread:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11checkDigitCount_caller* our_BarcodeChainway_getCode11checkDigitCount_caller = nil;

@implementation rb_BarcodeChainway_getCode11checkDigitCount_caller

+(rb_BarcodeChainway_getCode11checkDigitCount_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11checkDigitCount_caller == nil) {
        our_BarcodeChainway_getCode11checkDigitCount_caller = [[rb_BarcodeChainway_getCode11checkDigitCount_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11checkDigitCount_caller;
}

-(void) command_getCode11checkDigitCount:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11checkDigitCount:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11checkDigitCount:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11checkDigitCount_caller getSharedInstance] command_getCode11checkDigitCount:caller_params];
}

+(void) getCode11checkDigitCount_in_thread:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11checkDigitCount_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11checkDigitCount:) withObject:caller_params];
}

+(void) getCode11checkDigitCount_in_UI_thread:(rb_BarcodeChainway_getCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11checkDigitCount_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11checkDigitCount:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11checkDigitCount_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11checkDigitCount"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11checkDigitCount_caller getCode11checkDigitCount_in_thread:[rb_BarcodeChainway_getCode11checkDigitCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11checkDigitCount_caller getCode11checkDigitCount:[rb_BarcodeChainway_getCode11checkDigitCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11checkDigitCount(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11checkDigitCount_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11checkDigitCount(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11checkDigitCount_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11checkDigitCount_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11checkDigitCount_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11checkDigitCount_caller_params* par = [[[rb_BarcodeChainway_setCode11checkDigitCount_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11checkDigitCount_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11checkDigitCount_caller*) getSharedInstance;
+(void) setCode11checkDigitCount:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params;
+(void) setCode11checkDigitCount_in_thread:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params;
+(void) setCode11checkDigitCount_in_UI_thread:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11checkDigitCount_caller* our_BarcodeChainway_setCode11checkDigitCount_caller = nil;

@implementation rb_BarcodeChainway_setCode11checkDigitCount_caller

+(rb_BarcodeChainway_setCode11checkDigitCount_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11checkDigitCount_caller == nil) {
        our_BarcodeChainway_setCode11checkDigitCount_caller = [[rb_BarcodeChainway_setCode11checkDigitCount_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11checkDigitCount_caller;
}

-(void) command_setCode11checkDigitCount:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11checkDigitCount:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11checkDigitCount:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11checkDigitCount_caller getSharedInstance] command_setCode11checkDigitCount:caller_params];
}

+(void) setCode11checkDigitCount_in_thread:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11checkDigitCount_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11checkDigitCount:) withObject:caller_params];
}

+(void) setCode11checkDigitCount_in_UI_thread:(rb_BarcodeChainway_setCode11checkDigitCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11checkDigitCount_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11checkDigitCount:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11checkDigitCount_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11checkDigitCount="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11checkDigitCount_caller setCode11checkDigitCount_in_thread:[rb_BarcodeChainway_setCode11checkDigitCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11checkDigitCount_caller setCode11checkDigitCount:[rb_BarcodeChainway_setCode11checkDigitCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11checkDigitCount(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11checkDigitCount_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11checkDigitCount(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11checkDigitCount_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11maxLength_caller_params* par = [[[rb_BarcodeChainway_getCode11maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11maxLength_caller*) getSharedInstance;
+(void) getCode11maxLength:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params;
+(void) getCode11maxLength_in_thread:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params;
+(void) getCode11maxLength_in_UI_thread:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11maxLength_caller* our_BarcodeChainway_getCode11maxLength_caller = nil;

@implementation rb_BarcodeChainway_getCode11maxLength_caller

+(rb_BarcodeChainway_getCode11maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11maxLength_caller == nil) {
        our_BarcodeChainway_getCode11maxLength_caller = [[rb_BarcodeChainway_getCode11maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11maxLength_caller;
}

-(void) command_getCode11maxLength:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11maxLength:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11maxLength_caller getSharedInstance] command_getCode11maxLength:caller_params];
}

+(void) getCode11maxLength_in_thread:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11maxLength:) withObject:caller_params];
}

+(void) getCode11maxLength_in_UI_thread:(rb_BarcodeChainway_getCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11maxLength_caller getCode11maxLength_in_thread:[rb_BarcodeChainway_getCode11maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11maxLength_caller getCode11maxLength:[rb_BarcodeChainway_getCode11maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11maxLength_caller_params* par = [[[rb_BarcodeChainway_setCode11maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11maxLength_caller*) getSharedInstance;
+(void) setCode11maxLength:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params;
+(void) setCode11maxLength_in_thread:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params;
+(void) setCode11maxLength_in_UI_thread:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11maxLength_caller* our_BarcodeChainway_setCode11maxLength_caller = nil;

@implementation rb_BarcodeChainway_setCode11maxLength_caller

+(rb_BarcodeChainway_setCode11maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11maxLength_caller == nil) {
        our_BarcodeChainway_setCode11maxLength_caller = [[rb_BarcodeChainway_setCode11maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11maxLength_caller;
}

-(void) command_setCode11maxLength:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11maxLength:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11maxLength_caller getSharedInstance] command_setCode11maxLength:caller_params];
}

+(void) setCode11maxLength_in_thread:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11maxLength:) withObject:caller_params];
}

+(void) setCode11maxLength_in_UI_thread:(rb_BarcodeChainway_setCode11maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11maxLength_caller setCode11maxLength_in_thread:[rb_BarcodeChainway_setCode11maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11maxLength_caller setCode11maxLength:[rb_BarcodeChainway_setCode11maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11minLength_caller_params* par = [[[rb_BarcodeChainway_getCode11minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11minLength_caller*) getSharedInstance;
+(void) getCode11minLength:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params;
+(void) getCode11minLength_in_thread:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params;
+(void) getCode11minLength_in_UI_thread:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11minLength_caller* our_BarcodeChainway_getCode11minLength_caller = nil;

@implementation rb_BarcodeChainway_getCode11minLength_caller

+(rb_BarcodeChainway_getCode11minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11minLength_caller == nil) {
        our_BarcodeChainway_getCode11minLength_caller = [[rb_BarcodeChainway_getCode11minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11minLength_caller;
}

-(void) command_getCode11minLength:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11minLength:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11minLength_caller getSharedInstance] command_getCode11minLength:caller_params];
}

+(void) getCode11minLength_in_thread:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11minLength:) withObject:caller_params];
}

+(void) getCode11minLength_in_UI_thread:(rb_BarcodeChainway_getCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11minLength_caller getCode11minLength_in_thread:[rb_BarcodeChainway_getCode11minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11minLength_caller getCode11minLength:[rb_BarcodeChainway_getCode11minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11minLength_caller_params* par = [[[rb_BarcodeChainway_setCode11minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11minLength_caller*) getSharedInstance;
+(void) setCode11minLength:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params;
+(void) setCode11minLength_in_thread:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params;
+(void) setCode11minLength_in_UI_thread:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11minLength_caller* our_BarcodeChainway_setCode11minLength_caller = nil;

@implementation rb_BarcodeChainway_setCode11minLength_caller

+(rb_BarcodeChainway_setCode11minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11minLength_caller == nil) {
        our_BarcodeChainway_setCode11minLength_caller = [[rb_BarcodeChainway_setCode11minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11minLength_caller;
}

-(void) command_setCode11minLength:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11minLength:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11minLength_caller getSharedInstance] command_setCode11minLength:caller_params];
}

+(void) setCode11minLength_in_thread:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11minLength:) withObject:caller_params];
}

+(void) setCode11minLength_in_UI_thread:(rb_BarcodeChainway_setCode11minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11minLength_caller setCode11minLength_in_thread:[rb_BarcodeChainway_setCode11minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11minLength_caller setCode11minLength:[rb_BarcodeChainway_setCode11minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11redundancy_caller_params* par = [[[rb_BarcodeChainway_getCode11redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11redundancy_caller*) getSharedInstance;
+(void) getCode11redundancy:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params;
+(void) getCode11redundancy_in_thread:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params;
+(void) getCode11redundancy_in_UI_thread:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11redundancy_caller* our_BarcodeChainway_getCode11redundancy_caller = nil;

@implementation rb_BarcodeChainway_getCode11redundancy_caller

+(rb_BarcodeChainway_getCode11redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11redundancy_caller == nil) {
        our_BarcodeChainway_getCode11redundancy_caller = [[rb_BarcodeChainway_getCode11redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11redundancy_caller;
}

-(void) command_getCode11redundancy:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11redundancy:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11redundancy_caller getSharedInstance] command_getCode11redundancy:caller_params];
}

+(void) getCode11redundancy_in_thread:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11redundancy:) withObject:caller_params];
}

+(void) getCode11redundancy_in_UI_thread:(rb_BarcodeChainway_getCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11redundancy_caller getCode11redundancy_in_thread:[rb_BarcodeChainway_getCode11redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11redundancy_caller getCode11redundancy:[rb_BarcodeChainway_getCode11redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11redundancy_caller_params* par = [[[rb_BarcodeChainway_setCode11redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11redundancy_caller*) getSharedInstance;
+(void) setCode11redundancy:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params;
+(void) setCode11redundancy_in_thread:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params;
+(void) setCode11redundancy_in_UI_thread:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11redundancy_caller* our_BarcodeChainway_setCode11redundancy_caller = nil;

@implementation rb_BarcodeChainway_setCode11redundancy_caller

+(rb_BarcodeChainway_setCode11redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11redundancy_caller == nil) {
        our_BarcodeChainway_setCode11redundancy_caller = [[rb_BarcodeChainway_setCode11redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11redundancy_caller;
}

-(void) command_setCode11redundancy:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11redundancy:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11redundancy_caller getSharedInstance] command_setCode11redundancy:caller_params];
}

+(void) setCode11redundancy_in_thread:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11redundancy:) withObject:caller_params];
}

+(void) setCode11redundancy_in_UI_thread:(rb_BarcodeChainway_setCode11redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11redundancy_caller setCode11redundancy_in_thread:[rb_BarcodeChainway_setCode11redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11redundancy_caller setCode11redundancy:[rb_BarcodeChainway_setCode11redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode11reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode11reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode11reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getCode11reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode11reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getCode11reportCheckDigit_caller*) getSharedInstance;
+(void) getCode11reportCheckDigit:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params;
+(void) getCode11reportCheckDigit_in_thread:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params;
+(void) getCode11reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode11reportCheckDigit_caller* our_BarcodeChainway_getCode11reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getCode11reportCheckDigit_caller

+(rb_BarcodeChainway_getCode11reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode11reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getCode11reportCheckDigit_caller = [[rb_BarcodeChainway_getCode11reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getCode11reportCheckDigit_caller;
}

-(void) command_getCode11reportCheckDigit:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode11reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode11reportCheckDigit:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11reportCheckDigit_caller getSharedInstance] command_getCode11reportCheckDigit:caller_params];
}

+(void) getCode11reportCheckDigit_in_thread:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode11reportCheckDigit:) withObject:caller_params];
}

+(void) getCode11reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode11reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode11reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode11reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode11reportCheckDigit_caller getCode11reportCheckDigit_in_thread:[rb_BarcodeChainway_getCode11reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode11reportCheckDigit_caller getCode11reportCheckDigit:[rb_BarcodeChainway_getCode11reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode11reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode11reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode11reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode11reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode11reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode11reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode11reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setCode11reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode11reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setCode11reportCheckDigit_caller*) getSharedInstance;
+(void) setCode11reportCheckDigit:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params;
+(void) setCode11reportCheckDigit_in_thread:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params;
+(void) setCode11reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode11reportCheckDigit_caller* our_BarcodeChainway_setCode11reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setCode11reportCheckDigit_caller

+(rb_BarcodeChainway_setCode11reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode11reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setCode11reportCheckDigit_caller = [[rb_BarcodeChainway_setCode11reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setCode11reportCheckDigit_caller;
}

-(void) command_setCode11reportCheckDigit:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode11reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode11reportCheckDigit:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11reportCheckDigit_caller getSharedInstance] command_setCode11reportCheckDigit:caller_params];
}

+(void) setCode11reportCheckDigit_in_thread:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode11reportCheckDigit:) withObject:caller_params];
}

+(void) setCode11reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode11reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode11reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode11reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode11reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code11reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode11reportCheckDigit_caller setCode11reportCheckDigit_in_thread:[rb_BarcodeChainway_setCode11reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode11reportCheckDigit_caller setCode11reportCheckDigit:[rb_BarcodeChainway_setCode11reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode11reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode11reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode11reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode11reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128_caller_params* par = [[[rb_BarcodeChainway_getCode128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128_caller*) getSharedInstance;
+(void) getCode128:(rb_BarcodeChainway_getCode128_caller_params*)caller_params;
+(void) getCode128_in_thread:(rb_BarcodeChainway_getCode128_caller_params*)caller_params;
+(void) getCode128_in_UI_thread:(rb_BarcodeChainway_getCode128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128_caller* our_BarcodeChainway_getCode128_caller = nil;

@implementation rb_BarcodeChainway_getCode128_caller

+(rb_BarcodeChainway_getCode128_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128_caller == nil) {
        our_BarcodeChainway_getCode128_caller = [[rb_BarcodeChainway_getCode128_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128_caller;
}

-(void) command_getCode128:(rb_BarcodeChainway_getCode128_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128:(rb_BarcodeChainway_getCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128_caller getSharedInstance] command_getCode128:caller_params];
}

+(void) getCode128_in_thread:(rb_BarcodeChainway_getCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128:) withObject:caller_params];
}

+(void) getCode128_in_UI_thread:(rb_BarcodeChainway_getCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128_caller getCode128_in_thread:[rb_BarcodeChainway_getCode128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128_caller getCode128:[rb_BarcodeChainway_getCode128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128_caller_params* par = [[[rb_BarcodeChainway_setCode128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128_caller*) getSharedInstance;
+(void) setCode128:(rb_BarcodeChainway_setCode128_caller_params*)caller_params;
+(void) setCode128_in_thread:(rb_BarcodeChainway_setCode128_caller_params*)caller_params;
+(void) setCode128_in_UI_thread:(rb_BarcodeChainway_setCode128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128_caller* our_BarcodeChainway_setCode128_caller = nil;

@implementation rb_BarcodeChainway_setCode128_caller

+(rb_BarcodeChainway_setCode128_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128_caller == nil) {
        our_BarcodeChainway_setCode128_caller = [[rb_BarcodeChainway_setCode128_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128_caller;
}

-(void) command_setCode128:(rb_BarcodeChainway_setCode128_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128:(rb_BarcodeChainway_setCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128_caller getSharedInstance] command_setCode128:caller_params];
}

+(void) setCode128_in_thread:(rb_BarcodeChainway_setCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128:) withObject:caller_params];
}

+(void) setCode128_in_UI_thread:(rb_BarcodeChainway_setCode128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128_caller setCode128_in_thread:[rb_BarcodeChainway_setCode128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128_caller setCode128:[rb_BarcodeChainway_setCode128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128checkIsBtTable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128checkIsBtTable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128checkIsBtTable_caller_params* par = [[[rb_BarcodeChainway_getCode128checkIsBtTable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128checkIsBtTable_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128checkIsBtTable_caller*) getSharedInstance;
+(void) getCode128checkIsBtTable:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params;
+(void) getCode128checkIsBtTable_in_thread:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params;
+(void) getCode128checkIsBtTable_in_UI_thread:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128checkIsBtTable_caller* our_BarcodeChainway_getCode128checkIsBtTable_caller = nil;

@implementation rb_BarcodeChainway_getCode128checkIsBtTable_caller

+(rb_BarcodeChainway_getCode128checkIsBtTable_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128checkIsBtTable_caller == nil) {
        our_BarcodeChainway_getCode128checkIsBtTable_caller = [[rb_BarcodeChainway_getCode128checkIsBtTable_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128checkIsBtTable_caller;
}

-(void) command_getCode128checkIsBtTable:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128checkIsBtTable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128checkIsBtTable:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128checkIsBtTable_caller getSharedInstance] command_getCode128checkIsBtTable:caller_params];
}

+(void) getCode128checkIsBtTable_in_thread:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128checkIsBtTable_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128checkIsBtTable:) withObject:caller_params];
}

+(void) getCode128checkIsBtTable_in_UI_thread:(rb_BarcodeChainway_getCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128checkIsBtTable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128checkIsBtTable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128checkIsBtTable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128checkIsBtTable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128checkIsBtTable_caller getCode128checkIsBtTable_in_thread:[rb_BarcodeChainway_getCode128checkIsBtTable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128checkIsBtTable_caller getCode128checkIsBtTable:[rb_BarcodeChainway_getCode128checkIsBtTable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128checkIsBtTable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128checkIsBtTable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128checkIsBtTable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128checkIsBtTable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128checkIsBtTable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128checkIsBtTable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128checkIsBtTable_caller_params* par = [[[rb_BarcodeChainway_setCode128checkIsBtTable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128checkIsBtTable_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128checkIsBtTable_caller*) getSharedInstance;
+(void) setCode128checkIsBtTable:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params;
+(void) setCode128checkIsBtTable_in_thread:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params;
+(void) setCode128checkIsBtTable_in_UI_thread:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128checkIsBtTable_caller* our_BarcodeChainway_setCode128checkIsBtTable_caller = nil;

@implementation rb_BarcodeChainway_setCode128checkIsBtTable_caller

+(rb_BarcodeChainway_setCode128checkIsBtTable_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128checkIsBtTable_caller == nil) {
        our_BarcodeChainway_setCode128checkIsBtTable_caller = [[rb_BarcodeChainway_setCode128checkIsBtTable_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128checkIsBtTable_caller;
}

-(void) command_setCode128checkIsBtTable:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128checkIsBtTable:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128checkIsBtTable:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128checkIsBtTable_caller getSharedInstance] command_setCode128checkIsBtTable:caller_params];
}

+(void) setCode128checkIsBtTable_in_thread:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128checkIsBtTable_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128checkIsBtTable:) withObject:caller_params];
}

+(void) setCode128checkIsBtTable_in_UI_thread:(rb_BarcodeChainway_setCode128checkIsBtTable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128checkIsBtTable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128checkIsBtTable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128checkIsBtTable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128checkIsBtTable="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128checkIsBtTable_caller setCode128checkIsBtTable_in_thread:[rb_BarcodeChainway_setCode128checkIsBtTable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128checkIsBtTable_caller setCode128checkIsBtTable:[rb_BarcodeChainway_setCode128checkIsBtTable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128checkIsBtTable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128checkIsBtTable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128checkIsBtTable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128checkIsBtTable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128ean128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128ean128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128ean128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128ean128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128ean128_caller_params* par = [[[rb_BarcodeChainway_getCode128ean128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128ean128_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128ean128_caller*) getSharedInstance;
+(void) getCode128ean128:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params;
+(void) getCode128ean128_in_thread:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params;
+(void) getCode128ean128_in_UI_thread:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128ean128_caller* our_BarcodeChainway_getCode128ean128_caller = nil;

@implementation rb_BarcodeChainway_getCode128ean128_caller

+(rb_BarcodeChainway_getCode128ean128_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128ean128_caller == nil) {
        our_BarcodeChainway_getCode128ean128_caller = [[rb_BarcodeChainway_getCode128ean128_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128ean128_caller;
}

-(void) command_getCode128ean128:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128ean128:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128ean128:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128ean128_caller getSharedInstance] command_getCode128ean128:caller_params];
}

+(void) getCode128ean128_in_thread:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128ean128_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128ean128:) withObject:caller_params];
}

+(void) getCode128ean128_in_UI_thread:(rb_BarcodeChainway_getCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128ean128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128ean128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128ean128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128ean128"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128ean128_caller getCode128ean128_in_thread:[rb_BarcodeChainway_getCode128ean128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128ean128_caller getCode128ean128:[rb_BarcodeChainway_getCode128ean128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128ean128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128ean128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128ean128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128ean128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128ean128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128ean128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128ean128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128ean128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128ean128_caller_params* par = [[[rb_BarcodeChainway_setCode128ean128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128ean128_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128ean128_caller*) getSharedInstance;
+(void) setCode128ean128:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params;
+(void) setCode128ean128_in_thread:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params;
+(void) setCode128ean128_in_UI_thread:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128ean128_caller* our_BarcodeChainway_setCode128ean128_caller = nil;

@implementation rb_BarcodeChainway_setCode128ean128_caller

+(rb_BarcodeChainway_setCode128ean128_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128ean128_caller == nil) {
        our_BarcodeChainway_setCode128ean128_caller = [[rb_BarcodeChainway_setCode128ean128_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128ean128_caller;
}

-(void) command_setCode128ean128:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128ean128:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128ean128:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128ean128_caller getSharedInstance] command_setCode128ean128:caller_params];
}

+(void) setCode128ean128_in_thread:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128ean128_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128ean128:) withObject:caller_params];
}

+(void) setCode128ean128_in_UI_thread:(rb_BarcodeChainway_setCode128ean128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128ean128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128ean128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128ean128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128ean128="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128ean128_caller setCode128ean128_in_thread:[rb_BarcodeChainway_setCode128ean128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128ean128_caller setCode128ean128:[rb_BarcodeChainway_setCode128ean128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128ean128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128ean128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128ean128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128ean128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128isbt128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128isbt128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128isbt128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128isbt128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128isbt128_caller_params* par = [[[rb_BarcodeChainway_getCode128isbt128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128isbt128_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128isbt128_caller*) getSharedInstance;
+(void) getCode128isbt128:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params;
+(void) getCode128isbt128_in_thread:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params;
+(void) getCode128isbt128_in_UI_thread:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128isbt128_caller* our_BarcodeChainway_getCode128isbt128_caller = nil;

@implementation rb_BarcodeChainway_getCode128isbt128_caller

+(rb_BarcodeChainway_getCode128isbt128_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128isbt128_caller == nil) {
        our_BarcodeChainway_getCode128isbt128_caller = [[rb_BarcodeChainway_getCode128isbt128_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128isbt128_caller;
}

-(void) command_getCode128isbt128:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128isbt128:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128isbt128:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128_caller getSharedInstance] command_getCode128isbt128:caller_params];
}

+(void) getCode128isbt128_in_thread:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128isbt128:) withObject:caller_params];
}

+(void) getCode128isbt128_in_UI_thread:(rb_BarcodeChainway_getCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128isbt128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128isbt128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128isbt128"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128isbt128_caller getCode128isbt128_in_thread:[rb_BarcodeChainway_getCode128isbt128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128isbt128_caller getCode128isbt128:[rb_BarcodeChainway_getCode128isbt128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128isbt128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128isbt128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128isbt128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128isbt128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128isbt128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128isbt128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128isbt128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128isbt128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128isbt128_caller_params* par = [[[rb_BarcodeChainway_setCode128isbt128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128isbt128_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128isbt128_caller*) getSharedInstance;
+(void) setCode128isbt128:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params;
+(void) setCode128isbt128_in_thread:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params;
+(void) setCode128isbt128_in_UI_thread:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128isbt128_caller* our_BarcodeChainway_setCode128isbt128_caller = nil;

@implementation rb_BarcodeChainway_setCode128isbt128_caller

+(rb_BarcodeChainway_setCode128isbt128_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128isbt128_caller == nil) {
        our_BarcodeChainway_setCode128isbt128_caller = [[rb_BarcodeChainway_setCode128isbt128_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128isbt128_caller;
}

-(void) command_setCode128isbt128:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128isbt128:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128isbt128:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128_caller getSharedInstance] command_setCode128isbt128:caller_params];
}

+(void) setCode128isbt128_in_thread:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128isbt128:) withObject:caller_params];
}

+(void) setCode128isbt128_in_UI_thread:(rb_BarcodeChainway_setCode128isbt128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128isbt128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128isbt128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128isbt128="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128isbt128_caller setCode128isbt128_in_thread:[rb_BarcodeChainway_setCode128isbt128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128isbt128_caller setCode128isbt128:[rb_BarcodeChainway_setCode128isbt128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128isbt128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128isbt128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128isbt128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128isbt128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params* par = [[[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128isbt128ConcatMode_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller*) getSharedInstance;
+(void) getCode128isbt128ConcatMode:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params;
+(void) getCode128isbt128ConcatMode_in_thread:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params;
+(void) getCode128isbt128ConcatMode_in_UI_thread:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128isbt128ConcatMode_caller* our_BarcodeChainway_getCode128isbt128ConcatMode_caller = nil;

@implementation rb_BarcodeChainway_getCode128isbt128ConcatMode_caller

+(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128isbt128ConcatMode_caller == nil) {
        our_BarcodeChainway_getCode128isbt128ConcatMode_caller = [[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128isbt128ConcatMode_caller;
}

-(void) command_getCode128isbt128ConcatMode:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128isbt128ConcatMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128isbt128ConcatMode:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller getSharedInstance] command_getCode128isbt128ConcatMode:caller_params];
}

+(void) getCode128isbt128ConcatMode_in_thread:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128isbt128ConcatMode:) withObject:caller_params];
}

+(void) getCode128isbt128ConcatMode_in_UI_thread:(rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128isbt128ConcatMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128isbt128ConcatMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128isbt128ConcatMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128isbt128ConcatMode_caller getCode128isbt128ConcatMode_in_thread:[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128isbt128ConcatMode_caller getCode128isbt128ConcatMode:[rb_BarcodeChainway_getCode128isbt128ConcatMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128isbt128ConcatMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128isbt128ConcatMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128isbt128ConcatMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128isbt128ConcatMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params* par = [[[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128isbt128ConcatMode_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller*) getSharedInstance;
+(void) setCode128isbt128ConcatMode:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params;
+(void) setCode128isbt128ConcatMode_in_thread:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params;
+(void) setCode128isbt128ConcatMode_in_UI_thread:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128isbt128ConcatMode_caller* our_BarcodeChainway_setCode128isbt128ConcatMode_caller = nil;

@implementation rb_BarcodeChainway_setCode128isbt128ConcatMode_caller

+(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128isbt128ConcatMode_caller == nil) {
        our_BarcodeChainway_setCode128isbt128ConcatMode_caller = [[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128isbt128ConcatMode_caller;
}

-(void) command_setCode128isbt128ConcatMode:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128isbt128ConcatMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128isbt128ConcatMode:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller getSharedInstance] command_setCode128isbt128ConcatMode:caller_params];
}

+(void) setCode128isbt128ConcatMode_in_thread:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128isbt128ConcatMode:) withObject:caller_params];
}

+(void) setCode128isbt128ConcatMode_in_UI_thread:(rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128isbt128ConcatMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128isbt128ConcatMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128isbt128ConcatMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128isbt128ConcatMode_caller setCode128isbt128ConcatMode_in_thread:[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128isbt128ConcatMode_caller setCode128isbt128ConcatMode:[rb_BarcodeChainway_setCode128isbt128ConcatMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128isbt128ConcatMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128isbt128ConcatMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128isbt128ConcatMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128isbt128ConcatMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128maxLength_caller_params* par = [[[rb_BarcodeChainway_getCode128maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128maxLength_caller*) getSharedInstance;
+(void) getCode128maxLength:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params;
+(void) getCode128maxLength_in_thread:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params;
+(void) getCode128maxLength_in_UI_thread:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128maxLength_caller* our_BarcodeChainway_getCode128maxLength_caller = nil;

@implementation rb_BarcodeChainway_getCode128maxLength_caller

+(rb_BarcodeChainway_getCode128maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128maxLength_caller == nil) {
        our_BarcodeChainway_getCode128maxLength_caller = [[rb_BarcodeChainway_getCode128maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128maxLength_caller;
}

-(void) command_getCode128maxLength:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128maxLength:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128maxLength_caller getSharedInstance] command_getCode128maxLength:caller_params];
}

+(void) getCode128maxLength_in_thread:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128maxLength:) withObject:caller_params];
}

+(void) getCode128maxLength_in_UI_thread:(rb_BarcodeChainway_getCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128maxLength_caller getCode128maxLength_in_thread:[rb_BarcodeChainway_getCode128maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128maxLength_caller getCode128maxLength:[rb_BarcodeChainway_getCode128maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128maxLength_caller_params* par = [[[rb_BarcodeChainway_setCode128maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128maxLength_caller*) getSharedInstance;
+(void) setCode128maxLength:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params;
+(void) setCode128maxLength_in_thread:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params;
+(void) setCode128maxLength_in_UI_thread:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128maxLength_caller* our_BarcodeChainway_setCode128maxLength_caller = nil;

@implementation rb_BarcodeChainway_setCode128maxLength_caller

+(rb_BarcodeChainway_setCode128maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128maxLength_caller == nil) {
        our_BarcodeChainway_setCode128maxLength_caller = [[rb_BarcodeChainway_setCode128maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128maxLength_caller;
}

-(void) command_setCode128maxLength:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128maxLength:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128maxLength_caller getSharedInstance] command_setCode128maxLength:caller_params];
}

+(void) setCode128maxLength_in_thread:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128maxLength:) withObject:caller_params];
}

+(void) setCode128maxLength_in_UI_thread:(rb_BarcodeChainway_setCode128maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128maxLength_caller setCode128maxLength_in_thread:[rb_BarcodeChainway_setCode128maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128maxLength_caller setCode128maxLength:[rb_BarcodeChainway_setCode128maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128minLength_caller_params* par = [[[rb_BarcodeChainway_getCode128minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128minLength_caller*) getSharedInstance;
+(void) getCode128minLength:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params;
+(void) getCode128minLength_in_thread:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params;
+(void) getCode128minLength_in_UI_thread:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128minLength_caller* our_BarcodeChainway_getCode128minLength_caller = nil;

@implementation rb_BarcodeChainway_getCode128minLength_caller

+(rb_BarcodeChainway_getCode128minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128minLength_caller == nil) {
        our_BarcodeChainway_getCode128minLength_caller = [[rb_BarcodeChainway_getCode128minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128minLength_caller;
}

-(void) command_getCode128minLength:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128minLength:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128minLength_caller getSharedInstance] command_getCode128minLength:caller_params];
}

+(void) getCode128minLength_in_thread:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128minLength:) withObject:caller_params];
}

+(void) getCode128minLength_in_UI_thread:(rb_BarcodeChainway_getCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128minLength_caller getCode128minLength_in_thread:[rb_BarcodeChainway_getCode128minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128minLength_caller getCode128minLength:[rb_BarcodeChainway_getCode128minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128minLength_caller_params* par = [[[rb_BarcodeChainway_setCode128minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128minLength_caller*) getSharedInstance;
+(void) setCode128minLength:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params;
+(void) setCode128minLength_in_thread:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params;
+(void) setCode128minLength_in_UI_thread:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128minLength_caller* our_BarcodeChainway_setCode128minLength_caller = nil;

@implementation rb_BarcodeChainway_setCode128minLength_caller

+(rb_BarcodeChainway_setCode128minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128minLength_caller == nil) {
        our_BarcodeChainway_setCode128minLength_caller = [[rb_BarcodeChainway_setCode128minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128minLength_caller;
}

-(void) command_setCode128minLength:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128minLength:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128minLength_caller getSharedInstance] command_setCode128minLength:caller_params];
}

+(void) setCode128minLength_in_thread:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128minLength:) withObject:caller_params];
}

+(void) setCode128minLength_in_UI_thread:(rb_BarcodeChainway_setCode128minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128minLength_caller setCode128minLength_in_thread:[rb_BarcodeChainway_setCode128minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128minLength_caller setCode128minLength:[rb_BarcodeChainway_setCode128minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128other128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128other128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128other128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128other128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128other128_caller_params* par = [[[rb_BarcodeChainway_getCode128other128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128other128_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128other128_caller*) getSharedInstance;
+(void) getCode128other128:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params;
+(void) getCode128other128_in_thread:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params;
+(void) getCode128other128_in_UI_thread:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128other128_caller* our_BarcodeChainway_getCode128other128_caller = nil;

@implementation rb_BarcodeChainway_getCode128other128_caller

+(rb_BarcodeChainway_getCode128other128_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128other128_caller == nil) {
        our_BarcodeChainway_getCode128other128_caller = [[rb_BarcodeChainway_getCode128other128_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128other128_caller;
}

-(void) command_getCode128other128:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128other128:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128other128:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128other128_caller getSharedInstance] command_getCode128other128:caller_params];
}

+(void) getCode128other128_in_thread:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128other128_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128other128:) withObject:caller_params];
}

+(void) getCode128other128_in_UI_thread:(rb_BarcodeChainway_getCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128other128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128other128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128other128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128other128"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128other128_caller getCode128other128_in_thread:[rb_BarcodeChainway_getCode128other128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128other128_caller getCode128other128:[rb_BarcodeChainway_getCode128other128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128other128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128other128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128other128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128other128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128other128_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128other128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128other128_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128other128_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128other128_caller_params* par = [[[rb_BarcodeChainway_setCode128other128_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128other128_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128other128_caller*) getSharedInstance;
+(void) setCode128other128:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params;
+(void) setCode128other128_in_thread:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params;
+(void) setCode128other128_in_UI_thread:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128other128_caller* our_BarcodeChainway_setCode128other128_caller = nil;

@implementation rb_BarcodeChainway_setCode128other128_caller

+(rb_BarcodeChainway_setCode128other128_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128other128_caller == nil) {
        our_BarcodeChainway_setCode128other128_caller = [[rb_BarcodeChainway_setCode128other128_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128other128_caller;
}

-(void) command_setCode128other128:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128other128:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128other128:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128other128_caller getSharedInstance] command_setCode128other128:caller_params];
}

+(void) setCode128other128_in_thread:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128other128_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128other128:) withObject:caller_params];
}

+(void) setCode128other128_in_UI_thread:(rb_BarcodeChainway_setCode128other128_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128other128_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128other128:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128other128_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128other128="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128other128_caller setCode128other128_in_thread:[rb_BarcodeChainway_setCode128other128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128other128_caller setCode128other128:[rb_BarcodeChainway_setCode128other128_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128other128(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128other128_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128other128(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128other128_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128redundancy_caller_params* par = [[[rb_BarcodeChainway_getCode128redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128redundancy_caller*) getSharedInstance;
+(void) getCode128redundancy:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params;
+(void) getCode128redundancy_in_thread:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params;
+(void) getCode128redundancy_in_UI_thread:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128redundancy_caller* our_BarcodeChainway_getCode128redundancy_caller = nil;

@implementation rb_BarcodeChainway_getCode128redundancy_caller

+(rb_BarcodeChainway_getCode128redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128redundancy_caller == nil) {
        our_BarcodeChainway_getCode128redundancy_caller = [[rb_BarcodeChainway_getCode128redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128redundancy_caller;
}

-(void) command_getCode128redundancy:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128redundancy:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128redundancy_caller getSharedInstance] command_getCode128redundancy:caller_params];
}

+(void) getCode128redundancy_in_thread:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128redundancy:) withObject:caller_params];
}

+(void) getCode128redundancy_in_UI_thread:(rb_BarcodeChainway_getCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128redundancy_caller getCode128redundancy_in_thread:[rb_BarcodeChainway_getCode128redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128redundancy_caller getCode128redundancy:[rb_BarcodeChainway_getCode128redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128redundancy_caller_params* par = [[[rb_BarcodeChainway_setCode128redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128redundancy_caller*) getSharedInstance;
+(void) setCode128redundancy:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params;
+(void) setCode128redundancy_in_thread:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params;
+(void) setCode128redundancy_in_UI_thread:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128redundancy_caller* our_BarcodeChainway_setCode128redundancy_caller = nil;

@implementation rb_BarcodeChainway_setCode128redundancy_caller

+(rb_BarcodeChainway_setCode128redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128redundancy_caller == nil) {
        our_BarcodeChainway_setCode128redundancy_caller = [[rb_BarcodeChainway_setCode128redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128redundancy_caller;
}

-(void) command_setCode128redundancy:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128redundancy:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128redundancy_caller getSharedInstance] command_setCode128redundancy:caller_params];
}

+(void) setCode128redundancy_in_thread:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128redundancy:) withObject:caller_params];
}

+(void) setCode128redundancy_in_UI_thread:(rb_BarcodeChainway_setCode128redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128redundancy_caller setCode128redundancy_in_thread:[rb_BarcodeChainway_setCode128redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128redundancy_caller setCode128redundancy:[rb_BarcodeChainway_setCode128redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode128securityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode128securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode128securityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode128securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode128securityLevel_caller_params* par = [[[rb_BarcodeChainway_getCode128securityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode128securityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_getCode128securityLevel_caller*) getSharedInstance;
+(void) getCode128securityLevel:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params;
+(void) getCode128securityLevel_in_thread:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params;
+(void) getCode128securityLevel_in_UI_thread:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode128securityLevel_caller* our_BarcodeChainway_getCode128securityLevel_caller = nil;

@implementation rb_BarcodeChainway_getCode128securityLevel_caller

+(rb_BarcodeChainway_getCode128securityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode128securityLevel_caller == nil) {
        our_BarcodeChainway_getCode128securityLevel_caller = [[rb_BarcodeChainway_getCode128securityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_getCode128securityLevel_caller;
}

-(void) command_getCode128securityLevel:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode128securityLevel:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode128securityLevel:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128securityLevel_caller getSharedInstance] command_getCode128securityLevel:caller_params];
}

+(void) getCode128securityLevel_in_thread:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128securityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode128securityLevel:) withObject:caller_params];
}

+(void) getCode128securityLevel_in_UI_thread:(rb_BarcodeChainway_getCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode128securityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode128securityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode128securityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128securityLevel"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode128securityLevel_caller getCode128securityLevel_in_thread:[rb_BarcodeChainway_getCode128securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode128securityLevel_caller getCode128securityLevel:[rb_BarcodeChainway_getCode128securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode128securityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode128securityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode128securityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode128securityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode128securityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode128securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode128securityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode128securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode128securityLevel_caller_params* par = [[[rb_BarcodeChainway_setCode128securityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode128securityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_setCode128securityLevel_caller*) getSharedInstance;
+(void) setCode128securityLevel:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params;
+(void) setCode128securityLevel_in_thread:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params;
+(void) setCode128securityLevel_in_UI_thread:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode128securityLevel_caller* our_BarcodeChainway_setCode128securityLevel_caller = nil;

@implementation rb_BarcodeChainway_setCode128securityLevel_caller

+(rb_BarcodeChainway_setCode128securityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode128securityLevel_caller == nil) {
        our_BarcodeChainway_setCode128securityLevel_caller = [[rb_BarcodeChainway_setCode128securityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_setCode128securityLevel_caller;
}

-(void) command_setCode128securityLevel:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode128securityLevel:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode128securityLevel:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128securityLevel_caller getSharedInstance] command_setCode128securityLevel:caller_params];
}

+(void) setCode128securityLevel_in_thread:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128securityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode128securityLevel:) withObject:caller_params];
}

+(void) setCode128securityLevel_in_UI_thread:(rb_BarcodeChainway_setCode128securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode128securityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode128securityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode128securityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code128securityLevel="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode128securityLevel_caller setCode128securityLevel_in_thread:[rb_BarcodeChainway_setCode128securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode128securityLevel_caller setCode128securityLevel:[rb_BarcodeChainway_setCode128securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode128securityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode128securityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode128securityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode128securityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCompositeAb_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCompositeAb_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCompositeAb_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCompositeAb_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCompositeAb_caller_params* par = [[[rb_BarcodeChainway_getCompositeAb_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCompositeAb_caller : NSObject {

}
+(rb_BarcodeChainway_getCompositeAb_caller*) getSharedInstance;
+(void) getCompositeAb:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params;
+(void) getCompositeAb_in_thread:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params;
+(void) getCompositeAb_in_UI_thread:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCompositeAb_caller* our_BarcodeChainway_getCompositeAb_caller = nil;

@implementation rb_BarcodeChainway_getCompositeAb_caller

+(rb_BarcodeChainway_getCompositeAb_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCompositeAb_caller == nil) {
        our_BarcodeChainway_getCompositeAb_caller = [[rb_BarcodeChainway_getCompositeAb_caller alloc] init];
    }
    return our_BarcodeChainway_getCompositeAb_caller;
}

-(void) command_getCompositeAb:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCompositeAb:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCompositeAb:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAb_caller getSharedInstance] command_getCompositeAb:caller_params];
}

+(void) getCompositeAb_in_thread:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAb_caller getSharedInstance] performSelectorInBackground:@selector(command_getCompositeAb:) withObject:caller_params];
}

+(void) getCompositeAb_in_UI_thread:(rb_BarcodeChainway_getCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAb_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCompositeAb:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCompositeAb_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAb"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCompositeAb_caller getCompositeAb_in_thread:[rb_BarcodeChainway_getCompositeAb_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCompositeAb_caller getCompositeAb:[rb_BarcodeChainway_getCompositeAb_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCompositeAb(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCompositeAb_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCompositeAb(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCompositeAb_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCompositeAb_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCompositeAb_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCompositeAb_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCompositeAb_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCompositeAb_caller_params* par = [[[rb_BarcodeChainway_setCompositeAb_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCompositeAb_caller : NSObject {

}
+(rb_BarcodeChainway_setCompositeAb_caller*) getSharedInstance;
+(void) setCompositeAb:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params;
+(void) setCompositeAb_in_thread:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params;
+(void) setCompositeAb_in_UI_thread:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCompositeAb_caller* our_BarcodeChainway_setCompositeAb_caller = nil;

@implementation rb_BarcodeChainway_setCompositeAb_caller

+(rb_BarcodeChainway_setCompositeAb_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCompositeAb_caller == nil) {
        our_BarcodeChainway_setCompositeAb_caller = [[rb_BarcodeChainway_setCompositeAb_caller alloc] init];
    }
    return our_BarcodeChainway_setCompositeAb_caller;
}

-(void) command_setCompositeAb:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCompositeAb:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCompositeAb:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAb_caller getSharedInstance] command_setCompositeAb:caller_params];
}

+(void) setCompositeAb_in_thread:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAb_caller getSharedInstance] performSelectorInBackground:@selector(command_setCompositeAb:) withObject:caller_params];
}

+(void) setCompositeAb_in_UI_thread:(rb_BarcodeChainway_setCompositeAb_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAb_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCompositeAb:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCompositeAb_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAb="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCompositeAb_caller setCompositeAb_in_thread:[rb_BarcodeChainway_setCompositeAb_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCompositeAb_caller setCompositeAb:[rb_BarcodeChainway_setCompositeAb_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCompositeAb(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCompositeAb_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCompositeAb(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCompositeAb_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params* par = [[[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCompositeAbUccLinkMode_caller : NSObject {

}
+(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller*) getSharedInstance;
+(void) getCompositeAbUccLinkMode:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params;
+(void) getCompositeAbUccLinkMode_in_thread:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params;
+(void) getCompositeAbUccLinkMode_in_UI_thread:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCompositeAbUccLinkMode_caller* our_BarcodeChainway_getCompositeAbUccLinkMode_caller = nil;

@implementation rb_BarcodeChainway_getCompositeAbUccLinkMode_caller

+(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCompositeAbUccLinkMode_caller == nil) {
        our_BarcodeChainway_getCompositeAbUccLinkMode_caller = [[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller alloc] init];
    }
    return our_BarcodeChainway_getCompositeAbUccLinkMode_caller;
}

-(void) command_getCompositeAbUccLinkMode:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCompositeAbUccLinkMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCompositeAbUccLinkMode:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller getSharedInstance] command_getCompositeAbUccLinkMode:caller_params];
}

+(void) getCompositeAbUccLinkMode_in_thread:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getCompositeAbUccLinkMode:) withObject:caller_params];
}

+(void) getCompositeAbUccLinkMode_in_UI_thread:(rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCompositeAbUccLinkMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCompositeAbUccLinkMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAbUccLinkMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCompositeAbUccLinkMode_caller getCompositeAbUccLinkMode_in_thread:[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCompositeAbUccLinkMode_caller getCompositeAbUccLinkMode:[rb_BarcodeChainway_getCompositeAbUccLinkMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCompositeAbUccLinkMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCompositeAbUccLinkMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCompositeAbUccLinkMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCompositeAbUccLinkMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params* par = [[[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCompositeAbUccLinkMode_caller : NSObject {

}
+(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller*) getSharedInstance;
+(void) setCompositeAbUccLinkMode:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params;
+(void) setCompositeAbUccLinkMode_in_thread:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params;
+(void) setCompositeAbUccLinkMode_in_UI_thread:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCompositeAbUccLinkMode_caller* our_BarcodeChainway_setCompositeAbUccLinkMode_caller = nil;

@implementation rb_BarcodeChainway_setCompositeAbUccLinkMode_caller

+(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCompositeAbUccLinkMode_caller == nil) {
        our_BarcodeChainway_setCompositeAbUccLinkMode_caller = [[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller alloc] init];
    }
    return our_BarcodeChainway_setCompositeAbUccLinkMode_caller;
}

-(void) command_setCompositeAbUccLinkMode:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCompositeAbUccLinkMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCompositeAbUccLinkMode:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller getSharedInstance] command_setCompositeAbUccLinkMode:caller_params];
}

+(void) setCompositeAbUccLinkMode_in_thread:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setCompositeAbUccLinkMode:) withObject:caller_params];
}

+(void) setCompositeAbUccLinkMode_in_UI_thread:(rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCompositeAbUccLinkMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCompositeAbUccLinkMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAbUccLinkMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCompositeAbUccLinkMode_caller setCompositeAbUccLinkMode_in_thread:[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCompositeAbUccLinkMode_caller setCompositeAbUccLinkMode:[rb_BarcodeChainway_setCompositeAbUccLinkMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCompositeAbUccLinkMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCompositeAbUccLinkMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCompositeAbUccLinkMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCompositeAbUccLinkMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params* par = [[[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller : NSObject {

}
+(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller*) getSharedInstance;
+(void) getCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;
+(void) getCompositeAbUseUpcPreambleCheckDigitRules_in_thread:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;
+(void) getCompositeAbUseUpcPreambleCheckDigitRules_in_UI_thread:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller* our_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller = nil;

@implementation rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller

+(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller == nil) {
        our_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller = [[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller alloc] init];
    }
    return our_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller;
}

-(void) command_getCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCompositeAbUseUpcPreambleCheckDigitRules:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] command_getCompositeAbUseUpcPreambleCheckDigitRules:caller_params];
}

+(void) getCompositeAbUseUpcPreambleCheckDigitRules_in_thread:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] performSelectorInBackground:@selector(command_getCompositeAbUseUpcPreambleCheckDigitRules:) withObject:caller_params];
}

+(void) getCompositeAbUseUpcPreambleCheckDigitRules_in_UI_thread:(rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCompositeAbUseUpcPreambleCheckDigitRules:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAbUseUpcPreambleCheckDigitRules"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller getCompositeAbUseUpcPreambleCheckDigitRules_in_thread:[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller getCompositeAbUseUpcPreambleCheckDigitRules:[rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCompositeAbUseUpcPreambleCheckDigitRules(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCompositeAbUseUpcPreambleCheckDigitRules_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params* par = [[[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller : NSObject {

}
+(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller*) getSharedInstance;
+(void) setCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;
+(void) setCompositeAbUseUpcPreambleCheckDigitRules_in_thread:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;
+(void) setCompositeAbUseUpcPreambleCheckDigitRules_in_UI_thread:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller* our_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller = nil;

@implementation rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller

+(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller == nil) {
        our_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller = [[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller alloc] init];
    }
    return our_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller;
}

-(void) command_setCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCompositeAbUseUpcPreambleCheckDigitRules:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCompositeAbUseUpcPreambleCheckDigitRules:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] command_setCompositeAbUseUpcPreambleCheckDigitRules:caller_params];
}

+(void) setCompositeAbUseUpcPreambleCheckDigitRules_in_thread:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] performSelectorInBackground:@selector(command_setCompositeAbUseUpcPreambleCheckDigitRules:) withObject:caller_params];
}

+(void) setCompositeAbUseUpcPreambleCheckDigitRules_in_UI_thread:(rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCompositeAbUseUpcPreambleCheckDigitRules:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeAbUseUpcPreambleCheckDigitRules="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller setCompositeAbUseUpcPreambleCheckDigitRules_in_thread:[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller setCompositeAbUseUpcPreambleCheckDigitRules:[rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCompositeAbUseUpcPreambleCheckDigitRules(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCompositeAbUseUpcPreambleCheckDigitRules_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCompositeC_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCompositeC_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCompositeC_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCompositeC_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCompositeC_caller_params* par = [[[rb_BarcodeChainway_getCompositeC_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCompositeC_caller : NSObject {

}
+(rb_BarcodeChainway_getCompositeC_caller*) getSharedInstance;
+(void) getCompositeC:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params;
+(void) getCompositeC_in_thread:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params;
+(void) getCompositeC_in_UI_thread:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCompositeC_caller* our_BarcodeChainway_getCompositeC_caller = nil;

@implementation rb_BarcodeChainway_getCompositeC_caller

+(rb_BarcodeChainway_getCompositeC_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCompositeC_caller == nil) {
        our_BarcodeChainway_getCompositeC_caller = [[rb_BarcodeChainway_getCompositeC_caller alloc] init];
    }
    return our_BarcodeChainway_getCompositeC_caller;
}

-(void) command_getCompositeC:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCompositeC:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCompositeC:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeC_caller getSharedInstance] command_getCompositeC:caller_params];
}

+(void) getCompositeC_in_thread:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeC_caller getSharedInstance] performSelectorInBackground:@selector(command_getCompositeC:) withObject:caller_params];
}

+(void) getCompositeC_in_UI_thread:(rb_BarcodeChainway_getCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCompositeC_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCompositeC:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCompositeC_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeC"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCompositeC_caller getCompositeC_in_thread:[rb_BarcodeChainway_getCompositeC_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCompositeC_caller getCompositeC:[rb_BarcodeChainway_getCompositeC_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCompositeC(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCompositeC_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCompositeC(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCompositeC_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCompositeC_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCompositeC_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCompositeC_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCompositeC_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCompositeC_caller_params* par = [[[rb_BarcodeChainway_setCompositeC_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCompositeC_caller : NSObject {

}
+(rb_BarcodeChainway_setCompositeC_caller*) getSharedInstance;
+(void) setCompositeC:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params;
+(void) setCompositeC_in_thread:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params;
+(void) setCompositeC_in_UI_thread:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCompositeC_caller* our_BarcodeChainway_setCompositeC_caller = nil;

@implementation rb_BarcodeChainway_setCompositeC_caller

+(rb_BarcodeChainway_setCompositeC_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCompositeC_caller == nil) {
        our_BarcodeChainway_setCompositeC_caller = [[rb_BarcodeChainway_setCompositeC_caller alloc] init];
    }
    return our_BarcodeChainway_setCompositeC_caller;
}

-(void) command_setCompositeC:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCompositeC:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCompositeC:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeC_caller getSharedInstance] command_setCompositeC:caller_params];
}

+(void) setCompositeC_in_thread:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeC_caller getSharedInstance] performSelectorInBackground:@selector(command_setCompositeC:) withObject:caller_params];
}

+(void) setCompositeC_in_UI_thread:(rb_BarcodeChainway_setCompositeC_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCompositeC_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCompositeC:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCompositeC_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::compositeC="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCompositeC_caller setCompositeC_in_thread:[rb_BarcodeChainway_setCompositeC_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCompositeC_caller setCompositeC:[rb_BarcodeChainway_setCompositeC_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCompositeC(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCompositeC_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCompositeC(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCompositeC_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39_caller_params* par = [[[rb_BarcodeChainway_getCode39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39_caller*) getSharedInstance;
+(void) getCode39:(rb_BarcodeChainway_getCode39_caller_params*)caller_params;
+(void) getCode39_in_thread:(rb_BarcodeChainway_getCode39_caller_params*)caller_params;
+(void) getCode39_in_UI_thread:(rb_BarcodeChainway_getCode39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39_caller* our_BarcodeChainway_getCode39_caller = nil;

@implementation rb_BarcodeChainway_getCode39_caller

+(rb_BarcodeChainway_getCode39_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39_caller == nil) {
        our_BarcodeChainway_getCode39_caller = [[rb_BarcodeChainway_getCode39_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39_caller;
}

-(void) command_getCode39:(rb_BarcodeChainway_getCode39_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39:(rb_BarcodeChainway_getCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39_caller getSharedInstance] command_getCode39:caller_params];
}

+(void) getCode39_in_thread:(rb_BarcodeChainway_getCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39:) withObject:caller_params];
}

+(void) getCode39_in_UI_thread:(rb_BarcodeChainway_getCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39_caller getCode39_in_thread:[rb_BarcodeChainway_getCode39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39_caller getCode39:[rb_BarcodeChainway_getCode39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39_caller_params* par = [[[rb_BarcodeChainway_setCode39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39_caller*) getSharedInstance;
+(void) setCode39:(rb_BarcodeChainway_setCode39_caller_params*)caller_params;
+(void) setCode39_in_thread:(rb_BarcodeChainway_setCode39_caller_params*)caller_params;
+(void) setCode39_in_UI_thread:(rb_BarcodeChainway_setCode39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39_caller* our_BarcodeChainway_setCode39_caller = nil;

@implementation rb_BarcodeChainway_setCode39_caller

+(rb_BarcodeChainway_setCode39_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39_caller == nil) {
        our_BarcodeChainway_setCode39_caller = [[rb_BarcodeChainway_setCode39_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39_caller;
}

-(void) command_setCode39:(rb_BarcodeChainway_setCode39_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39:(rb_BarcodeChainway_setCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39_caller getSharedInstance] command_setCode39:caller_params];
}

+(void) setCode39_in_thread:(rb_BarcodeChainway_setCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39:) withObject:caller_params];
}

+(void) setCode39_in_UI_thread:(rb_BarcodeChainway_setCode39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39_caller setCode39_in_thread:[rb_BarcodeChainway_setCode39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39_caller setCode39:[rb_BarcodeChainway_setCode39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39code32Prefix_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39code32Prefix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39code32Prefix_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39code32Prefix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39code32Prefix_caller_params* par = [[[rb_BarcodeChainway_getCode39code32Prefix_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39code32Prefix_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39code32Prefix_caller*) getSharedInstance;
+(void) getCode39code32Prefix:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params;
+(void) getCode39code32Prefix_in_thread:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params;
+(void) getCode39code32Prefix_in_UI_thread:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39code32Prefix_caller* our_BarcodeChainway_getCode39code32Prefix_caller = nil;

@implementation rb_BarcodeChainway_getCode39code32Prefix_caller

+(rb_BarcodeChainway_getCode39code32Prefix_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39code32Prefix_caller == nil) {
        our_BarcodeChainway_getCode39code32Prefix_caller = [[rb_BarcodeChainway_getCode39code32Prefix_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39code32Prefix_caller;
}

-(void) command_getCode39code32Prefix:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39code32Prefix:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39code32Prefix:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39code32Prefix_caller getSharedInstance] command_getCode39code32Prefix:caller_params];
}

+(void) getCode39code32Prefix_in_thread:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39code32Prefix_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39code32Prefix:) withObject:caller_params];
}

+(void) getCode39code32Prefix_in_UI_thread:(rb_BarcodeChainway_getCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39code32Prefix_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39code32Prefix:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39code32Prefix_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39code32Prefix"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39code32Prefix_caller getCode39code32Prefix_in_thread:[rb_BarcodeChainway_getCode39code32Prefix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39code32Prefix_caller getCode39code32Prefix:[rb_BarcodeChainway_getCode39code32Prefix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39code32Prefix(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39code32Prefix_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39code32Prefix(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39code32Prefix_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39code32Prefix_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39code32Prefix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39code32Prefix_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39code32Prefix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39code32Prefix_caller_params* par = [[[rb_BarcodeChainway_setCode39code32Prefix_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39code32Prefix_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39code32Prefix_caller*) getSharedInstance;
+(void) setCode39code32Prefix:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params;
+(void) setCode39code32Prefix_in_thread:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params;
+(void) setCode39code32Prefix_in_UI_thread:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39code32Prefix_caller* our_BarcodeChainway_setCode39code32Prefix_caller = nil;

@implementation rb_BarcodeChainway_setCode39code32Prefix_caller

+(rb_BarcodeChainway_setCode39code32Prefix_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39code32Prefix_caller == nil) {
        our_BarcodeChainway_setCode39code32Prefix_caller = [[rb_BarcodeChainway_setCode39code32Prefix_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39code32Prefix_caller;
}

-(void) command_setCode39code32Prefix:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39code32Prefix:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39code32Prefix:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39code32Prefix_caller getSharedInstance] command_setCode39code32Prefix:caller_params];
}

+(void) setCode39code32Prefix_in_thread:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39code32Prefix_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39code32Prefix:) withObject:caller_params];
}

+(void) setCode39code32Prefix_in_UI_thread:(rb_BarcodeChainway_setCode39code32Prefix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39code32Prefix_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39code32Prefix:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39code32Prefix_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39code32Prefix="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39code32Prefix_caller setCode39code32Prefix_in_thread:[rb_BarcodeChainway_setCode39code32Prefix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39code32Prefix_caller setCode39code32Prefix:[rb_BarcodeChainway_setCode39code32Prefix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39code32Prefix(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39code32Prefix_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39code32Prefix(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39code32Prefix_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39convertToCode32_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39convertToCode32_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39convertToCode32_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39convertToCode32_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39convertToCode32_caller_params* par = [[[rb_BarcodeChainway_getCode39convertToCode32_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39convertToCode32_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39convertToCode32_caller*) getSharedInstance;
+(void) getCode39convertToCode32:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params;
+(void) getCode39convertToCode32_in_thread:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params;
+(void) getCode39convertToCode32_in_UI_thread:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39convertToCode32_caller* our_BarcodeChainway_getCode39convertToCode32_caller = nil;

@implementation rb_BarcodeChainway_getCode39convertToCode32_caller

+(rb_BarcodeChainway_getCode39convertToCode32_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39convertToCode32_caller == nil) {
        our_BarcodeChainway_getCode39convertToCode32_caller = [[rb_BarcodeChainway_getCode39convertToCode32_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39convertToCode32_caller;
}

-(void) command_getCode39convertToCode32:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39convertToCode32:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39convertToCode32:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39convertToCode32_caller getSharedInstance] command_getCode39convertToCode32:caller_params];
}

+(void) getCode39convertToCode32_in_thread:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39convertToCode32_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39convertToCode32:) withObject:caller_params];
}

+(void) getCode39convertToCode32_in_UI_thread:(rb_BarcodeChainway_getCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39convertToCode32_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39convertToCode32:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39convertToCode32_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39convertToCode32"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39convertToCode32_caller getCode39convertToCode32_in_thread:[rb_BarcodeChainway_getCode39convertToCode32_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39convertToCode32_caller getCode39convertToCode32:[rb_BarcodeChainway_getCode39convertToCode32_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39convertToCode32(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39convertToCode32_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39convertToCode32(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39convertToCode32_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39convertToCode32_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39convertToCode32_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39convertToCode32_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39convertToCode32_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39convertToCode32_caller_params* par = [[[rb_BarcodeChainway_setCode39convertToCode32_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39convertToCode32_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39convertToCode32_caller*) getSharedInstance;
+(void) setCode39convertToCode32:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params;
+(void) setCode39convertToCode32_in_thread:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params;
+(void) setCode39convertToCode32_in_UI_thread:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39convertToCode32_caller* our_BarcodeChainway_setCode39convertToCode32_caller = nil;

@implementation rb_BarcodeChainway_setCode39convertToCode32_caller

+(rb_BarcodeChainway_setCode39convertToCode32_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39convertToCode32_caller == nil) {
        our_BarcodeChainway_setCode39convertToCode32_caller = [[rb_BarcodeChainway_setCode39convertToCode32_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39convertToCode32_caller;
}

-(void) command_setCode39convertToCode32:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39convertToCode32:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39convertToCode32:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39convertToCode32_caller getSharedInstance] command_setCode39convertToCode32:caller_params];
}

+(void) setCode39convertToCode32_in_thread:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39convertToCode32_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39convertToCode32:) withObject:caller_params];
}

+(void) setCode39convertToCode32_in_UI_thread:(rb_BarcodeChainway_setCode39convertToCode32_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39convertToCode32_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39convertToCode32:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39convertToCode32_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39convertToCode32="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39convertToCode32_caller setCode39convertToCode32_in_thread:[rb_BarcodeChainway_setCode39convertToCode32_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39convertToCode32_caller setCode39convertToCode32:[rb_BarcodeChainway_setCode39convertToCode32_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39convertToCode32(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39convertToCode32_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39convertToCode32(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39convertToCode32_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39fullAscii_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39fullAscii_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39fullAscii_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39fullAscii_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39fullAscii_caller_params* par = [[[rb_BarcodeChainway_getCode39fullAscii_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39fullAscii_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39fullAscii_caller*) getSharedInstance;
+(void) getCode39fullAscii:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params;
+(void) getCode39fullAscii_in_thread:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params;
+(void) getCode39fullAscii_in_UI_thread:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39fullAscii_caller* our_BarcodeChainway_getCode39fullAscii_caller = nil;

@implementation rb_BarcodeChainway_getCode39fullAscii_caller

+(rb_BarcodeChainway_getCode39fullAscii_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39fullAscii_caller == nil) {
        our_BarcodeChainway_getCode39fullAscii_caller = [[rb_BarcodeChainway_getCode39fullAscii_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39fullAscii_caller;
}

-(void) command_getCode39fullAscii:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39fullAscii:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39fullAscii:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39fullAscii_caller getSharedInstance] command_getCode39fullAscii:caller_params];
}

+(void) getCode39fullAscii_in_thread:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39fullAscii_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39fullAscii:) withObject:caller_params];
}

+(void) getCode39fullAscii_in_UI_thread:(rb_BarcodeChainway_getCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39fullAscii_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39fullAscii:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39fullAscii_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39fullAscii"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39fullAscii_caller getCode39fullAscii_in_thread:[rb_BarcodeChainway_getCode39fullAscii_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39fullAscii_caller getCode39fullAscii:[rb_BarcodeChainway_getCode39fullAscii_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39fullAscii(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39fullAscii_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39fullAscii(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39fullAscii_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39fullAscii_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39fullAscii_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39fullAscii_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39fullAscii_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39fullAscii_caller_params* par = [[[rb_BarcodeChainway_setCode39fullAscii_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39fullAscii_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39fullAscii_caller*) getSharedInstance;
+(void) setCode39fullAscii:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params;
+(void) setCode39fullAscii_in_thread:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params;
+(void) setCode39fullAscii_in_UI_thread:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39fullAscii_caller* our_BarcodeChainway_setCode39fullAscii_caller = nil;

@implementation rb_BarcodeChainway_setCode39fullAscii_caller

+(rb_BarcodeChainway_setCode39fullAscii_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39fullAscii_caller == nil) {
        our_BarcodeChainway_setCode39fullAscii_caller = [[rb_BarcodeChainway_setCode39fullAscii_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39fullAscii_caller;
}

-(void) command_setCode39fullAscii:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39fullAscii:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39fullAscii:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39fullAscii_caller getSharedInstance] command_setCode39fullAscii:caller_params];
}

+(void) setCode39fullAscii_in_thread:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39fullAscii_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39fullAscii:) withObject:caller_params];
}

+(void) setCode39fullAscii_in_UI_thread:(rb_BarcodeChainway_setCode39fullAscii_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39fullAscii_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39fullAscii:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39fullAscii_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39fullAscii="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39fullAscii_caller setCode39fullAscii_in_thread:[rb_BarcodeChainway_setCode39fullAscii_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39fullAscii_caller setCode39fullAscii:[rb_BarcodeChainway_setCode39fullAscii_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39fullAscii(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39fullAscii_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39fullAscii(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39fullAscii_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39maxLength_caller_params* par = [[[rb_BarcodeChainway_getCode39maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39maxLength_caller*) getSharedInstance;
+(void) getCode39maxLength:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params;
+(void) getCode39maxLength_in_thread:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params;
+(void) getCode39maxLength_in_UI_thread:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39maxLength_caller* our_BarcodeChainway_getCode39maxLength_caller = nil;

@implementation rb_BarcodeChainway_getCode39maxLength_caller

+(rb_BarcodeChainway_getCode39maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39maxLength_caller == nil) {
        our_BarcodeChainway_getCode39maxLength_caller = [[rb_BarcodeChainway_getCode39maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39maxLength_caller;
}

-(void) command_getCode39maxLength:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39maxLength:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39maxLength_caller getSharedInstance] command_getCode39maxLength:caller_params];
}

+(void) getCode39maxLength_in_thread:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39maxLength:) withObject:caller_params];
}

+(void) getCode39maxLength_in_UI_thread:(rb_BarcodeChainway_getCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39maxLength_caller getCode39maxLength_in_thread:[rb_BarcodeChainway_getCode39maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39maxLength_caller getCode39maxLength:[rb_BarcodeChainway_getCode39maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39maxLength_caller_params* par = [[[rb_BarcodeChainway_setCode39maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39maxLength_caller*) getSharedInstance;
+(void) setCode39maxLength:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params;
+(void) setCode39maxLength_in_thread:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params;
+(void) setCode39maxLength_in_UI_thread:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39maxLength_caller* our_BarcodeChainway_setCode39maxLength_caller = nil;

@implementation rb_BarcodeChainway_setCode39maxLength_caller

+(rb_BarcodeChainway_setCode39maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39maxLength_caller == nil) {
        our_BarcodeChainway_setCode39maxLength_caller = [[rb_BarcodeChainway_setCode39maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39maxLength_caller;
}

-(void) command_setCode39maxLength:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39maxLength:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39maxLength_caller getSharedInstance] command_setCode39maxLength:caller_params];
}

+(void) setCode39maxLength_in_thread:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39maxLength:) withObject:caller_params];
}

+(void) setCode39maxLength_in_UI_thread:(rb_BarcodeChainway_setCode39maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39maxLength_caller setCode39maxLength_in_thread:[rb_BarcodeChainway_setCode39maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39maxLength_caller setCode39maxLength:[rb_BarcodeChainway_setCode39maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39minLength_caller_params* par = [[[rb_BarcodeChainway_getCode39minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39minLength_caller*) getSharedInstance;
+(void) getCode39minLength:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params;
+(void) getCode39minLength_in_thread:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params;
+(void) getCode39minLength_in_UI_thread:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39minLength_caller* our_BarcodeChainway_getCode39minLength_caller = nil;

@implementation rb_BarcodeChainway_getCode39minLength_caller

+(rb_BarcodeChainway_getCode39minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39minLength_caller == nil) {
        our_BarcodeChainway_getCode39minLength_caller = [[rb_BarcodeChainway_getCode39minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39minLength_caller;
}

-(void) command_getCode39minLength:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39minLength:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39minLength_caller getSharedInstance] command_getCode39minLength:caller_params];
}

+(void) getCode39minLength_in_thread:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39minLength:) withObject:caller_params];
}

+(void) getCode39minLength_in_UI_thread:(rb_BarcodeChainway_getCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39minLength_caller getCode39minLength_in_thread:[rb_BarcodeChainway_getCode39minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39minLength_caller getCode39minLength:[rb_BarcodeChainway_getCode39minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39minLength_caller_params* par = [[[rb_BarcodeChainway_setCode39minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39minLength_caller*) getSharedInstance;
+(void) setCode39minLength:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params;
+(void) setCode39minLength_in_thread:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params;
+(void) setCode39minLength_in_UI_thread:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39minLength_caller* our_BarcodeChainway_setCode39minLength_caller = nil;

@implementation rb_BarcodeChainway_setCode39minLength_caller

+(rb_BarcodeChainway_setCode39minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39minLength_caller == nil) {
        our_BarcodeChainway_setCode39minLength_caller = [[rb_BarcodeChainway_setCode39minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39minLength_caller;
}

-(void) command_setCode39minLength:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39minLength:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39minLength_caller getSharedInstance] command_setCode39minLength:caller_params];
}

+(void) setCode39minLength_in_thread:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39minLength:) withObject:caller_params];
}

+(void) setCode39minLength_in_UI_thread:(rb_BarcodeChainway_setCode39minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39minLength_caller setCode39minLength_in_thread:[rb_BarcodeChainway_setCode39minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39minLength_caller setCode39minLength:[rb_BarcodeChainway_setCode39minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39redundancy_caller_params* par = [[[rb_BarcodeChainway_getCode39redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39redundancy_caller*) getSharedInstance;
+(void) getCode39redundancy:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params;
+(void) getCode39redundancy_in_thread:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params;
+(void) getCode39redundancy_in_UI_thread:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39redundancy_caller* our_BarcodeChainway_getCode39redundancy_caller = nil;

@implementation rb_BarcodeChainway_getCode39redundancy_caller

+(rb_BarcodeChainway_getCode39redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39redundancy_caller == nil) {
        our_BarcodeChainway_getCode39redundancy_caller = [[rb_BarcodeChainway_getCode39redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39redundancy_caller;
}

-(void) command_getCode39redundancy:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39redundancy:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39redundancy_caller getSharedInstance] command_getCode39redundancy:caller_params];
}

+(void) getCode39redundancy_in_thread:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39redundancy:) withObject:caller_params];
}

+(void) getCode39redundancy_in_UI_thread:(rb_BarcodeChainway_getCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39redundancy_caller getCode39redundancy_in_thread:[rb_BarcodeChainway_getCode39redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39redundancy_caller getCode39redundancy:[rb_BarcodeChainway_getCode39redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39redundancy_caller_params* par = [[[rb_BarcodeChainway_setCode39redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39redundancy_caller*) getSharedInstance;
+(void) setCode39redundancy:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params;
+(void) setCode39redundancy_in_thread:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params;
+(void) setCode39redundancy_in_UI_thread:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39redundancy_caller* our_BarcodeChainway_setCode39redundancy_caller = nil;

@implementation rb_BarcodeChainway_setCode39redundancy_caller

+(rb_BarcodeChainway_setCode39redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39redundancy_caller == nil) {
        our_BarcodeChainway_setCode39redundancy_caller = [[rb_BarcodeChainway_setCode39redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39redundancy_caller;
}

-(void) command_setCode39redundancy:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39redundancy:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39redundancy_caller getSharedInstance] command_setCode39redundancy:caller_params];
}

+(void) setCode39redundancy_in_thread:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39redundancy:) withObject:caller_params];
}

+(void) setCode39redundancy_in_UI_thread:(rb_BarcodeChainway_setCode39redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39redundancy_caller setCode39redundancy_in_thread:[rb_BarcodeChainway_setCode39redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39redundancy_caller setCode39redundancy:[rb_BarcodeChainway_setCode39redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getCode39reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39reportCheckDigit_caller*) getSharedInstance;
+(void) getCode39reportCheckDigit:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params;
+(void) getCode39reportCheckDigit_in_thread:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params;
+(void) getCode39reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39reportCheckDigit_caller* our_BarcodeChainway_getCode39reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getCode39reportCheckDigit_caller

+(rb_BarcodeChainway_getCode39reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getCode39reportCheckDigit_caller = [[rb_BarcodeChainway_getCode39reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39reportCheckDigit_caller;
}

-(void) command_getCode39reportCheckDigit:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39reportCheckDigit:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39reportCheckDigit_caller getSharedInstance] command_getCode39reportCheckDigit:caller_params];
}

+(void) getCode39reportCheckDigit_in_thread:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39reportCheckDigit:) withObject:caller_params];
}

+(void) getCode39reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39reportCheckDigit_caller getCode39reportCheckDigit_in_thread:[rb_BarcodeChainway_getCode39reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39reportCheckDigit_caller getCode39reportCheckDigit:[rb_BarcodeChainway_getCode39reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setCode39reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39reportCheckDigit_caller*) getSharedInstance;
+(void) setCode39reportCheckDigit:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params;
+(void) setCode39reportCheckDigit_in_thread:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params;
+(void) setCode39reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39reportCheckDigit_caller* our_BarcodeChainway_setCode39reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setCode39reportCheckDigit_caller

+(rb_BarcodeChainway_setCode39reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setCode39reportCheckDigit_caller = [[rb_BarcodeChainway_setCode39reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39reportCheckDigit_caller;
}

-(void) command_setCode39reportCheckDigit:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39reportCheckDigit:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39reportCheckDigit_caller getSharedInstance] command_setCode39reportCheckDigit:caller_params];
}

+(void) setCode39reportCheckDigit_in_thread:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39reportCheckDigit:) withObject:caller_params];
}

+(void) setCode39reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode39reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39reportCheckDigit_caller setCode39reportCheckDigit_in_thread:[rb_BarcodeChainway_setCode39reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39reportCheckDigit_caller setCode39reportCheckDigit:[rb_BarcodeChainway_setCode39reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39securityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39securityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39securityLevel_caller_params* par = [[[rb_BarcodeChainway_getCode39securityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39securityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39securityLevel_caller*) getSharedInstance;
+(void) getCode39securityLevel:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params;
+(void) getCode39securityLevel_in_thread:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params;
+(void) getCode39securityLevel_in_UI_thread:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39securityLevel_caller* our_BarcodeChainway_getCode39securityLevel_caller = nil;

@implementation rb_BarcodeChainway_getCode39securityLevel_caller

+(rb_BarcodeChainway_getCode39securityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39securityLevel_caller == nil) {
        our_BarcodeChainway_getCode39securityLevel_caller = [[rb_BarcodeChainway_getCode39securityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39securityLevel_caller;
}

-(void) command_getCode39securityLevel:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39securityLevel:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39securityLevel:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39securityLevel_caller getSharedInstance] command_getCode39securityLevel:caller_params];
}

+(void) getCode39securityLevel_in_thread:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39securityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39securityLevel:) withObject:caller_params];
}

+(void) getCode39securityLevel_in_UI_thread:(rb_BarcodeChainway_getCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39securityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39securityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39securityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39securityLevel"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39securityLevel_caller getCode39securityLevel_in_thread:[rb_BarcodeChainway_getCode39securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39securityLevel_caller getCode39securityLevel:[rb_BarcodeChainway_getCode39securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39securityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39securityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39securityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39securityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39securityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39securityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39securityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39securityLevel_caller_params* par = [[[rb_BarcodeChainway_setCode39securityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39securityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39securityLevel_caller*) getSharedInstance;
+(void) setCode39securityLevel:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params;
+(void) setCode39securityLevel_in_thread:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params;
+(void) setCode39securityLevel_in_UI_thread:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39securityLevel_caller* our_BarcodeChainway_setCode39securityLevel_caller = nil;

@implementation rb_BarcodeChainway_setCode39securityLevel_caller

+(rb_BarcodeChainway_setCode39securityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39securityLevel_caller == nil) {
        our_BarcodeChainway_setCode39securityLevel_caller = [[rb_BarcodeChainway_setCode39securityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39securityLevel_caller;
}

-(void) command_setCode39securityLevel:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39securityLevel:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39securityLevel:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39securityLevel_caller getSharedInstance] command_setCode39securityLevel:caller_params];
}

+(void) setCode39securityLevel_in_thread:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39securityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39securityLevel:) withObject:caller_params];
}

+(void) setCode39securityLevel_in_UI_thread:(rb_BarcodeChainway_setCode39securityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39securityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39securityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39securityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39securityLevel="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39securityLevel_caller setCode39securityLevel_in_thread:[rb_BarcodeChainway_setCode39securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39securityLevel_caller setCode39securityLevel:[rb_BarcodeChainway_setCode39securityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39securityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39securityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39securityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39securityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode39verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getCode39verifyCheckDigit_caller*) getSharedInstance;
+(void) getCode39verifyCheckDigit:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params;
+(void) getCode39verifyCheckDigit_in_thread:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params;
+(void) getCode39verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode39verifyCheckDigit_caller* our_BarcodeChainway_getCode39verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getCode39verifyCheckDigit_caller

+(rb_BarcodeChainway_getCode39verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode39verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_getCode39verifyCheckDigit_caller = [[rb_BarcodeChainway_getCode39verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getCode39verifyCheckDigit_caller;
}

-(void) command_getCode39verifyCheckDigit:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode39verifyCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode39verifyCheckDigit:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39verifyCheckDigit_caller getSharedInstance] command_getCode39verifyCheckDigit:caller_params];
}

+(void) getCode39verifyCheckDigit_in_thread:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode39verifyCheckDigit:) withObject:caller_params];
}

+(void) getCode39verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode39verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode39verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode39verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39verifyCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode39verifyCheckDigit_caller getCode39verifyCheckDigit_in_thread:[rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode39verifyCheckDigit_caller getCode39verifyCheckDigit:[rb_BarcodeChainway_getCode39verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode39verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode39verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode39verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode39verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode39verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setCode39verifyCheckDigit_caller*) getSharedInstance;
+(void) setCode39verifyCheckDigit:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params;
+(void) setCode39verifyCheckDigit_in_thread:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params;
+(void) setCode39verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode39verifyCheckDigit_caller* our_BarcodeChainway_setCode39verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setCode39verifyCheckDigit_caller

+(rb_BarcodeChainway_setCode39verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode39verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_setCode39verifyCheckDigit_caller = [[rb_BarcodeChainway_setCode39verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setCode39verifyCheckDigit_caller;
}

-(void) command_setCode39verifyCheckDigit:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode39verifyCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode39verifyCheckDigit:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39verifyCheckDigit_caller getSharedInstance] command_setCode39verifyCheckDigit:caller_params];
}

+(void) setCode39verifyCheckDigit_in_thread:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode39verifyCheckDigit:) withObject:caller_params];
}

+(void) setCode39verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode39verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode39verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode39verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code39verifyCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode39verifyCheckDigit_caller setCode39verifyCheckDigit_in_thread:[rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode39verifyCheckDigit_caller setCode39verifyCheckDigit:[rb_BarcodeChainway_setCode39verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode39verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode39verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode39verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode39verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode93_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode93_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode93_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode93_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode93_caller_params* par = [[[rb_BarcodeChainway_getCode93_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode93_caller : NSObject {

}
+(rb_BarcodeChainway_getCode93_caller*) getSharedInstance;
+(void) getCode93:(rb_BarcodeChainway_getCode93_caller_params*)caller_params;
+(void) getCode93_in_thread:(rb_BarcodeChainway_getCode93_caller_params*)caller_params;
+(void) getCode93_in_UI_thread:(rb_BarcodeChainway_getCode93_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode93_caller* our_BarcodeChainway_getCode93_caller = nil;

@implementation rb_BarcodeChainway_getCode93_caller

+(rb_BarcodeChainway_getCode93_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode93_caller == nil) {
        our_BarcodeChainway_getCode93_caller = [[rb_BarcodeChainway_getCode93_caller alloc] init];
    }
    return our_BarcodeChainway_getCode93_caller;
}

-(void) command_getCode93:(rb_BarcodeChainway_getCode93_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode93:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode93:(rb_BarcodeChainway_getCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93_caller getSharedInstance] command_getCode93:caller_params];
}

+(void) getCode93_in_thread:(rb_BarcodeChainway_getCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode93:) withObject:caller_params];
}

+(void) getCode93_in_UI_thread:(rb_BarcodeChainway_getCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode93:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode93_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode93_caller getCode93_in_thread:[rb_BarcodeChainway_getCode93_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode93_caller getCode93:[rb_BarcodeChainway_getCode93_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode93(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode93_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode93(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode93_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode93_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode93_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode93_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode93_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode93_caller_params* par = [[[rb_BarcodeChainway_setCode93_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode93_caller : NSObject {

}
+(rb_BarcodeChainway_setCode93_caller*) getSharedInstance;
+(void) setCode93:(rb_BarcodeChainway_setCode93_caller_params*)caller_params;
+(void) setCode93_in_thread:(rb_BarcodeChainway_setCode93_caller_params*)caller_params;
+(void) setCode93_in_UI_thread:(rb_BarcodeChainway_setCode93_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode93_caller* our_BarcodeChainway_setCode93_caller = nil;

@implementation rb_BarcodeChainway_setCode93_caller

+(rb_BarcodeChainway_setCode93_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode93_caller == nil) {
        our_BarcodeChainway_setCode93_caller = [[rb_BarcodeChainway_setCode93_caller alloc] init];
    }
    return our_BarcodeChainway_setCode93_caller;
}

-(void) command_setCode93:(rb_BarcodeChainway_setCode93_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode93:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode93:(rb_BarcodeChainway_setCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93_caller getSharedInstance] command_setCode93:caller_params];
}

+(void) setCode93_in_thread:(rb_BarcodeChainway_setCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode93:) withObject:caller_params];
}

+(void) setCode93_in_UI_thread:(rb_BarcodeChainway_setCode93_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode93:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode93_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode93_caller setCode93_in_thread:[rb_BarcodeChainway_setCode93_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode93_caller setCode93:[rb_BarcodeChainway_setCode93_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode93(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode93_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode93(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode93_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode93maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode93maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode93maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode93maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode93maxLength_caller_params* par = [[[rb_BarcodeChainway_getCode93maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode93maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode93maxLength_caller*) getSharedInstance;
+(void) getCode93maxLength:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params;
+(void) getCode93maxLength_in_thread:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params;
+(void) getCode93maxLength_in_UI_thread:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode93maxLength_caller* our_BarcodeChainway_getCode93maxLength_caller = nil;

@implementation rb_BarcodeChainway_getCode93maxLength_caller

+(rb_BarcodeChainway_getCode93maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode93maxLength_caller == nil) {
        our_BarcodeChainway_getCode93maxLength_caller = [[rb_BarcodeChainway_getCode93maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode93maxLength_caller;
}

-(void) command_getCode93maxLength:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode93maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode93maxLength:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93maxLength_caller getSharedInstance] command_getCode93maxLength:caller_params];
}

+(void) getCode93maxLength_in_thread:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode93maxLength:) withObject:caller_params];
}

+(void) getCode93maxLength_in_UI_thread:(rb_BarcodeChainway_getCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode93maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode93maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode93maxLength_caller getCode93maxLength_in_thread:[rb_BarcodeChainway_getCode93maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode93maxLength_caller getCode93maxLength:[rb_BarcodeChainway_getCode93maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode93maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode93maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode93maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode93maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode93maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode93maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode93maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode93maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode93maxLength_caller_params* par = [[[rb_BarcodeChainway_setCode93maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode93maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode93maxLength_caller*) getSharedInstance;
+(void) setCode93maxLength:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params;
+(void) setCode93maxLength_in_thread:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params;
+(void) setCode93maxLength_in_UI_thread:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode93maxLength_caller* our_BarcodeChainway_setCode93maxLength_caller = nil;

@implementation rb_BarcodeChainway_setCode93maxLength_caller

+(rb_BarcodeChainway_setCode93maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode93maxLength_caller == nil) {
        our_BarcodeChainway_setCode93maxLength_caller = [[rb_BarcodeChainway_setCode93maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode93maxLength_caller;
}

-(void) command_setCode93maxLength:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode93maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode93maxLength:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93maxLength_caller getSharedInstance] command_setCode93maxLength:caller_params];
}

+(void) setCode93maxLength_in_thread:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode93maxLength:) withObject:caller_params];
}

+(void) setCode93maxLength_in_UI_thread:(rb_BarcodeChainway_setCode93maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode93maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode93maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode93maxLength_caller setCode93maxLength_in_thread:[rb_BarcodeChainway_setCode93maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode93maxLength_caller setCode93maxLength:[rb_BarcodeChainway_setCode93maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode93maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode93maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode93maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode93maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode93minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode93minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode93minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode93minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode93minLength_caller_params* par = [[[rb_BarcodeChainway_getCode93minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode93minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getCode93minLength_caller*) getSharedInstance;
+(void) getCode93minLength:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params;
+(void) getCode93minLength_in_thread:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params;
+(void) getCode93minLength_in_UI_thread:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode93minLength_caller* our_BarcodeChainway_getCode93minLength_caller = nil;

@implementation rb_BarcodeChainway_getCode93minLength_caller

+(rb_BarcodeChainway_getCode93minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode93minLength_caller == nil) {
        our_BarcodeChainway_getCode93minLength_caller = [[rb_BarcodeChainway_getCode93minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getCode93minLength_caller;
}

-(void) command_getCode93minLength:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode93minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode93minLength:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93minLength_caller getSharedInstance] command_getCode93minLength:caller_params];
}

+(void) getCode93minLength_in_thread:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode93minLength:) withObject:caller_params];
}

+(void) getCode93minLength_in_UI_thread:(rb_BarcodeChainway_getCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode93minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode93minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode93minLength_caller getCode93minLength_in_thread:[rb_BarcodeChainway_getCode93minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode93minLength_caller getCode93minLength:[rb_BarcodeChainway_getCode93minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode93minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode93minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode93minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode93minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode93minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode93minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode93minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode93minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode93minLength_caller_params* par = [[[rb_BarcodeChainway_setCode93minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode93minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setCode93minLength_caller*) getSharedInstance;
+(void) setCode93minLength:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params;
+(void) setCode93minLength_in_thread:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params;
+(void) setCode93minLength_in_UI_thread:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode93minLength_caller* our_BarcodeChainway_setCode93minLength_caller = nil;

@implementation rb_BarcodeChainway_setCode93minLength_caller

+(rb_BarcodeChainway_setCode93minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode93minLength_caller == nil) {
        our_BarcodeChainway_setCode93minLength_caller = [[rb_BarcodeChainway_setCode93minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setCode93minLength_caller;
}

-(void) command_setCode93minLength:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode93minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode93minLength:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93minLength_caller getSharedInstance] command_setCode93minLength:caller_params];
}

+(void) setCode93minLength_in_thread:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode93minLength:) withObject:caller_params];
}

+(void) setCode93minLength_in_UI_thread:(rb_BarcodeChainway_setCode93minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode93minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode93minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode93minLength_caller setCode93minLength_in_thread:[rb_BarcodeChainway_setCode93minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode93minLength_caller setCode93minLength:[rb_BarcodeChainway_setCode93minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode93minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode93minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode93minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode93minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCode93redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCode93redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCode93redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCode93redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCode93redundancy_caller_params* par = [[[rb_BarcodeChainway_getCode93redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCode93redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getCode93redundancy_caller*) getSharedInstance;
+(void) getCode93redundancy:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params;
+(void) getCode93redundancy_in_thread:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params;
+(void) getCode93redundancy_in_UI_thread:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCode93redundancy_caller* our_BarcodeChainway_getCode93redundancy_caller = nil;

@implementation rb_BarcodeChainway_getCode93redundancy_caller

+(rb_BarcodeChainway_getCode93redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCode93redundancy_caller == nil) {
        our_BarcodeChainway_getCode93redundancy_caller = [[rb_BarcodeChainway_getCode93redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getCode93redundancy_caller;
}

-(void) command_getCode93redundancy:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCode93redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCode93redundancy:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93redundancy_caller getSharedInstance] command_getCode93redundancy:caller_params];
}

+(void) getCode93redundancy_in_thread:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getCode93redundancy:) withObject:caller_params];
}

+(void) getCode93redundancy_in_UI_thread:(rb_BarcodeChainway_getCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCode93redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCode93redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCode93redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCode93redundancy_caller getCode93redundancy_in_thread:[rb_BarcodeChainway_getCode93redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCode93redundancy_caller getCode93redundancy:[rb_BarcodeChainway_getCode93redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCode93redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCode93redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCode93redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCode93redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCode93redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCode93redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCode93redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCode93redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCode93redundancy_caller_params* par = [[[rb_BarcodeChainway_setCode93redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCode93redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setCode93redundancy_caller*) getSharedInstance;
+(void) setCode93redundancy:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params;
+(void) setCode93redundancy_in_thread:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params;
+(void) setCode93redundancy_in_UI_thread:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCode93redundancy_caller* our_BarcodeChainway_setCode93redundancy_caller = nil;

@implementation rb_BarcodeChainway_setCode93redundancy_caller

+(rb_BarcodeChainway_setCode93redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCode93redundancy_caller == nil) {
        our_BarcodeChainway_setCode93redundancy_caller = [[rb_BarcodeChainway_setCode93redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setCode93redundancy_caller;
}

-(void) command_setCode93redundancy:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCode93redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCode93redundancy:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93redundancy_caller getSharedInstance] command_setCode93redundancy:caller_params];
}

+(void) setCode93redundancy_in_thread:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setCode93redundancy:) withObject:caller_params];
}

+(void) setCode93redundancy_in_UI_thread:(rb_BarcodeChainway_setCode93redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCode93redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCode93redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCode93redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::code93redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCode93redundancy_caller setCode93redundancy_in_thread:[rb_BarcodeChainway_setCode93redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCode93redundancy_caller setCode93redundancy:[rb_BarcodeChainway_setCode93redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCode93redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCode93redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCode93redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCode93redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getD2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getD2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getD2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getD2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getD2of5_caller_params* par = [[[rb_BarcodeChainway_getD2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getD2of5_caller : NSObject {

}
+(rb_BarcodeChainway_getD2of5_caller*) getSharedInstance;
+(void) getD2of5:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params;
+(void) getD2of5_in_thread:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params;
+(void) getD2of5_in_UI_thread:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getD2of5_caller* our_BarcodeChainway_getD2of5_caller = nil;

@implementation rb_BarcodeChainway_getD2of5_caller

+(rb_BarcodeChainway_getD2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getD2of5_caller == nil) {
        our_BarcodeChainway_getD2of5_caller = [[rb_BarcodeChainway_getD2of5_caller alloc] init];
    }
    return our_BarcodeChainway_getD2of5_caller;
}

-(void) command_getD2of5:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getD2of5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getD2of5:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5_caller getSharedInstance] command_getD2of5:caller_params];
}

+(void) getD2of5_in_thread:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_getD2of5:) withObject:caller_params];
}

+(void) getD2of5_in_UI_thread:(rb_BarcodeChainway_getD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getD2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getD2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getD2of5_caller getD2of5_in_thread:[rb_BarcodeChainway_getD2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getD2of5_caller getD2of5:[rb_BarcodeChainway_getD2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getD2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getD2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getD2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getD2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setD2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setD2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setD2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setD2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setD2of5_caller_params* par = [[[rb_BarcodeChainway_setD2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setD2of5_caller : NSObject {

}
+(rb_BarcodeChainway_setD2of5_caller*) getSharedInstance;
+(void) setD2of5:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params;
+(void) setD2of5_in_thread:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params;
+(void) setD2of5_in_UI_thread:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setD2of5_caller* our_BarcodeChainway_setD2of5_caller = nil;

@implementation rb_BarcodeChainway_setD2of5_caller

+(rb_BarcodeChainway_setD2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setD2of5_caller == nil) {
        our_BarcodeChainway_setD2of5_caller = [[rb_BarcodeChainway_setD2of5_caller alloc] init];
    }
    return our_BarcodeChainway_setD2of5_caller;
}

-(void) command_setD2of5:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setD2of5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setD2of5:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5_caller getSharedInstance] command_setD2of5:caller_params];
}

+(void) setD2of5_in_thread:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_setD2of5:) withObject:caller_params];
}

+(void) setD2of5_in_UI_thread:(rb_BarcodeChainway_setD2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setD2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setD2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setD2of5_caller setD2of5_in_thread:[rb_BarcodeChainway_setD2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setD2of5_caller setD2of5:[rb_BarcodeChainway_setD2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setD2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setD2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setD2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setD2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getD2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getD2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getD2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getD2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getD2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_getD2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getD2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getD2of5maxLength_caller*) getSharedInstance;
+(void) getD2of5maxLength:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params;
+(void) getD2of5maxLength_in_thread:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params;
+(void) getD2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getD2of5maxLength_caller* our_BarcodeChainway_getD2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_getD2of5maxLength_caller

+(rb_BarcodeChainway_getD2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getD2of5maxLength_caller == nil) {
        our_BarcodeChainway_getD2of5maxLength_caller = [[rb_BarcodeChainway_getD2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getD2of5maxLength_caller;
}

-(void) command_getD2of5maxLength:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getD2of5maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getD2of5maxLength:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5maxLength_caller getSharedInstance] command_getD2of5maxLength:caller_params];
}

+(void) getD2of5maxLength_in_thread:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getD2of5maxLength:) withObject:caller_params];
}

+(void) getD2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getD2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getD2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getD2of5maxLength_caller getD2of5maxLength_in_thread:[rb_BarcodeChainway_getD2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getD2of5maxLength_caller getD2of5maxLength:[rb_BarcodeChainway_getD2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getD2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getD2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getD2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getD2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setD2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setD2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setD2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setD2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setD2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_setD2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setD2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setD2of5maxLength_caller*) getSharedInstance;
+(void) setD2of5maxLength:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params;
+(void) setD2of5maxLength_in_thread:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params;
+(void) setD2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setD2of5maxLength_caller* our_BarcodeChainway_setD2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_setD2of5maxLength_caller

+(rb_BarcodeChainway_setD2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setD2of5maxLength_caller == nil) {
        our_BarcodeChainway_setD2of5maxLength_caller = [[rb_BarcodeChainway_setD2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setD2of5maxLength_caller;
}

-(void) command_setD2of5maxLength:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setD2of5maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setD2of5maxLength:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5maxLength_caller getSharedInstance] command_setD2of5maxLength:caller_params];
}

+(void) setD2of5maxLength_in_thread:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setD2of5maxLength:) withObject:caller_params];
}

+(void) setD2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setD2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setD2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setD2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setD2of5maxLength_caller setD2of5maxLength_in_thread:[rb_BarcodeChainway_setD2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setD2of5maxLength_caller setD2of5maxLength:[rb_BarcodeChainway_setD2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setD2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setD2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setD2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setD2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getD2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getD2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getD2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getD2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getD2of5minLength_caller_params* par = [[[rb_BarcodeChainway_getD2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getD2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getD2of5minLength_caller*) getSharedInstance;
+(void) getD2of5minLength:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params;
+(void) getD2of5minLength_in_thread:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params;
+(void) getD2of5minLength_in_UI_thread:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getD2of5minLength_caller* our_BarcodeChainway_getD2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_getD2of5minLength_caller

+(rb_BarcodeChainway_getD2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getD2of5minLength_caller == nil) {
        our_BarcodeChainway_getD2of5minLength_caller = [[rb_BarcodeChainway_getD2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getD2of5minLength_caller;
}

-(void) command_getD2of5minLength:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getD2of5minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getD2of5minLength:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5minLength_caller getSharedInstance] command_getD2of5minLength:caller_params];
}

+(void) getD2of5minLength_in_thread:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getD2of5minLength:) withObject:caller_params];
}

+(void) getD2of5minLength_in_UI_thread:(rb_BarcodeChainway_getD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getD2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getD2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getD2of5minLength_caller getD2of5minLength_in_thread:[rb_BarcodeChainway_getD2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getD2of5minLength_caller getD2of5minLength:[rb_BarcodeChainway_getD2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getD2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getD2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getD2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getD2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setD2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setD2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setD2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setD2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setD2of5minLength_caller_params* par = [[[rb_BarcodeChainway_setD2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setD2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setD2of5minLength_caller*) getSharedInstance;
+(void) setD2of5minLength:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params;
+(void) setD2of5minLength_in_thread:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params;
+(void) setD2of5minLength_in_UI_thread:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setD2of5minLength_caller* our_BarcodeChainway_setD2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_setD2of5minLength_caller

+(rb_BarcodeChainway_setD2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setD2of5minLength_caller == nil) {
        our_BarcodeChainway_setD2of5minLength_caller = [[rb_BarcodeChainway_setD2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setD2of5minLength_caller;
}

-(void) command_setD2of5minLength:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setD2of5minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setD2of5minLength:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5minLength_caller getSharedInstance] command_setD2of5minLength:caller_params];
}

+(void) setD2of5minLength_in_thread:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setD2of5minLength:) withObject:caller_params];
}

+(void) setD2of5minLength_in_UI_thread:(rb_BarcodeChainway_setD2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setD2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setD2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setD2of5minLength_caller setD2of5minLength_in_thread:[rb_BarcodeChainway_setD2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setD2of5minLength_caller setD2of5minLength:[rb_BarcodeChainway_setD2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setD2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setD2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setD2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setD2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getD2of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getD2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getD2of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getD2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getD2of5redundancy_caller_params* par = [[[rb_BarcodeChainway_getD2of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getD2of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getD2of5redundancy_caller*) getSharedInstance;
+(void) getD2of5redundancy:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params;
+(void) getD2of5redundancy_in_thread:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params;
+(void) getD2of5redundancy_in_UI_thread:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getD2of5redundancy_caller* our_BarcodeChainway_getD2of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_getD2of5redundancy_caller

+(rb_BarcodeChainway_getD2of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getD2of5redundancy_caller == nil) {
        our_BarcodeChainway_getD2of5redundancy_caller = [[rb_BarcodeChainway_getD2of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getD2of5redundancy_caller;
}

-(void) command_getD2of5redundancy:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getD2of5redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getD2of5redundancy:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5redundancy_caller getSharedInstance] command_getD2of5redundancy:caller_params];
}

+(void) getD2of5redundancy_in_thread:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getD2of5redundancy:) withObject:caller_params];
}

+(void) getD2of5redundancy_in_UI_thread:(rb_BarcodeChainway_getD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getD2of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getD2of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getD2of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getD2of5redundancy_caller getD2of5redundancy_in_thread:[rb_BarcodeChainway_getD2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getD2of5redundancy_caller getD2of5redundancy:[rb_BarcodeChainway_getD2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getD2of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getD2of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getD2of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getD2of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setD2of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setD2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setD2of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setD2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setD2of5redundancy_caller_params* par = [[[rb_BarcodeChainway_setD2of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setD2of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setD2of5redundancy_caller*) getSharedInstance;
+(void) setD2of5redundancy:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params;
+(void) setD2of5redundancy_in_thread:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params;
+(void) setD2of5redundancy_in_UI_thread:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setD2of5redundancy_caller* our_BarcodeChainway_setD2of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_setD2of5redundancy_caller

+(rb_BarcodeChainway_setD2of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setD2of5redundancy_caller == nil) {
        our_BarcodeChainway_setD2of5redundancy_caller = [[rb_BarcodeChainway_setD2of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setD2of5redundancy_caller;
}

-(void) command_setD2of5redundancy:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setD2of5redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setD2of5redundancy:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5redundancy_caller getSharedInstance] command_setD2of5redundancy:caller_params];
}

+(void) setD2of5redundancy_in_thread:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setD2of5redundancy:) withObject:caller_params];
}

+(void) setD2of5redundancy_in_UI_thread:(rb_BarcodeChainway_setD2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setD2of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setD2of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setD2of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::d2of5redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setD2of5redundancy_caller setD2of5redundancy_in_thread:[rb_BarcodeChainway_setD2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setD2of5redundancy_caller setD2of5redundancy:[rb_BarcodeChainway_setD2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setD2of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setD2of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setD2of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setD2of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDatamatrix_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDatamatrix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDatamatrix_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDatamatrix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDatamatrix_caller_params* par = [[[rb_BarcodeChainway_getDatamatrix_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDatamatrix_caller : NSObject {

}
+(rb_BarcodeChainway_getDatamatrix_caller*) getSharedInstance;
+(void) getDatamatrix:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params;
+(void) getDatamatrix_in_thread:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params;
+(void) getDatamatrix_in_UI_thread:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDatamatrix_caller* our_BarcodeChainway_getDatamatrix_caller = nil;

@implementation rb_BarcodeChainway_getDatamatrix_caller

+(rb_BarcodeChainway_getDatamatrix_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDatamatrix_caller == nil) {
        our_BarcodeChainway_getDatamatrix_caller = [[rb_BarcodeChainway_getDatamatrix_caller alloc] init];
    }
    return our_BarcodeChainway_getDatamatrix_caller;
}

-(void) command_getDatamatrix:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDatamatrix:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDatamatrix:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDatamatrix_caller getSharedInstance] command_getDatamatrix:caller_params];
}

+(void) getDatamatrix_in_thread:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDatamatrix_caller getSharedInstance] performSelectorInBackground:@selector(command_getDatamatrix:) withObject:caller_params];
}

+(void) getDatamatrix_in_UI_thread:(rb_BarcodeChainway_getDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDatamatrix_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDatamatrix:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDatamatrix_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::datamatrix"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDatamatrix_caller getDatamatrix_in_thread:[rb_BarcodeChainway_getDatamatrix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDatamatrix_caller getDatamatrix:[rb_BarcodeChainway_getDatamatrix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDatamatrix(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDatamatrix_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDatamatrix(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDatamatrix_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDatamatrix_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDatamatrix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDatamatrix_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDatamatrix_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDatamatrix_caller_params* par = [[[rb_BarcodeChainway_setDatamatrix_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDatamatrix_caller : NSObject {

}
+(rb_BarcodeChainway_setDatamatrix_caller*) getSharedInstance;
+(void) setDatamatrix:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params;
+(void) setDatamatrix_in_thread:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params;
+(void) setDatamatrix_in_UI_thread:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDatamatrix_caller* our_BarcodeChainway_setDatamatrix_caller = nil;

@implementation rb_BarcodeChainway_setDatamatrix_caller

+(rb_BarcodeChainway_setDatamatrix_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDatamatrix_caller == nil) {
        our_BarcodeChainway_setDatamatrix_caller = [[rb_BarcodeChainway_setDatamatrix_caller alloc] init];
    }
    return our_BarcodeChainway_setDatamatrix_caller;
}

-(void) command_setDatamatrix:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDatamatrix:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDatamatrix:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDatamatrix_caller getSharedInstance] command_setDatamatrix:caller_params];
}

+(void) setDatamatrix_in_thread:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDatamatrix_caller getSharedInstance] performSelectorInBackground:@selector(command_setDatamatrix:) withObject:caller_params];
}

+(void) setDatamatrix_in_UI_thread:(rb_BarcodeChainway_setDatamatrix_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDatamatrix_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDatamatrix:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDatamatrix_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::datamatrix="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDatamatrix_caller setDatamatrix_in_thread:[rb_BarcodeChainway_setDatamatrix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDatamatrix_caller setDatamatrix:[rb_BarcodeChainway_setDatamatrix_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDatamatrix(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDatamatrix_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDatamatrix(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDatamatrix_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getEan13_caller_params* par = [[[rb_BarcodeChainway_getEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getEan13_caller : NSObject {

}
+(rb_BarcodeChainway_getEan13_caller*) getSharedInstance;
+(void) getEan13:(rb_BarcodeChainway_getEan13_caller_params*)caller_params;
+(void) getEan13_in_thread:(rb_BarcodeChainway_getEan13_caller_params*)caller_params;
+(void) getEan13_in_UI_thread:(rb_BarcodeChainway_getEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getEan13_caller* our_BarcodeChainway_getEan13_caller = nil;

@implementation rb_BarcodeChainway_getEan13_caller

+(rb_BarcodeChainway_getEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_getEan13_caller == nil) {
        our_BarcodeChainway_getEan13_caller = [[rb_BarcodeChainway_getEan13_caller alloc] init];
    }
    return our_BarcodeChainway_getEan13_caller;
}

-(void) command_getEan13:(rb_BarcodeChainway_getEan13_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getEan13:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getEan13:(rb_BarcodeChainway_getEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan13_caller getSharedInstance] command_getEan13:caller_params];
}

+(void) getEan13_in_thread:(rb_BarcodeChainway_getEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_getEan13:) withObject:caller_params];
}

+(void) getEan13_in_UI_thread:(rb_BarcodeChainway_getEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean13"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getEan13_caller getEan13_in_thread:[rb_BarcodeChainway_getEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getEan13_caller getEan13:[rb_BarcodeChainway_getEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setEan13_caller_params* par = [[[rb_BarcodeChainway_setEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setEan13_caller : NSObject {

}
+(rb_BarcodeChainway_setEan13_caller*) getSharedInstance;
+(void) setEan13:(rb_BarcodeChainway_setEan13_caller_params*)caller_params;
+(void) setEan13_in_thread:(rb_BarcodeChainway_setEan13_caller_params*)caller_params;
+(void) setEan13_in_UI_thread:(rb_BarcodeChainway_setEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setEan13_caller* our_BarcodeChainway_setEan13_caller = nil;

@implementation rb_BarcodeChainway_setEan13_caller

+(rb_BarcodeChainway_setEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_setEan13_caller == nil) {
        our_BarcodeChainway_setEan13_caller = [[rb_BarcodeChainway_setEan13_caller alloc] init];
    }
    return our_BarcodeChainway_setEan13_caller;
}

-(void) command_setEan13:(rb_BarcodeChainway_setEan13_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setEan13:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setEan13:(rb_BarcodeChainway_setEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan13_caller getSharedInstance] command_setEan13:caller_params];
}

+(void) setEan13_in_thread:(rb_BarcodeChainway_setEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_setEan13:) withObject:caller_params];
}

+(void) setEan13_in_UI_thread:(rb_BarcodeChainway_setEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean13="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setEan13_caller setEan13_in_thread:[rb_BarcodeChainway_setEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setEan13_caller setEan13:[rb_BarcodeChainway_setEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getEan8_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getEan8_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getEan8_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getEan8_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getEan8_caller_params* par = [[[rb_BarcodeChainway_getEan8_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getEan8_caller : NSObject {

}
+(rb_BarcodeChainway_getEan8_caller*) getSharedInstance;
+(void) getEan8:(rb_BarcodeChainway_getEan8_caller_params*)caller_params;
+(void) getEan8_in_thread:(rb_BarcodeChainway_getEan8_caller_params*)caller_params;
+(void) getEan8_in_UI_thread:(rb_BarcodeChainway_getEan8_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getEan8_caller* our_BarcodeChainway_getEan8_caller = nil;

@implementation rb_BarcodeChainway_getEan8_caller

+(rb_BarcodeChainway_getEan8_caller*) getSharedInstance {
    if (our_BarcodeChainway_getEan8_caller == nil) {
        our_BarcodeChainway_getEan8_caller = [[rb_BarcodeChainway_getEan8_caller alloc] init];
    }
    return our_BarcodeChainway_getEan8_caller;
}

-(void) command_getEan8:(rb_BarcodeChainway_getEan8_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getEan8:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getEan8:(rb_BarcodeChainway_getEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8_caller getSharedInstance] command_getEan8:caller_params];
}

+(void) getEan8_in_thread:(rb_BarcodeChainway_getEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8_caller getSharedInstance] performSelectorInBackground:@selector(command_getEan8:) withObject:caller_params];
}

+(void) getEan8_in_UI_thread:(rb_BarcodeChainway_getEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getEan8:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getEan8_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean8"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getEan8_caller getEan8_in_thread:[rb_BarcodeChainway_getEan8_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getEan8_caller getEan8:[rb_BarcodeChainway_getEan8_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getEan8(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getEan8_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getEan8(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getEan8_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setEan8_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setEan8_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setEan8_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setEan8_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setEan8_caller_params* par = [[[rb_BarcodeChainway_setEan8_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setEan8_caller : NSObject {

}
+(rb_BarcodeChainway_setEan8_caller*) getSharedInstance;
+(void) setEan8:(rb_BarcodeChainway_setEan8_caller_params*)caller_params;
+(void) setEan8_in_thread:(rb_BarcodeChainway_setEan8_caller_params*)caller_params;
+(void) setEan8_in_UI_thread:(rb_BarcodeChainway_setEan8_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setEan8_caller* our_BarcodeChainway_setEan8_caller = nil;

@implementation rb_BarcodeChainway_setEan8_caller

+(rb_BarcodeChainway_setEan8_caller*) getSharedInstance {
    if (our_BarcodeChainway_setEan8_caller == nil) {
        our_BarcodeChainway_setEan8_caller = [[rb_BarcodeChainway_setEan8_caller alloc] init];
    }
    return our_BarcodeChainway_setEan8_caller;
}

-(void) command_setEan8:(rb_BarcodeChainway_setEan8_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setEan8:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setEan8:(rb_BarcodeChainway_setEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8_caller getSharedInstance] command_setEan8:caller_params];
}

+(void) setEan8_in_thread:(rb_BarcodeChainway_setEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8_caller getSharedInstance] performSelectorInBackground:@selector(command_setEan8:) withObject:caller_params];
}

+(void) setEan8_in_UI_thread:(rb_BarcodeChainway_setEan8_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setEan8:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setEan8_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean8="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setEan8_caller setEan8_in_thread:[rb_BarcodeChainway_setEan8_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setEan8_caller setEan8:[rb_BarcodeChainway_setEan8_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setEan8(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setEan8_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setEan8(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setEan8_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getEan8convertToEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getEan8convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getEan8convertToEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getEan8convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getEan8convertToEan13_caller_params* par = [[[rb_BarcodeChainway_getEan8convertToEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getEan8convertToEan13_caller : NSObject {

}
+(rb_BarcodeChainway_getEan8convertToEan13_caller*) getSharedInstance;
+(void) getEan8convertToEan13:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params;
+(void) getEan8convertToEan13_in_thread:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params;
+(void) getEan8convertToEan13_in_UI_thread:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getEan8convertToEan13_caller* our_BarcodeChainway_getEan8convertToEan13_caller = nil;

@implementation rb_BarcodeChainway_getEan8convertToEan13_caller

+(rb_BarcodeChainway_getEan8convertToEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_getEan8convertToEan13_caller == nil) {
        our_BarcodeChainway_getEan8convertToEan13_caller = [[rb_BarcodeChainway_getEan8convertToEan13_caller alloc] init];
    }
    return our_BarcodeChainway_getEan8convertToEan13_caller;
}

-(void) command_getEan8convertToEan13:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getEan8convertToEan13:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getEan8convertToEan13:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8convertToEan13_caller getSharedInstance] command_getEan8convertToEan13:caller_params];
}

+(void) getEan8convertToEan13_in_thread:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8convertToEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_getEan8convertToEan13:) withObject:caller_params];
}

+(void) getEan8convertToEan13_in_UI_thread:(rb_BarcodeChainway_getEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getEan8convertToEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getEan8convertToEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getEan8convertToEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean8convertToEan13"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getEan8convertToEan13_caller getEan8convertToEan13_in_thread:[rb_BarcodeChainway_getEan8convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getEan8convertToEan13_caller getEan8convertToEan13:[rb_BarcodeChainway_getEan8convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getEan8convertToEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getEan8convertToEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getEan8convertToEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getEan8convertToEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setEan8convertToEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setEan8convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setEan8convertToEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setEan8convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setEan8convertToEan13_caller_params* par = [[[rb_BarcodeChainway_setEan8convertToEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setEan8convertToEan13_caller : NSObject {

}
+(rb_BarcodeChainway_setEan8convertToEan13_caller*) getSharedInstance;
+(void) setEan8convertToEan13:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params;
+(void) setEan8convertToEan13_in_thread:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params;
+(void) setEan8convertToEan13_in_UI_thread:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setEan8convertToEan13_caller* our_BarcodeChainway_setEan8convertToEan13_caller = nil;

@implementation rb_BarcodeChainway_setEan8convertToEan13_caller

+(rb_BarcodeChainway_setEan8convertToEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_setEan8convertToEan13_caller == nil) {
        our_BarcodeChainway_setEan8convertToEan13_caller = [[rb_BarcodeChainway_setEan8convertToEan13_caller alloc] init];
    }
    return our_BarcodeChainway_setEan8convertToEan13_caller;
}

-(void) command_setEan8convertToEan13:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setEan8convertToEan13:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setEan8convertToEan13:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8convertToEan13_caller getSharedInstance] command_setEan8convertToEan13:caller_params];
}

+(void) setEan8convertToEan13_in_thread:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8convertToEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_setEan8convertToEan13:) withObject:caller_params];
}

+(void) setEan8convertToEan13_in_UI_thread:(rb_BarcodeChainway_setEan8convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setEan8convertToEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setEan8convertToEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setEan8convertToEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ean8convertToEan13="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setEan8convertToEan13_caller setEan8convertToEan13_in_thread:[rb_BarcodeChainway_setEan8convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setEan8convertToEan13_caller setEan8convertToEan13:[rb_BarcodeChainway_setEan8convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setEan8convertToEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setEan8convertToEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setEan8convertToEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setEan8convertToEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5_caller_params* par = [[[rb_BarcodeChainway_getI2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5_caller*) getSharedInstance;
+(void) getI2of5:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params;
+(void) getI2of5_in_thread:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params;
+(void) getI2of5_in_UI_thread:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5_caller* our_BarcodeChainway_getI2of5_caller = nil;

@implementation rb_BarcodeChainway_getI2of5_caller

+(rb_BarcodeChainway_getI2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5_caller == nil) {
        our_BarcodeChainway_getI2of5_caller = [[rb_BarcodeChainway_getI2of5_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5_caller;
}

-(void) command_getI2of5:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5_caller getSharedInstance] command_getI2of5:caller_params];
}

+(void) getI2of5_in_thread:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5:) withObject:caller_params];
}

+(void) getI2of5_in_UI_thread:(rb_BarcodeChainway_getI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5_caller getI2of5_in_thread:[rb_BarcodeChainway_getI2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5_caller getI2of5:[rb_BarcodeChainway_getI2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5_caller_params* par = [[[rb_BarcodeChainway_setI2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5_caller*) getSharedInstance;
+(void) setI2of5:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params;
+(void) setI2of5_in_thread:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params;
+(void) setI2of5_in_UI_thread:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5_caller* our_BarcodeChainway_setI2of5_caller = nil;

@implementation rb_BarcodeChainway_setI2of5_caller

+(rb_BarcodeChainway_setI2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5_caller == nil) {
        our_BarcodeChainway_setI2of5_caller = [[rb_BarcodeChainway_setI2of5_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5_caller;
}

-(void) command_setI2of5:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5_caller getSharedInstance] command_setI2of5:caller_params];
}

+(void) setI2of5_in_thread:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5:) withObject:caller_params];
}

+(void) setI2of5_in_UI_thread:(rb_BarcodeChainway_setI2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5_caller setI2of5_in_thread:[rb_BarcodeChainway_setI2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5_caller setI2of5:[rb_BarcodeChainway_setI2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5convertToEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5convertToEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5convertToEan13_caller_params* par = [[[rb_BarcodeChainway_getI2of5convertToEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5convertToEan13_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5convertToEan13_caller*) getSharedInstance;
+(void) getI2of5convertToEan13:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params;
+(void) getI2of5convertToEan13_in_thread:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params;
+(void) getI2of5convertToEan13_in_UI_thread:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5convertToEan13_caller* our_BarcodeChainway_getI2of5convertToEan13_caller = nil;

@implementation rb_BarcodeChainway_getI2of5convertToEan13_caller

+(rb_BarcodeChainway_getI2of5convertToEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5convertToEan13_caller == nil) {
        our_BarcodeChainway_getI2of5convertToEan13_caller = [[rb_BarcodeChainway_getI2of5convertToEan13_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5convertToEan13_caller;
}

-(void) command_getI2of5convertToEan13:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5convertToEan13:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5convertToEan13:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5convertToEan13_caller getSharedInstance] command_getI2of5convertToEan13:caller_params];
}

+(void) getI2of5convertToEan13_in_thread:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5convertToEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5convertToEan13:) withObject:caller_params];
}

+(void) getI2of5convertToEan13_in_UI_thread:(rb_BarcodeChainway_getI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5convertToEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5convertToEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5convertToEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5convertToEan13"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5convertToEan13_caller getI2of5convertToEan13_in_thread:[rb_BarcodeChainway_getI2of5convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5convertToEan13_caller getI2of5convertToEan13:[rb_BarcodeChainway_getI2of5convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5convertToEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5convertToEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5convertToEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5convertToEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5convertToEan13_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5convertToEan13_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5convertToEan13_caller_params* par = [[[rb_BarcodeChainway_setI2of5convertToEan13_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5convertToEan13_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5convertToEan13_caller*) getSharedInstance;
+(void) setI2of5convertToEan13:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params;
+(void) setI2of5convertToEan13_in_thread:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params;
+(void) setI2of5convertToEan13_in_UI_thread:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5convertToEan13_caller* our_BarcodeChainway_setI2of5convertToEan13_caller = nil;

@implementation rb_BarcodeChainway_setI2of5convertToEan13_caller

+(rb_BarcodeChainway_setI2of5convertToEan13_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5convertToEan13_caller == nil) {
        our_BarcodeChainway_setI2of5convertToEan13_caller = [[rb_BarcodeChainway_setI2of5convertToEan13_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5convertToEan13_caller;
}

-(void) command_setI2of5convertToEan13:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5convertToEan13:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5convertToEan13:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5convertToEan13_caller getSharedInstance] command_setI2of5convertToEan13:caller_params];
}

+(void) setI2of5convertToEan13_in_thread:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5convertToEan13_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5convertToEan13:) withObject:caller_params];
}

+(void) setI2of5convertToEan13_in_UI_thread:(rb_BarcodeChainway_setI2of5convertToEan13_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5convertToEan13_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5convertToEan13:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5convertToEan13_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5convertToEan13="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5convertToEan13_caller setI2of5convertToEan13_in_thread:[rb_BarcodeChainway_setI2of5convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5convertToEan13_caller setI2of5convertToEan13:[rb_BarcodeChainway_setI2of5convertToEan13_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5convertToEan13(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5convertToEan13_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5convertToEan13(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5convertToEan13_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_getI2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5maxLength_caller*) getSharedInstance;
+(void) getI2of5maxLength:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params;
+(void) getI2of5maxLength_in_thread:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params;
+(void) getI2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5maxLength_caller* our_BarcodeChainway_getI2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_getI2of5maxLength_caller

+(rb_BarcodeChainway_getI2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5maxLength_caller == nil) {
        our_BarcodeChainway_getI2of5maxLength_caller = [[rb_BarcodeChainway_getI2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5maxLength_caller;
}

-(void) command_getI2of5maxLength:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5maxLength:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5maxLength_caller getSharedInstance] command_getI2of5maxLength:caller_params];
}

+(void) getI2of5maxLength_in_thread:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5maxLength:) withObject:caller_params];
}

+(void) getI2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5maxLength_caller getI2of5maxLength_in_thread:[rb_BarcodeChainway_getI2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5maxLength_caller getI2of5maxLength:[rb_BarcodeChainway_getI2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_setI2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5maxLength_caller*) getSharedInstance;
+(void) setI2of5maxLength:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params;
+(void) setI2of5maxLength_in_thread:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params;
+(void) setI2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5maxLength_caller* our_BarcodeChainway_setI2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_setI2of5maxLength_caller

+(rb_BarcodeChainway_setI2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5maxLength_caller == nil) {
        our_BarcodeChainway_setI2of5maxLength_caller = [[rb_BarcodeChainway_setI2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5maxLength_caller;
}

-(void) command_setI2of5maxLength:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5maxLength:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5maxLength_caller getSharedInstance] command_setI2of5maxLength:caller_params];
}

+(void) setI2of5maxLength_in_thread:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5maxLength:) withObject:caller_params];
}

+(void) setI2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setI2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5maxLength_caller setI2of5maxLength_in_thread:[rb_BarcodeChainway_setI2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5maxLength_caller setI2of5maxLength:[rb_BarcodeChainway_setI2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5minLength_caller_params* par = [[[rb_BarcodeChainway_getI2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5minLength_caller*) getSharedInstance;
+(void) getI2of5minLength:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params;
+(void) getI2of5minLength_in_thread:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params;
+(void) getI2of5minLength_in_UI_thread:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5minLength_caller* our_BarcodeChainway_getI2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_getI2of5minLength_caller

+(rb_BarcodeChainway_getI2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5minLength_caller == nil) {
        our_BarcodeChainway_getI2of5minLength_caller = [[rb_BarcodeChainway_getI2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5minLength_caller;
}

-(void) command_getI2of5minLength:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5minLength:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5minLength_caller getSharedInstance] command_getI2of5minLength:caller_params];
}

+(void) getI2of5minLength_in_thread:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5minLength:) withObject:caller_params];
}

+(void) getI2of5minLength_in_UI_thread:(rb_BarcodeChainway_getI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5minLength_caller getI2of5minLength_in_thread:[rb_BarcodeChainway_getI2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5minLength_caller getI2of5minLength:[rb_BarcodeChainway_getI2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5minLength_caller_params* par = [[[rb_BarcodeChainway_setI2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5minLength_caller*) getSharedInstance;
+(void) setI2of5minLength:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params;
+(void) setI2of5minLength_in_thread:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params;
+(void) setI2of5minLength_in_UI_thread:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5minLength_caller* our_BarcodeChainway_setI2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_setI2of5minLength_caller

+(rb_BarcodeChainway_setI2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5minLength_caller == nil) {
        our_BarcodeChainway_setI2of5minLength_caller = [[rb_BarcodeChainway_setI2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5minLength_caller;
}

-(void) command_setI2of5minLength:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5minLength:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5minLength_caller getSharedInstance] command_setI2of5minLength:caller_params];
}

+(void) setI2of5minLength_in_thread:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5minLength:) withObject:caller_params];
}

+(void) setI2of5minLength_in_UI_thread:(rb_BarcodeChainway_setI2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5minLength_caller setI2of5minLength_in_thread:[rb_BarcodeChainway_setI2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5minLength_caller setI2of5minLength:[rb_BarcodeChainway_setI2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5redundancy_caller_params* par = [[[rb_BarcodeChainway_getI2of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5redundancy_caller*) getSharedInstance;
+(void) getI2of5redundancy:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params;
+(void) getI2of5redundancy_in_thread:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params;
+(void) getI2of5redundancy_in_UI_thread:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5redundancy_caller* our_BarcodeChainway_getI2of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_getI2of5redundancy_caller

+(rb_BarcodeChainway_getI2of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5redundancy_caller == nil) {
        our_BarcodeChainway_getI2of5redundancy_caller = [[rb_BarcodeChainway_getI2of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5redundancy_caller;
}

-(void) command_getI2of5redundancy:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5redundancy:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5redundancy_caller getSharedInstance] command_getI2of5redundancy:caller_params];
}

+(void) getI2of5redundancy_in_thread:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5redundancy:) withObject:caller_params];
}

+(void) getI2of5redundancy_in_UI_thread:(rb_BarcodeChainway_getI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5redundancy_caller getI2of5redundancy_in_thread:[rb_BarcodeChainway_getI2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5redundancy_caller getI2of5redundancy:[rb_BarcodeChainway_getI2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5redundancy_caller_params* par = [[[rb_BarcodeChainway_setI2of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5redundancy_caller*) getSharedInstance;
+(void) setI2of5redundancy:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params;
+(void) setI2of5redundancy_in_thread:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params;
+(void) setI2of5redundancy_in_UI_thread:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5redundancy_caller* our_BarcodeChainway_setI2of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_setI2of5redundancy_caller

+(rb_BarcodeChainway_setI2of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5redundancy_caller == nil) {
        our_BarcodeChainway_setI2of5redundancy_caller = [[rb_BarcodeChainway_setI2of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5redundancy_caller;
}

-(void) command_setI2of5redundancy:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5redundancy:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5redundancy_caller getSharedInstance] command_setI2of5redundancy:caller_params];
}

+(void) setI2of5redundancy_in_thread:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5redundancy:) withObject:caller_params];
}

+(void) setI2of5redundancy_in_UI_thread:(rb_BarcodeChainway_setI2of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5redundancy_caller setI2of5redundancy_in_thread:[rb_BarcodeChainway_setI2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5redundancy_caller setI2of5redundancy:[rb_BarcodeChainway_setI2of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5reportCheckDigit_caller*) getSharedInstance;
+(void) getI2of5reportCheckDigit:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params;
+(void) getI2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params;
+(void) getI2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5reportCheckDigit_caller* our_BarcodeChainway_getI2of5reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getI2of5reportCheckDigit_caller

+(rb_BarcodeChainway_getI2of5reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getI2of5reportCheckDigit_caller = [[rb_BarcodeChainway_getI2of5reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5reportCheckDigit_caller;
}

-(void) command_getI2of5reportCheckDigit:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5reportCheckDigit:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5reportCheckDigit_caller getSharedInstance] command_getI2of5reportCheckDigit:caller_params];
}

+(void) getI2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5reportCheckDigit:) withObject:caller_params];
}

+(void) getI2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5reportCheckDigit_caller getI2of5reportCheckDigit_in_thread:[rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5reportCheckDigit_caller getI2of5reportCheckDigit:[rb_BarcodeChainway_getI2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5reportCheckDigit_caller*) getSharedInstance;
+(void) setI2of5reportCheckDigit:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params;
+(void) setI2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params;
+(void) setI2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5reportCheckDigit_caller* our_BarcodeChainway_setI2of5reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setI2of5reportCheckDigit_caller

+(rb_BarcodeChainway_setI2of5reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setI2of5reportCheckDigit_caller = [[rb_BarcodeChainway_setI2of5reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5reportCheckDigit_caller;
}

-(void) command_setI2of5reportCheckDigit:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5reportCheckDigit:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5reportCheckDigit_caller getSharedInstance] command_setI2of5reportCheckDigit:caller_params];
}

+(void) setI2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5reportCheckDigit:) withObject:caller_params];
}

+(void) setI2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5reportCheckDigit_caller setI2of5reportCheckDigit_in_thread:[rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5reportCheckDigit_caller setI2of5reportCheckDigit:[rb_BarcodeChainway_setI2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getI2of5verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller*) getSharedInstance;
+(void) getI2of5verifyCheckDigit:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params;
+(void) getI2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params;
+(void) getI2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getI2of5verifyCheckDigit_caller* our_BarcodeChainway_getI2of5verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getI2of5verifyCheckDigit_caller

+(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getI2of5verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_getI2of5verifyCheckDigit_caller = [[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getI2of5verifyCheckDigit_caller;
}

-(void) command_getI2of5verifyCheckDigit:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getI2of5verifyCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getI2of5verifyCheckDigit:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller getSharedInstance] command_getI2of5verifyCheckDigit:caller_params];
}

+(void) getI2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getI2of5verifyCheckDigit:) withObject:caller_params];
}

+(void) getI2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getI2of5verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getI2of5verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5verifyCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getI2of5verifyCheckDigit_caller getI2of5verifyCheckDigit_in_thread:[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getI2of5verifyCheckDigit_caller getI2of5verifyCheckDigit:[rb_BarcodeChainway_getI2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getI2of5verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getI2of5verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getI2of5verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getI2of5verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setI2of5verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller*) getSharedInstance;
+(void) setI2of5verifyCheckDigit:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params;
+(void) setI2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params;
+(void) setI2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setI2of5verifyCheckDigit_caller* our_BarcodeChainway_setI2of5verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setI2of5verifyCheckDigit_caller

+(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setI2of5verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_setI2of5verifyCheckDigit_caller = [[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setI2of5verifyCheckDigit_caller;
}

-(void) command_setI2of5verifyCheckDigit:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setI2of5verifyCheckDigit:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setI2of5verifyCheckDigit:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller getSharedInstance] command_setI2of5verifyCheckDigit:caller_params];
}

+(void) setI2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setI2of5verifyCheckDigit:) withObject:caller_params];
}

+(void) setI2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setI2of5verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setI2of5verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::i2of5verifyCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setI2of5verifyCheckDigit_caller setI2of5verifyCheckDigit_in_thread:[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setI2of5verifyCheckDigit_caller setI2of5verifyCheckDigit:[rb_BarcodeChainway_setI2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setI2of5verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setI2of5verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setI2of5verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setI2of5verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getKorean3of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getKorean3of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getKorean3of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getKorean3of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getKorean3of5_caller_params* par = [[[rb_BarcodeChainway_getKorean3of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getKorean3of5_caller : NSObject {

}
+(rb_BarcodeChainway_getKorean3of5_caller*) getSharedInstance;
+(void) getKorean3of5:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params;
+(void) getKorean3of5_in_thread:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params;
+(void) getKorean3of5_in_UI_thread:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getKorean3of5_caller* our_BarcodeChainway_getKorean3of5_caller = nil;

@implementation rb_BarcodeChainway_getKorean3of5_caller

+(rb_BarcodeChainway_getKorean3of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getKorean3of5_caller == nil) {
        our_BarcodeChainway_getKorean3of5_caller = [[rb_BarcodeChainway_getKorean3of5_caller alloc] init];
    }
    return our_BarcodeChainway_getKorean3of5_caller;
}

-(void) command_getKorean3of5:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getKorean3of5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getKorean3of5:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5_caller getSharedInstance] command_getKorean3of5:caller_params];
}

+(void) getKorean3of5_in_thread:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5_caller getSharedInstance] performSelectorInBackground:@selector(command_getKorean3of5:) withObject:caller_params];
}

+(void) getKorean3of5_in_UI_thread:(rb_BarcodeChainway_getKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getKorean3of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getKorean3of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getKorean3of5_caller getKorean3of5_in_thread:[rb_BarcodeChainway_getKorean3of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getKorean3of5_caller getKorean3of5:[rb_BarcodeChainway_getKorean3of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getKorean3of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getKorean3of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getKorean3of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getKorean3of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setKorean3of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setKorean3of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setKorean3of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setKorean3of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setKorean3of5_caller_params* par = [[[rb_BarcodeChainway_setKorean3of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setKorean3of5_caller : NSObject {

}
+(rb_BarcodeChainway_setKorean3of5_caller*) getSharedInstance;
+(void) setKorean3of5:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params;
+(void) setKorean3of5_in_thread:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params;
+(void) setKorean3of5_in_UI_thread:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setKorean3of5_caller* our_BarcodeChainway_setKorean3of5_caller = nil;

@implementation rb_BarcodeChainway_setKorean3of5_caller

+(rb_BarcodeChainway_setKorean3of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setKorean3of5_caller == nil) {
        our_BarcodeChainway_setKorean3of5_caller = [[rb_BarcodeChainway_setKorean3of5_caller alloc] init];
    }
    return our_BarcodeChainway_setKorean3of5_caller;
}

-(void) command_setKorean3of5:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setKorean3of5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setKorean3of5:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5_caller getSharedInstance] command_setKorean3of5:caller_params];
}

+(void) setKorean3of5_in_thread:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5_caller getSharedInstance] performSelectorInBackground:@selector(command_setKorean3of5:) withObject:caller_params];
}

+(void) setKorean3of5_in_UI_thread:(rb_BarcodeChainway_setKorean3of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setKorean3of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setKorean3of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setKorean3of5_caller setKorean3of5_in_thread:[rb_BarcodeChainway_setKorean3of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setKorean3of5_caller setKorean3of5:[rb_BarcodeChainway_setKorean3of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setKorean3of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setKorean3of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setKorean3of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setKorean3of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getKorean3of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getKorean3of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getKorean3of5redundancy_caller_params* par = [[[rb_BarcodeChainway_getKorean3of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getKorean3of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getKorean3of5redundancy_caller*) getSharedInstance;
+(void) getKorean3of5redundancy:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params;
+(void) getKorean3of5redundancy_in_thread:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params;
+(void) getKorean3of5redundancy_in_UI_thread:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getKorean3of5redundancy_caller* our_BarcodeChainway_getKorean3of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_getKorean3of5redundancy_caller

+(rb_BarcodeChainway_getKorean3of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getKorean3of5redundancy_caller == nil) {
        our_BarcodeChainway_getKorean3of5redundancy_caller = [[rb_BarcodeChainway_getKorean3of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getKorean3of5redundancy_caller;
}

-(void) command_getKorean3of5redundancy:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getKorean3of5redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getKorean3of5redundancy:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5redundancy_caller getSharedInstance] command_getKorean3of5redundancy:caller_params];
}

+(void) getKorean3of5redundancy_in_thread:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getKorean3of5redundancy:) withObject:caller_params];
}

+(void) getKorean3of5redundancy_in_UI_thread:(rb_BarcodeChainway_getKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getKorean3of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getKorean3of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getKorean3of5redundancy_caller getKorean3of5redundancy_in_thread:[rb_BarcodeChainway_getKorean3of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getKorean3of5redundancy_caller getKorean3of5redundancy:[rb_BarcodeChainway_getKorean3of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getKorean3of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getKorean3of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getKorean3of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getKorean3of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setKorean3of5redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setKorean3of5redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setKorean3of5redundancy_caller_params* par = [[[rb_BarcodeChainway_setKorean3of5redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setKorean3of5redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setKorean3of5redundancy_caller*) getSharedInstance;
+(void) setKorean3of5redundancy:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params;
+(void) setKorean3of5redundancy_in_thread:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params;
+(void) setKorean3of5redundancy_in_UI_thread:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setKorean3of5redundancy_caller* our_BarcodeChainway_setKorean3of5redundancy_caller = nil;

@implementation rb_BarcodeChainway_setKorean3of5redundancy_caller

+(rb_BarcodeChainway_setKorean3of5redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setKorean3of5redundancy_caller == nil) {
        our_BarcodeChainway_setKorean3of5redundancy_caller = [[rb_BarcodeChainway_setKorean3of5redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setKorean3of5redundancy_caller;
}

-(void) command_setKorean3of5redundancy:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setKorean3of5redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setKorean3of5redundancy:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5redundancy_caller getSharedInstance] command_setKorean3of5redundancy:caller_params];
}

+(void) setKorean3of5redundancy_in_thread:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setKorean3of5redundancy:) withObject:caller_params];
}

+(void) setKorean3of5redundancy_in_UI_thread:(rb_BarcodeChainway_setKorean3of5redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setKorean3of5redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setKorean3of5redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setKorean3of5redundancy_caller setKorean3of5redundancy_in_thread:[rb_BarcodeChainway_setKorean3of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setKorean3of5redundancy_caller setKorean3of5redundancy:[rb_BarcodeChainway_setKorean3of5redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setKorean3of5redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setKorean3of5redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setKorean3of5redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setKorean3of5redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getKorean3of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getKorean3of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getKorean3of5maxLength_caller_params* par = [[[rb_BarcodeChainway_getKorean3of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getKorean3of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getKorean3of5maxLength_caller*) getSharedInstance;
+(void) getKorean3of5maxLength:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params;
+(void) getKorean3of5maxLength_in_thread:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params;
+(void) getKorean3of5maxLength_in_UI_thread:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getKorean3of5maxLength_caller* our_BarcodeChainway_getKorean3of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_getKorean3of5maxLength_caller

+(rb_BarcodeChainway_getKorean3of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getKorean3of5maxLength_caller == nil) {
        our_BarcodeChainway_getKorean3of5maxLength_caller = [[rb_BarcodeChainway_getKorean3of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getKorean3of5maxLength_caller;
}

-(void) command_getKorean3of5maxLength:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getKorean3of5maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getKorean3of5maxLength:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5maxLength_caller getSharedInstance] command_getKorean3of5maxLength:caller_params];
}

+(void) getKorean3of5maxLength_in_thread:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getKorean3of5maxLength:) withObject:caller_params];
}

+(void) getKorean3of5maxLength_in_UI_thread:(rb_BarcodeChainway_getKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getKorean3of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getKorean3of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getKorean3of5maxLength_caller getKorean3of5maxLength_in_thread:[rb_BarcodeChainway_getKorean3of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getKorean3of5maxLength_caller getKorean3of5maxLength:[rb_BarcodeChainway_getKorean3of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getKorean3of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getKorean3of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getKorean3of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getKorean3of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setKorean3of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setKorean3of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setKorean3of5maxLength_caller_params* par = [[[rb_BarcodeChainway_setKorean3of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setKorean3of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setKorean3of5maxLength_caller*) getSharedInstance;
+(void) setKorean3of5maxLength:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params;
+(void) setKorean3of5maxLength_in_thread:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params;
+(void) setKorean3of5maxLength_in_UI_thread:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setKorean3of5maxLength_caller* our_BarcodeChainway_setKorean3of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_setKorean3of5maxLength_caller

+(rb_BarcodeChainway_setKorean3of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setKorean3of5maxLength_caller == nil) {
        our_BarcodeChainway_setKorean3of5maxLength_caller = [[rb_BarcodeChainway_setKorean3of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setKorean3of5maxLength_caller;
}

-(void) command_setKorean3of5maxLength:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setKorean3of5maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setKorean3of5maxLength:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5maxLength_caller getSharedInstance] command_setKorean3of5maxLength:caller_params];
}

+(void) setKorean3of5maxLength_in_thread:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setKorean3of5maxLength:) withObject:caller_params];
}

+(void) setKorean3of5maxLength_in_UI_thread:(rb_BarcodeChainway_setKorean3of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setKorean3of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setKorean3of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setKorean3of5maxLength_caller setKorean3of5maxLength_in_thread:[rb_BarcodeChainway_setKorean3of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setKorean3of5maxLength_caller setKorean3of5maxLength:[rb_BarcodeChainway_setKorean3of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setKorean3of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setKorean3of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setKorean3of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setKorean3of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getKorean3of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getKorean3of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getKorean3of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getKorean3of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getKorean3of5minLength_caller_params* par = [[[rb_BarcodeChainway_getKorean3of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getKorean3of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getKorean3of5minLength_caller*) getSharedInstance;
+(void) getKorean3of5minLength:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params;
+(void) getKorean3of5minLength_in_thread:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params;
+(void) getKorean3of5minLength_in_UI_thread:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getKorean3of5minLength_caller* our_BarcodeChainway_getKorean3of5minLength_caller = nil;

@implementation rb_BarcodeChainway_getKorean3of5minLength_caller

+(rb_BarcodeChainway_getKorean3of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getKorean3of5minLength_caller == nil) {
        our_BarcodeChainway_getKorean3of5minLength_caller = [[rb_BarcodeChainway_getKorean3of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getKorean3of5minLength_caller;
}

-(void) command_getKorean3of5minLength:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getKorean3of5minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getKorean3of5minLength:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5minLength_caller getSharedInstance] command_getKorean3of5minLength:caller_params];
}

+(void) getKorean3of5minLength_in_thread:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getKorean3of5minLength:) withObject:caller_params];
}

+(void) getKorean3of5minLength_in_UI_thread:(rb_BarcodeChainway_getKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getKorean3of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getKorean3of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getKorean3of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getKorean3of5minLength_caller getKorean3of5minLength_in_thread:[rb_BarcodeChainway_getKorean3of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getKorean3of5minLength_caller getKorean3of5minLength:[rb_BarcodeChainway_getKorean3of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getKorean3of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getKorean3of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getKorean3of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getKorean3of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setKorean3of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setKorean3of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setKorean3of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setKorean3of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setKorean3of5minLength_caller_params* par = [[[rb_BarcodeChainway_setKorean3of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setKorean3of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setKorean3of5minLength_caller*) getSharedInstance;
+(void) setKorean3of5minLength:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params;
+(void) setKorean3of5minLength_in_thread:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params;
+(void) setKorean3of5minLength_in_UI_thread:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setKorean3of5minLength_caller* our_BarcodeChainway_setKorean3of5minLength_caller = nil;

@implementation rb_BarcodeChainway_setKorean3of5minLength_caller

+(rb_BarcodeChainway_setKorean3of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setKorean3of5minLength_caller == nil) {
        our_BarcodeChainway_setKorean3of5minLength_caller = [[rb_BarcodeChainway_setKorean3of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setKorean3of5minLength_caller;
}

-(void) command_setKorean3of5minLength:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setKorean3of5minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setKorean3of5minLength:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5minLength_caller getSharedInstance] command_setKorean3of5minLength:caller_params];
}

+(void) setKorean3of5minLength_in_thread:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setKorean3of5minLength:) withObject:caller_params];
}

+(void) setKorean3of5minLength_in_UI_thread:(rb_BarcodeChainway_setKorean3of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setKorean3of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setKorean3of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setKorean3of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::korean3of5minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setKorean3of5minLength_caller setKorean3of5minLength_in_thread:[rb_BarcodeChainway_setKorean3of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setKorean3of5minLength_caller setKorean3of5minLength:[rb_BarcodeChainway_setKorean3of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setKorean3of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setKorean3of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setKorean3of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setKorean3of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroPdf_caller_params* par = [[[rb_BarcodeChainway_getMacroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroPdf_caller*) getSharedInstance;
+(void) getMacroPdf:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params;
+(void) getMacroPdf_in_thread:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params;
+(void) getMacroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroPdf_caller* our_BarcodeChainway_getMacroPdf_caller = nil;

@implementation rb_BarcodeChainway_getMacroPdf_caller

+(rb_BarcodeChainway_getMacroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroPdf_caller == nil) {
        our_BarcodeChainway_getMacroPdf_caller = [[rb_BarcodeChainway_getMacroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroPdf_caller;
}

-(void) command_getMacroPdf:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroPdf:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroPdf:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdf_caller getSharedInstance] command_getMacroPdf:caller_params];
}

+(void) getMacroPdf_in_thread:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroPdf:) withObject:caller_params];
}

+(void) getMacroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdf"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroPdf_caller getMacroPdf_in_thread:[rb_BarcodeChainway_getMacroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroPdf_caller getMacroPdf:[rb_BarcodeChainway_getMacroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroPdf_caller_params* par = [[[rb_BarcodeChainway_setMacroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroPdf_caller*) getSharedInstance;
+(void) setMacroPdf:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params;
+(void) setMacroPdf_in_thread:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params;
+(void) setMacroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroPdf_caller* our_BarcodeChainway_setMacroPdf_caller = nil;

@implementation rb_BarcodeChainway_setMacroPdf_caller

+(rb_BarcodeChainway_setMacroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroPdf_caller == nil) {
        our_BarcodeChainway_setMacroPdf_caller = [[rb_BarcodeChainway_setMacroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroPdf_caller;
}

-(void) command_setMacroPdf:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroPdf:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroPdf:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdf_caller getSharedInstance] command_setMacroPdf:caller_params];
}

+(void) setMacroPdf_in_thread:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroPdf:) withObject:caller_params];
}

+(void) setMacroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdf="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroPdf_caller setMacroPdf_in_thread:[rb_BarcodeChainway_setMacroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroPdf_caller setMacroPdf:[rb_BarcodeChainway_setMacroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params* par = [[[rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroPdfBufferLabels_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroPdfBufferLabels_caller*) getSharedInstance;
+(void) getMacroPdfBufferLabels:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params;
+(void) getMacroPdfBufferLabels_in_thread:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params;
+(void) getMacroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroPdfBufferLabels_caller* our_BarcodeChainway_getMacroPdfBufferLabels_caller = nil;

@implementation rb_BarcodeChainway_getMacroPdfBufferLabels_caller

+(rb_BarcodeChainway_getMacroPdfBufferLabels_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroPdfBufferLabels_caller == nil) {
        our_BarcodeChainway_getMacroPdfBufferLabels_caller = [[rb_BarcodeChainway_getMacroPdfBufferLabels_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroPdfBufferLabels_caller;
}

-(void) command_getMacroPdfBufferLabels:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroPdfBufferLabels:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroPdfBufferLabels:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfBufferLabels_caller getSharedInstance] command_getMacroPdfBufferLabels:caller_params];
}

+(void) getMacroPdfBufferLabels_in_thread:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfBufferLabels_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroPdfBufferLabels:) withObject:caller_params];
}

+(void) getMacroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfBufferLabels_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroPdfBufferLabels:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroPdfBufferLabels_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfBufferLabels"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroPdfBufferLabels_caller getMacroPdfBufferLabels_in_thread:[rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroPdfBufferLabels_caller getMacroPdfBufferLabels:[rb_BarcodeChainway_getMacroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroPdfBufferLabels(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroPdfBufferLabels_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroPdfBufferLabels(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroPdfBufferLabels_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params* par = [[[rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroPdfBufferLabels_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroPdfBufferLabels_caller*) getSharedInstance;
+(void) setMacroPdfBufferLabels:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params;
+(void) setMacroPdfBufferLabels_in_thread:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params;
+(void) setMacroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroPdfBufferLabels_caller* our_BarcodeChainway_setMacroPdfBufferLabels_caller = nil;

@implementation rb_BarcodeChainway_setMacroPdfBufferLabels_caller

+(rb_BarcodeChainway_setMacroPdfBufferLabels_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroPdfBufferLabels_caller == nil) {
        our_BarcodeChainway_setMacroPdfBufferLabels_caller = [[rb_BarcodeChainway_setMacroPdfBufferLabels_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroPdfBufferLabels_caller;
}

-(void) command_setMacroPdfBufferLabels:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroPdfBufferLabels:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroPdfBufferLabels:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfBufferLabels_caller getSharedInstance] command_setMacroPdfBufferLabels:caller_params];
}

+(void) setMacroPdfBufferLabels_in_thread:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfBufferLabels_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroPdfBufferLabels:) withObject:caller_params];
}

+(void) setMacroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfBufferLabels_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroPdfBufferLabels:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroPdfBufferLabels_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfBufferLabels="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroPdfBufferLabels_caller setMacroPdfBufferLabels_in_thread:[rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroPdfBufferLabels_caller setMacroPdfBufferLabels:[rb_BarcodeChainway_setMacroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroPdfBufferLabels(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroPdfBufferLabels_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroPdfBufferLabels(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroPdfBufferLabels_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params* par = [[[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller*) getSharedInstance;
+(void) getMacroPdfConvertToPdf417:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params;
+(void) getMacroPdfConvertToPdf417_in_thread:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params;
+(void) getMacroPdfConvertToPdf417_in_UI_thread:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller* our_BarcodeChainway_getMacroPdfConvertToPdf417_caller = nil;

@implementation rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller

+(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroPdfConvertToPdf417_caller == nil) {
        our_BarcodeChainway_getMacroPdfConvertToPdf417_caller = [[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroPdfConvertToPdf417_caller;
}

-(void) command_getMacroPdfConvertToPdf417:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroPdfConvertToPdf417:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroPdfConvertToPdf417:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller getSharedInstance] command_getMacroPdfConvertToPdf417:caller_params];
}

+(void) getMacroPdfConvertToPdf417_in_thread:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroPdfConvertToPdf417:) withObject:caller_params];
}

+(void) getMacroPdfConvertToPdf417_in_UI_thread:(rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroPdfConvertToPdf417:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroPdfConvertToPdf417_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfConvertToPdf417"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller getMacroPdfConvertToPdf417_in_thread:[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller getMacroPdfConvertToPdf417:[rb_BarcodeChainway_getMacroPdfConvertToPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroPdfConvertToPdf417(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroPdfConvertToPdf417_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroPdfConvertToPdf417(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroPdfConvertToPdf417_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params* par = [[[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller*) getSharedInstance;
+(void) setMacroPdfConvertToPdf417:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params;
+(void) setMacroPdfConvertToPdf417_in_thread:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params;
+(void) setMacroPdfConvertToPdf417_in_UI_thread:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller* our_BarcodeChainway_setMacroPdfConvertToPdf417_caller = nil;

@implementation rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller

+(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroPdfConvertToPdf417_caller == nil) {
        our_BarcodeChainway_setMacroPdfConvertToPdf417_caller = [[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroPdfConvertToPdf417_caller;
}

-(void) command_setMacroPdfConvertToPdf417:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroPdfConvertToPdf417:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroPdfConvertToPdf417:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller getSharedInstance] command_setMacroPdfConvertToPdf417:caller_params];
}

+(void) setMacroPdfConvertToPdf417_in_thread:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroPdfConvertToPdf417:) withObject:caller_params];
}

+(void) setMacroPdfConvertToPdf417_in_UI_thread:(rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroPdfConvertToPdf417:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroPdfConvertToPdf417_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfConvertToPdf417="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller setMacroPdfConvertToPdf417_in_thread:[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller setMacroPdfConvertToPdf417:[rb_BarcodeChainway_setMacroPdfConvertToPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroPdfConvertToPdf417(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroPdfConvertToPdf417_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroPdfConvertToPdf417(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroPdfConvertToPdf417_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroPdfExclusive_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroPdfExclusive_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroPdfExclusive_caller_params* par = [[[rb_BarcodeChainway_getMacroPdfExclusive_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroPdfExclusive_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroPdfExclusive_caller*) getSharedInstance;
+(void) getMacroPdfExclusive:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params;
+(void) getMacroPdfExclusive_in_thread:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params;
+(void) getMacroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroPdfExclusive_caller* our_BarcodeChainway_getMacroPdfExclusive_caller = nil;

@implementation rb_BarcodeChainway_getMacroPdfExclusive_caller

+(rb_BarcodeChainway_getMacroPdfExclusive_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroPdfExclusive_caller == nil) {
        our_BarcodeChainway_getMacroPdfExclusive_caller = [[rb_BarcodeChainway_getMacroPdfExclusive_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroPdfExclusive_caller;
}

-(void) command_getMacroPdfExclusive:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroPdfExclusive:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroPdfExclusive:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfExclusive_caller getSharedInstance] command_getMacroPdfExclusive:caller_params];
}

+(void) getMacroPdfExclusive_in_thread:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfExclusive_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroPdfExclusive:) withObject:caller_params];
}

+(void) getMacroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_getMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroPdfExclusive_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroPdfExclusive:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroPdfExclusive_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfExclusive"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroPdfExclusive_caller getMacroPdfExclusive_in_thread:[rb_BarcodeChainway_getMacroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroPdfExclusive_caller getMacroPdfExclusive:[rb_BarcodeChainway_getMacroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroPdfExclusive(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroPdfExclusive_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroPdfExclusive(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroPdfExclusive_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroPdfExclusive_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroPdfExclusive_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroPdfExclusive_caller_params* par = [[[rb_BarcodeChainway_setMacroPdfExclusive_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroPdfExclusive_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroPdfExclusive_caller*) getSharedInstance;
+(void) setMacroPdfExclusive:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params;
+(void) setMacroPdfExclusive_in_thread:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params;
+(void) setMacroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroPdfExclusive_caller* our_BarcodeChainway_setMacroPdfExclusive_caller = nil;

@implementation rb_BarcodeChainway_setMacroPdfExclusive_caller

+(rb_BarcodeChainway_setMacroPdfExclusive_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroPdfExclusive_caller == nil) {
        our_BarcodeChainway_setMacroPdfExclusive_caller = [[rb_BarcodeChainway_setMacroPdfExclusive_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroPdfExclusive_caller;
}

-(void) command_setMacroPdfExclusive:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroPdfExclusive:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroPdfExclusive:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfExclusive_caller getSharedInstance] command_setMacroPdfExclusive:caller_params];
}

+(void) setMacroPdfExclusive_in_thread:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfExclusive_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroPdfExclusive:) withObject:caller_params];
}

+(void) setMacroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_setMacroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroPdfExclusive_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroPdfExclusive:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroPdfExclusive_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroPdfExclusive="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroPdfExclusive_caller setMacroPdfExclusive_in_thread:[rb_BarcodeChainway_setMacroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroPdfExclusive_caller setMacroPdfExclusive:[rb_BarcodeChainway_setMacroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroPdfExclusive(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroPdfExclusive_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroPdfExclusive(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroPdfExclusive_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroMicroPdf_caller_params* par = [[[rb_BarcodeChainway_getMacroMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroMicroPdf_caller*) getSharedInstance;
+(void) getMacroMicroPdf:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params;
+(void) getMacroMicroPdf_in_thread:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params;
+(void) getMacroMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroMicroPdf_caller* our_BarcodeChainway_getMacroMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_getMacroMicroPdf_caller

+(rb_BarcodeChainway_getMacroMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroMicroPdf_caller == nil) {
        our_BarcodeChainway_getMacroMicroPdf_caller = [[rb_BarcodeChainway_getMacroMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroMicroPdf_caller;
}

-(void) command_getMacroMicroPdf:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroMicroPdf:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroMicroPdf:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdf_caller getSharedInstance] command_getMacroMicroPdf:caller_params];
}

+(void) getMacroMicroPdf_in_thread:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroMicroPdf:) withObject:caller_params];
}

+(void) getMacroMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdf"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroMicroPdf_caller getMacroMicroPdf_in_thread:[rb_BarcodeChainway_getMacroMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroMicroPdf_caller getMacroMicroPdf:[rb_BarcodeChainway_getMacroMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroMicroPdf_caller_params* par = [[[rb_BarcodeChainway_setMacroMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroMicroPdf_caller*) getSharedInstance;
+(void) setMacroMicroPdf:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params;
+(void) setMacroMicroPdf_in_thread:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params;
+(void) setMacroMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroMicroPdf_caller* our_BarcodeChainway_setMacroMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_setMacroMicroPdf_caller

+(rb_BarcodeChainway_setMacroMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroMicroPdf_caller == nil) {
        our_BarcodeChainway_setMacroMicroPdf_caller = [[rb_BarcodeChainway_setMacroMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroMicroPdf_caller;
}

-(void) command_setMacroMicroPdf:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroMicroPdf:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroMicroPdf:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdf_caller getSharedInstance] command_setMacroMicroPdf:caller_params];
}

+(void) setMacroMicroPdf_in_thread:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroMicroPdf:) withObject:caller_params];
}

+(void) setMacroMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdf="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroMicroPdf_caller setMacroMicroPdf_in_thread:[rb_BarcodeChainway_setMacroMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroMicroPdf_caller setMacroMicroPdf:[rb_BarcodeChainway_setMacroMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params* par = [[[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller*) getSharedInstance;
+(void) getMacroMicroPdfBufferLabels:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params;
+(void) getMacroMicroPdfBufferLabels_in_thread:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params;
+(void) getMacroMicroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller* our_BarcodeChainway_getMacroMicroPdfBufferLabels_caller = nil;

@implementation rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller

+(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroMicroPdfBufferLabels_caller == nil) {
        our_BarcodeChainway_getMacroMicroPdfBufferLabels_caller = [[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroMicroPdfBufferLabels_caller;
}

-(void) command_getMacroMicroPdfBufferLabels:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroMicroPdfBufferLabels:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroMicroPdfBufferLabels:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller getSharedInstance] command_getMacroMicroPdfBufferLabels:caller_params];
}

+(void) getMacroMicroPdfBufferLabels_in_thread:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroMicroPdfBufferLabels:) withObject:caller_params];
}

+(void) getMacroMicroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroMicroPdfBufferLabels:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroMicroPdfBufferLabels_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfBufferLabels"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller getMacroMicroPdfBufferLabels_in_thread:[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller getMacroMicroPdfBufferLabels:[rb_BarcodeChainway_getMacroMicroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroMicroPdfBufferLabels(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroMicroPdfBufferLabels_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroMicroPdfBufferLabels(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroMicroPdfBufferLabels_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params* par = [[[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller*) getSharedInstance;
+(void) setMacroMicroPdfBufferLabels:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params;
+(void) setMacroMicroPdfBufferLabels_in_thread:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params;
+(void) setMacroMicroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller* our_BarcodeChainway_setMacroMicroPdfBufferLabels_caller = nil;

@implementation rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller

+(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroMicroPdfBufferLabels_caller == nil) {
        our_BarcodeChainway_setMacroMicroPdfBufferLabels_caller = [[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroMicroPdfBufferLabels_caller;
}

-(void) command_setMacroMicroPdfBufferLabels:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroMicroPdfBufferLabels:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroMicroPdfBufferLabels:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller getSharedInstance] command_setMacroMicroPdfBufferLabels:caller_params];
}

+(void) setMacroMicroPdfBufferLabels_in_thread:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroMicroPdfBufferLabels:) withObject:caller_params];
}

+(void) setMacroMicroPdfBufferLabels_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroMicroPdfBufferLabels:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroMicroPdfBufferLabels_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfBufferLabels="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller setMacroMicroPdfBufferLabels_in_thread:[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller setMacroMicroPdfBufferLabels:[rb_BarcodeChainway_setMacroMicroPdfBufferLabels_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroMicroPdfBufferLabels(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroMicroPdfBufferLabels_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroMicroPdfBufferLabels(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroMicroPdfBufferLabels_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params* par = [[[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller*) getSharedInstance;
+(void) getMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;
+(void) getMacroMicroPdfConvertToMicroPdf_in_thread:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;
+(void) getMacroMicroPdfConvertToMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller* our_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller

+(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller == nil) {
        our_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller = [[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller;
}

-(void) command_getMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroMicroPdfConvertToMicroPdf:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] command_getMacroMicroPdfConvertToMicroPdf:caller_params];
}

+(void) getMacroMicroPdfConvertToMicroPdf_in_thread:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroMicroPdfConvertToMicroPdf:) withObject:caller_params];
}

+(void) getMacroMicroPdfConvertToMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroMicroPdfConvertToMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfConvertToMicroPdf"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller getMacroMicroPdfConvertToMicroPdf_in_thread:[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller getMacroMicroPdfConvertToMicroPdf:[rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroMicroPdfConvertToMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroMicroPdfConvertToMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params* par = [[[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller*) getSharedInstance;
+(void) setMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;
+(void) setMacroMicroPdfConvertToMicroPdf_in_thread:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;
+(void) setMacroMicroPdfConvertToMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller* our_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller

+(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller == nil) {
        our_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller = [[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller;
}

-(void) command_setMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroMicroPdfConvertToMicroPdf:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroMicroPdfConvertToMicroPdf:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] command_setMacroMicroPdfConvertToMicroPdf:caller_params];
}

+(void) setMacroMicroPdfConvertToMicroPdf_in_thread:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroMicroPdfConvertToMicroPdf:) withObject:caller_params];
}

+(void) setMacroMicroPdfConvertToMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroMicroPdfConvertToMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfConvertToMicroPdf="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller setMacroMicroPdfConvertToMicroPdf_in_thread:[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller setMacroMicroPdfConvertToMicroPdf:[rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroMicroPdfConvertToMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroMicroPdfConvertToMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params* par = [[[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroMicroPdfExclusive_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller*) getSharedInstance;
+(void) getMacroMicroPdfExclusive:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params;
+(void) getMacroMicroPdfExclusive_in_thread:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params;
+(void) getMacroMicroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroMicroPdfExclusive_caller* our_BarcodeChainway_getMacroMicroPdfExclusive_caller = nil;

@implementation rb_BarcodeChainway_getMacroMicroPdfExclusive_caller

+(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroMicroPdfExclusive_caller == nil) {
        our_BarcodeChainway_getMacroMicroPdfExclusive_caller = [[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroMicroPdfExclusive_caller;
}

-(void) command_getMacroMicroPdfExclusive:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroMicroPdfExclusive:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroMicroPdfExclusive:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller getSharedInstance] command_getMacroMicroPdfExclusive:caller_params];
}

+(void) getMacroMicroPdfExclusive_in_thread:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroMicroPdfExclusive:) withObject:caller_params];
}

+(void) getMacroMicroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroMicroPdfExclusive:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroMicroPdfExclusive_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfExclusive"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroMicroPdfExclusive_caller getMacroMicroPdfExclusive_in_thread:[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroMicroPdfExclusive_caller getMacroMicroPdfExclusive:[rb_BarcodeChainway_getMacroMicroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroMicroPdfExclusive(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroMicroPdfExclusive_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroMicroPdfExclusive(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroMicroPdfExclusive_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params* par = [[[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroMicroPdfExclusive_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller*) getSharedInstance;
+(void) setMacroMicroPdfExclusive:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params;
+(void) setMacroMicroPdfExclusive_in_thread:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params;
+(void) setMacroMicroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroMicroPdfExclusive_caller* our_BarcodeChainway_setMacroMicroPdfExclusive_caller = nil;

@implementation rb_BarcodeChainway_setMacroMicroPdfExclusive_caller

+(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroMicroPdfExclusive_caller == nil) {
        our_BarcodeChainway_setMacroMicroPdfExclusive_caller = [[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroMicroPdfExclusive_caller;
}

-(void) command_setMacroMicroPdfExclusive:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroMicroPdfExclusive:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroMicroPdfExclusive:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller getSharedInstance] command_setMacroMicroPdfExclusive:caller_params];
}

+(void) setMacroMicroPdfExclusive_in_thread:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroMicroPdfExclusive:) withObject:caller_params];
}

+(void) setMacroMicroPdfExclusive_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroMicroPdfExclusive:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroMicroPdfExclusive_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfExclusive="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroMicroPdfExclusive_caller setMacroMicroPdfExclusive_in_thread:[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroMicroPdfExclusive_caller setMacroMicroPdfExclusive:[rb_BarcodeChainway_setMacroMicroPdfExclusive_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroMicroPdfExclusive(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroMicroPdfExclusive_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroMicroPdfExclusive(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroMicroPdfExclusive_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params* par = [[[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller : NSObject {

}
+(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller*) getSharedInstance;
+(void) getMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params;
+(void) getMacroMicroPdfReportAppendInfo_in_thread:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params;
+(void) getMacroMicroPdfReportAppendInfo_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller* our_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller = nil;

@implementation rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller

+(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller == nil) {
        our_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller = [[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller alloc] init];
    }
    return our_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller;
}

-(void) command_getMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMacroMicroPdfReportAppendInfo:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller getSharedInstance] command_getMacroMicroPdfReportAppendInfo:caller_params];
}

+(void) getMacroMicroPdfReportAppendInfo_in_thread:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller getSharedInstance] performSelectorInBackground:@selector(command_getMacroMicroPdfReportAppendInfo:) withObject:caller_params];
}

+(void) getMacroMicroPdfReportAppendInfo_in_UI_thread:(rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMacroMicroPdfReportAppendInfo:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfReportAppendInfo"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller getMacroMicroPdfReportAppendInfo_in_thread:[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller getMacroMicroPdfReportAppendInfo:[rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMacroMicroPdfReportAppendInfo(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMacroMicroPdfReportAppendInfo_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params* par = [[[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller : NSObject {

}
+(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller*) getSharedInstance;
+(void) setMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params;
+(void) setMacroMicroPdfReportAppendInfo_in_thread:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params;
+(void) setMacroMicroPdfReportAppendInfo_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller* our_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller = nil;

@implementation rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller

+(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller == nil) {
        our_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller = [[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller alloc] init];
    }
    return our_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller;
}

-(void) command_setMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMacroMicroPdfReportAppendInfo:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMacroMicroPdfReportAppendInfo:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller getSharedInstance] command_setMacroMicroPdfReportAppendInfo:caller_params];
}

+(void) setMacroMicroPdfReportAppendInfo_in_thread:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller getSharedInstance] performSelectorInBackground:@selector(command_setMacroMicroPdfReportAppendInfo:) withObject:caller_params];
}

+(void) setMacroMicroPdfReportAppendInfo_in_UI_thread:(rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMacroMicroPdfReportAppendInfo:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::macroMicroPdfReportAppendInfo="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller setMacroMicroPdfReportAppendInfo_in_thread:[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller setMacroMicroPdfReportAppendInfo:[rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMacroMicroPdfReportAppendInfo(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMacroMicroPdfReportAppendInfo_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMatrix2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMatrix2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMatrix2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMatrix2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMatrix2of5_caller_params* par = [[[rb_BarcodeChainway_getMatrix2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMatrix2of5_caller : NSObject {

}
+(rb_BarcodeChainway_getMatrix2of5_caller*) getSharedInstance;
+(void) getMatrix2of5:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params;
+(void) getMatrix2of5_in_thread:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params;
+(void) getMatrix2of5_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMatrix2of5_caller* our_BarcodeChainway_getMatrix2of5_caller = nil;

@implementation rb_BarcodeChainway_getMatrix2of5_caller

+(rb_BarcodeChainway_getMatrix2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMatrix2of5_caller == nil) {
        our_BarcodeChainway_getMatrix2of5_caller = [[rb_BarcodeChainway_getMatrix2of5_caller alloc] init];
    }
    return our_BarcodeChainway_getMatrix2of5_caller;
}

-(void) command_getMatrix2of5:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMatrix2of5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMatrix2of5:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5_caller getSharedInstance] command_getMatrix2of5:caller_params];
}

+(void) getMatrix2of5_in_thread:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_getMatrix2of5:) withObject:caller_params];
}

+(void) getMatrix2of5_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMatrix2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMatrix2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMatrix2of5_caller getMatrix2of5_in_thread:[rb_BarcodeChainway_getMatrix2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMatrix2of5_caller getMatrix2of5:[rb_BarcodeChainway_getMatrix2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMatrix2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMatrix2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMatrix2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMatrix2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMatrix2of5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMatrix2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMatrix2of5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMatrix2of5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMatrix2of5_caller_params* par = [[[rb_BarcodeChainway_setMatrix2of5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMatrix2of5_caller : NSObject {

}
+(rb_BarcodeChainway_setMatrix2of5_caller*) getSharedInstance;
+(void) setMatrix2of5:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params;
+(void) setMatrix2of5_in_thread:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params;
+(void) setMatrix2of5_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMatrix2of5_caller* our_BarcodeChainway_setMatrix2of5_caller = nil;

@implementation rb_BarcodeChainway_setMatrix2of5_caller

+(rb_BarcodeChainway_setMatrix2of5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMatrix2of5_caller == nil) {
        our_BarcodeChainway_setMatrix2of5_caller = [[rb_BarcodeChainway_setMatrix2of5_caller alloc] init];
    }
    return our_BarcodeChainway_setMatrix2of5_caller;
}

-(void) command_setMatrix2of5:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMatrix2of5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMatrix2of5:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5_caller getSharedInstance] command_setMatrix2of5:caller_params];
}

+(void) setMatrix2of5_in_thread:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5_caller getSharedInstance] performSelectorInBackground:@selector(command_setMatrix2of5:) withObject:caller_params];
}

+(void) setMatrix2of5_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMatrix2of5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMatrix2of5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMatrix2of5_caller setMatrix2of5_in_thread:[rb_BarcodeChainway_setMatrix2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMatrix2of5_caller setMatrix2of5:[rb_BarcodeChainway_setMatrix2of5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMatrix2of5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMatrix2of5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMatrix2of5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMatrix2of5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMatrix2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMatrix2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMatrix2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_getMatrix2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMatrix2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getMatrix2of5maxLength_caller*) getSharedInstance;
+(void) getMatrix2of5maxLength:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params;
+(void) getMatrix2of5maxLength_in_thread:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params;
+(void) getMatrix2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMatrix2of5maxLength_caller* our_BarcodeChainway_getMatrix2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_getMatrix2of5maxLength_caller

+(rb_BarcodeChainway_getMatrix2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMatrix2of5maxLength_caller == nil) {
        our_BarcodeChainway_getMatrix2of5maxLength_caller = [[rb_BarcodeChainway_getMatrix2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getMatrix2of5maxLength_caller;
}

-(void) command_getMatrix2of5maxLength:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMatrix2of5maxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMatrix2of5maxLength:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5maxLength_caller getSharedInstance] command_getMatrix2of5maxLength:caller_params];
}

+(void) getMatrix2of5maxLength_in_thread:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getMatrix2of5maxLength:) withObject:caller_params];
}

+(void) getMatrix2of5maxLength_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMatrix2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMatrix2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5maxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMatrix2of5maxLength_caller getMatrix2of5maxLength_in_thread:[rb_BarcodeChainway_getMatrix2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMatrix2of5maxLength_caller getMatrix2of5maxLength:[rb_BarcodeChainway_getMatrix2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMatrix2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMatrix2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMatrix2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMatrix2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMatrix2of5maxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMatrix2of5maxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMatrix2of5maxLength_caller_params* par = [[[rb_BarcodeChainway_setMatrix2of5maxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMatrix2of5maxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setMatrix2of5maxLength_caller*) getSharedInstance;
+(void) setMatrix2of5maxLength:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params;
+(void) setMatrix2of5maxLength_in_thread:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params;
+(void) setMatrix2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMatrix2of5maxLength_caller* our_BarcodeChainway_setMatrix2of5maxLength_caller = nil;

@implementation rb_BarcodeChainway_setMatrix2of5maxLength_caller

+(rb_BarcodeChainway_setMatrix2of5maxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMatrix2of5maxLength_caller == nil) {
        our_BarcodeChainway_setMatrix2of5maxLength_caller = [[rb_BarcodeChainway_setMatrix2of5maxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setMatrix2of5maxLength_caller;
}

-(void) command_setMatrix2of5maxLength:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMatrix2of5maxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMatrix2of5maxLength:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5maxLength_caller getSharedInstance] command_setMatrix2of5maxLength:caller_params];
}

+(void) setMatrix2of5maxLength_in_thread:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5maxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setMatrix2of5maxLength:) withObject:caller_params];
}

+(void) setMatrix2of5maxLength_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5maxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5maxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMatrix2of5maxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMatrix2of5maxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5maxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMatrix2of5maxLength_caller setMatrix2of5maxLength_in_thread:[rb_BarcodeChainway_setMatrix2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMatrix2of5maxLength_caller setMatrix2of5maxLength:[rb_BarcodeChainway_setMatrix2of5maxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMatrix2of5maxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMatrix2of5maxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMatrix2of5maxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMatrix2of5maxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMatrix2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMatrix2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMatrix2of5minLength_caller_params* par = [[[rb_BarcodeChainway_getMatrix2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMatrix2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_getMatrix2of5minLength_caller*) getSharedInstance;
+(void) getMatrix2of5minLength:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params;
+(void) getMatrix2of5minLength_in_thread:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params;
+(void) getMatrix2of5minLength_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMatrix2of5minLength_caller* our_BarcodeChainway_getMatrix2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_getMatrix2of5minLength_caller

+(rb_BarcodeChainway_getMatrix2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMatrix2of5minLength_caller == nil) {
        our_BarcodeChainway_getMatrix2of5minLength_caller = [[rb_BarcodeChainway_getMatrix2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_getMatrix2of5minLength_caller;
}

-(void) command_getMatrix2of5minLength:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMatrix2of5minLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMatrix2of5minLength:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5minLength_caller getSharedInstance] command_getMatrix2of5minLength:caller_params];
}

+(void) getMatrix2of5minLength_in_thread:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getMatrix2of5minLength:) withObject:caller_params];
}

+(void) getMatrix2of5minLength_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMatrix2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMatrix2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5minLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMatrix2of5minLength_caller getMatrix2of5minLength_in_thread:[rb_BarcodeChainway_getMatrix2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMatrix2of5minLength_caller getMatrix2of5minLength:[rb_BarcodeChainway_getMatrix2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMatrix2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMatrix2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMatrix2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMatrix2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMatrix2of5minLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMatrix2of5minLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMatrix2of5minLength_caller_params* par = [[[rb_BarcodeChainway_setMatrix2of5minLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMatrix2of5minLength_caller : NSObject {

}
+(rb_BarcodeChainway_setMatrix2of5minLength_caller*) getSharedInstance;
+(void) setMatrix2of5minLength:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params;
+(void) setMatrix2of5minLength_in_thread:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params;
+(void) setMatrix2of5minLength_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMatrix2of5minLength_caller* our_BarcodeChainway_setMatrix2of5minLength_caller = nil;

@implementation rb_BarcodeChainway_setMatrix2of5minLength_caller

+(rb_BarcodeChainway_setMatrix2of5minLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMatrix2of5minLength_caller == nil) {
        our_BarcodeChainway_setMatrix2of5minLength_caller = [[rb_BarcodeChainway_setMatrix2of5minLength_caller alloc] init];
    }
    return our_BarcodeChainway_setMatrix2of5minLength_caller;
}

-(void) command_setMatrix2of5minLength:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMatrix2of5minLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMatrix2of5minLength:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5minLength_caller getSharedInstance] command_setMatrix2of5minLength:caller_params];
}

+(void) setMatrix2of5minLength_in_thread:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5minLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setMatrix2of5minLength:) withObject:caller_params];
}

+(void) setMatrix2of5minLength_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5minLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5minLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMatrix2of5minLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMatrix2of5minLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5minLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMatrix2of5minLength_caller setMatrix2of5minLength_in_thread:[rb_BarcodeChainway_setMatrix2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMatrix2of5minLength_caller setMatrix2of5minLength:[rb_BarcodeChainway_setMatrix2of5minLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMatrix2of5minLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMatrix2of5minLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMatrix2of5minLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMatrix2of5minLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller*) getSharedInstance;
+(void) getMatrix2of5reportCheckDigit:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params;
+(void) getMatrix2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params;
+(void) getMatrix2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller* our_BarcodeChainway_getMatrix2of5reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller

+(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMatrix2of5reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getMatrix2of5reportCheckDigit_caller = [[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getMatrix2of5reportCheckDigit_caller;
}

-(void) command_getMatrix2of5reportCheckDigit:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMatrix2of5reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMatrix2of5reportCheckDigit:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller getSharedInstance] command_getMatrix2of5reportCheckDigit:caller_params];
}

+(void) getMatrix2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getMatrix2of5reportCheckDigit:) withObject:caller_params];
}

+(void) getMatrix2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMatrix2of5reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMatrix2of5reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller getMatrix2of5reportCheckDigit_in_thread:[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller getMatrix2of5reportCheckDigit:[rb_BarcodeChainway_getMatrix2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMatrix2of5reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMatrix2of5reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMatrix2of5reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMatrix2of5reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller*) getSharedInstance;
+(void) setMatrix2of5reportCheckDigit:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params;
+(void) setMatrix2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params;
+(void) setMatrix2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller* our_BarcodeChainway_setMatrix2of5reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller

+(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMatrix2of5reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setMatrix2of5reportCheckDigit_caller = [[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setMatrix2of5reportCheckDigit_caller;
}

-(void) command_setMatrix2of5reportCheckDigit:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMatrix2of5reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMatrix2of5reportCheckDigit:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller getSharedInstance] command_setMatrix2of5reportCheckDigit:caller_params];
}

+(void) setMatrix2of5reportCheckDigit_in_thread:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setMatrix2of5reportCheckDigit:) withObject:caller_params];
}

+(void) setMatrix2of5reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMatrix2of5reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMatrix2of5reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller setMatrix2of5reportCheckDigit_in_thread:[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller setMatrix2of5reportCheckDigit:[rb_BarcodeChainway_setMatrix2of5reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMatrix2of5reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMatrix2of5reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMatrix2of5reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMatrix2of5reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller*) getSharedInstance;
+(void) getMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params;
+(void) getMatrix2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params;
+(void) getMatrix2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller* our_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller

+(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller = [[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller;
}

-(void) command_getMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMatrix2of5verifyCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller getSharedInstance] command_getMatrix2of5verifyCheckDigit:caller_params];
}

+(void) getMatrix2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getMatrix2of5verifyCheckDigit:) withObject:caller_params];
}

+(void) getMatrix2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMatrix2of5verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5verifyCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller getMatrix2of5verifyCheckDigit_in_thread:[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller getMatrix2of5verifyCheckDigit:[rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMatrix2of5verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMatrix2of5verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMatrix2of5verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller*) getSharedInstance;
+(void) setMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params;
+(void) setMatrix2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params;
+(void) setMatrix2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller* our_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller

+(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller == nil) {
        our_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller = [[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller;
}

-(void) command_setMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMatrix2of5verifyCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMatrix2of5verifyCheckDigit:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller getSharedInstance] command_setMatrix2of5verifyCheckDigit:caller_params];
}

+(void) setMatrix2of5verifyCheckDigit_in_thread:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setMatrix2of5verifyCheckDigit:) withObject:caller_params];
}

+(void) setMatrix2of5verifyCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMatrix2of5verifyCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::matrix2of5verifyCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller setMatrix2of5verifyCheckDigit_in_thread:[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller setMatrix2of5verifyCheckDigit:[rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMatrix2of5verifyCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMatrix2of5verifyCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMatrix2of5verifyCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMaxiCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMaxiCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMaxiCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMaxiCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMaxiCode_caller_params* par = [[[rb_BarcodeChainway_getMaxiCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMaxiCode_caller : NSObject {

}
+(rb_BarcodeChainway_getMaxiCode_caller*) getSharedInstance;
+(void) getMaxiCode:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params;
+(void) getMaxiCode_in_thread:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params;
+(void) getMaxiCode_in_UI_thread:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMaxiCode_caller* our_BarcodeChainway_getMaxiCode_caller = nil;

@implementation rb_BarcodeChainway_getMaxiCode_caller

+(rb_BarcodeChainway_getMaxiCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMaxiCode_caller == nil) {
        our_BarcodeChainway_getMaxiCode_caller = [[rb_BarcodeChainway_getMaxiCode_caller alloc] init];
    }
    return our_BarcodeChainway_getMaxiCode_caller;
}

-(void) command_getMaxiCode:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMaxiCode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMaxiCode:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMaxiCode_caller getSharedInstance] command_getMaxiCode:caller_params];
}

+(void) getMaxiCode_in_thread:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMaxiCode_caller getSharedInstance] performSelectorInBackground:@selector(command_getMaxiCode:) withObject:caller_params];
}

+(void) getMaxiCode_in_UI_thread:(rb_BarcodeChainway_getMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMaxiCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMaxiCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMaxiCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::maxiCode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMaxiCode_caller getMaxiCode_in_thread:[rb_BarcodeChainway_getMaxiCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMaxiCode_caller getMaxiCode:[rb_BarcodeChainway_getMaxiCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMaxiCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMaxiCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMaxiCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMaxiCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMaxiCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMaxiCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMaxiCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMaxiCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMaxiCode_caller_params* par = [[[rb_BarcodeChainway_setMaxiCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMaxiCode_caller : NSObject {

}
+(rb_BarcodeChainway_setMaxiCode_caller*) getSharedInstance;
+(void) setMaxiCode:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params;
+(void) setMaxiCode_in_thread:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params;
+(void) setMaxiCode_in_UI_thread:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMaxiCode_caller* our_BarcodeChainway_setMaxiCode_caller = nil;

@implementation rb_BarcodeChainway_setMaxiCode_caller

+(rb_BarcodeChainway_setMaxiCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMaxiCode_caller == nil) {
        our_BarcodeChainway_setMaxiCode_caller = [[rb_BarcodeChainway_setMaxiCode_caller alloc] init];
    }
    return our_BarcodeChainway_setMaxiCode_caller;
}

-(void) command_setMaxiCode:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMaxiCode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMaxiCode:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMaxiCode_caller getSharedInstance] command_setMaxiCode:caller_params];
}

+(void) setMaxiCode_in_thread:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMaxiCode_caller getSharedInstance] performSelectorInBackground:@selector(command_setMaxiCode:) withObject:caller_params];
}

+(void) setMaxiCode_in_UI_thread:(rb_BarcodeChainway_setMaxiCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMaxiCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMaxiCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMaxiCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::maxiCode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMaxiCode_caller setMaxiCode_in_thread:[rb_BarcodeChainway_setMaxiCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMaxiCode_caller setMaxiCode:[rb_BarcodeChainway_setMaxiCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMaxiCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMaxiCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMaxiCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMaxiCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMicroPdf_caller_params* par = [[[rb_BarcodeChainway_getMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_getMicroPdf_caller*) getSharedInstance;
+(void) getMicroPdf:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params;
+(void) getMicroPdf_in_thread:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params;
+(void) getMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMicroPdf_caller* our_BarcodeChainway_getMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_getMicroPdf_caller

+(rb_BarcodeChainway_getMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMicroPdf_caller == nil) {
        our_BarcodeChainway_getMicroPdf_caller = [[rb_BarcodeChainway_getMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_getMicroPdf_caller;
}

-(void) command_getMicroPdf:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMicroPdf:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMicroPdf:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroPdf_caller getSharedInstance] command_getMicroPdf:caller_params];
}

+(void) getMicroPdf_in_thread:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_getMicroPdf:) withObject:caller_params];
}

+(void) getMicroPdf_in_UI_thread:(rb_BarcodeChainway_getMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::microPdf"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMicroPdf_caller getMicroPdf_in_thread:[rb_BarcodeChainway_getMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMicroPdf_caller getMicroPdf:[rb_BarcodeChainway_getMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMicroPdf_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMicroPdf_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMicroPdf_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMicroPdf_caller_params* par = [[[rb_BarcodeChainway_setMicroPdf_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMicroPdf_caller : NSObject {

}
+(rb_BarcodeChainway_setMicroPdf_caller*) getSharedInstance;
+(void) setMicroPdf:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params;
+(void) setMicroPdf_in_thread:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params;
+(void) setMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMicroPdf_caller* our_BarcodeChainway_setMicroPdf_caller = nil;

@implementation rb_BarcodeChainway_setMicroPdf_caller

+(rb_BarcodeChainway_setMicroPdf_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMicroPdf_caller == nil) {
        our_BarcodeChainway_setMicroPdf_caller = [[rb_BarcodeChainway_setMicroPdf_caller alloc] init];
    }
    return our_BarcodeChainway_setMicroPdf_caller;
}

-(void) command_setMicroPdf:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMicroPdf:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMicroPdf:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroPdf_caller getSharedInstance] command_setMicroPdf:caller_params];
}

+(void) setMicroPdf_in_thread:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroPdf_caller getSharedInstance] performSelectorInBackground:@selector(command_setMicroPdf:) withObject:caller_params];
}

+(void) setMicroPdf_in_UI_thread:(rb_BarcodeChainway_setMicroPdf_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroPdf_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMicroPdf:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMicroPdf_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::microPdf="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMicroPdf_caller setMicroPdf_in_thread:[rb_BarcodeChainway_setMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMicroPdf_caller setMicroPdf:[rb_BarcodeChainway_setMicroPdf_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMicroPdf(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMicroPdf_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMicroPdf(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMicroPdf_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMicroQr_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMicroQr_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMicroQr_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMicroQr_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMicroQr_caller_params* par = [[[rb_BarcodeChainway_getMicroQr_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMicroQr_caller : NSObject {

}
+(rb_BarcodeChainway_getMicroQr_caller*) getSharedInstance;
+(void) getMicroQr:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params;
+(void) getMicroQr_in_thread:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params;
+(void) getMicroQr_in_UI_thread:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMicroQr_caller* our_BarcodeChainway_getMicroQr_caller = nil;

@implementation rb_BarcodeChainway_getMicroQr_caller

+(rb_BarcodeChainway_getMicroQr_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMicroQr_caller == nil) {
        our_BarcodeChainway_getMicroQr_caller = [[rb_BarcodeChainway_getMicroQr_caller alloc] init];
    }
    return our_BarcodeChainway_getMicroQr_caller;
}

-(void) command_getMicroQr:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMicroQr:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMicroQr:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroQr_caller getSharedInstance] command_getMicroQr:caller_params];
}

+(void) getMicroQr_in_thread:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroQr_caller getSharedInstance] performSelectorInBackground:@selector(command_getMicroQr:) withObject:caller_params];
}

+(void) getMicroQr_in_UI_thread:(rb_BarcodeChainway_getMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMicroQr_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMicroQr:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMicroQr_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::microQr"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMicroQr_caller getMicroQr_in_thread:[rb_BarcodeChainway_getMicroQr_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMicroQr_caller getMicroQr:[rb_BarcodeChainway_getMicroQr_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMicroQr(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMicroQr_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMicroQr(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMicroQr_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMicroQr_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMicroQr_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMicroQr_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMicroQr_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMicroQr_caller_params* par = [[[rb_BarcodeChainway_setMicroQr_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMicroQr_caller : NSObject {

}
+(rb_BarcodeChainway_setMicroQr_caller*) getSharedInstance;
+(void) setMicroQr:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params;
+(void) setMicroQr_in_thread:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params;
+(void) setMicroQr_in_UI_thread:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMicroQr_caller* our_BarcodeChainway_setMicroQr_caller = nil;

@implementation rb_BarcodeChainway_setMicroQr_caller

+(rb_BarcodeChainway_setMicroQr_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMicroQr_caller == nil) {
        our_BarcodeChainway_setMicroQr_caller = [[rb_BarcodeChainway_setMicroQr_caller alloc] init];
    }
    return our_BarcodeChainway_setMicroQr_caller;
}

-(void) command_setMicroQr:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMicroQr:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMicroQr:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroQr_caller getSharedInstance] command_setMicroQr:caller_params];
}

+(void) setMicroQr_in_thread:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroQr_caller getSharedInstance] performSelectorInBackground:@selector(command_setMicroQr:) withObject:caller_params];
}

+(void) setMicroQr_in_UI_thread:(rb_BarcodeChainway_setMicroQr_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMicroQr_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMicroQr:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMicroQr_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::microQr="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMicroQr_caller setMicroQr_in_thread:[rb_BarcodeChainway_setMicroQr_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMicroQr_caller setMicroQr:[rb_BarcodeChainway_setMicroQr_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMicroQr(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMicroQr_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMicroQr(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMicroQr_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsi_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsi_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsi_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsi_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsi_caller_params* par = [[[rb_BarcodeChainway_getMsi_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsi_caller : NSObject {

}
+(rb_BarcodeChainway_getMsi_caller*) getSharedInstance;
+(void) getMsi:(rb_BarcodeChainway_getMsi_caller_params*)caller_params;
+(void) getMsi_in_thread:(rb_BarcodeChainway_getMsi_caller_params*)caller_params;
+(void) getMsi_in_UI_thread:(rb_BarcodeChainway_getMsi_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsi_caller* our_BarcodeChainway_getMsi_caller = nil;

@implementation rb_BarcodeChainway_getMsi_caller

+(rb_BarcodeChainway_getMsi_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsi_caller == nil) {
        our_BarcodeChainway_getMsi_caller = [[rb_BarcodeChainway_getMsi_caller alloc] init];
    }
    return our_BarcodeChainway_getMsi_caller;
}

-(void) command_getMsi:(rb_BarcodeChainway_getMsi_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsi:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsi:(rb_BarcodeChainway_getMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsi_caller getSharedInstance] command_getMsi:caller_params];
}

+(void) getMsi_in_thread:(rb_BarcodeChainway_getMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsi_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsi:) withObject:caller_params];
}

+(void) getMsi_in_UI_thread:(rb_BarcodeChainway_getMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsi_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsi:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsi_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msi"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsi_caller getMsi_in_thread:[rb_BarcodeChainway_getMsi_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsi_caller getMsi:[rb_BarcodeChainway_getMsi_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsi(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsi_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsi(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsi_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsi_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsi_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsi_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsi_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsi_caller_params* par = [[[rb_BarcodeChainway_setMsi_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsi_caller : NSObject {

}
+(rb_BarcodeChainway_setMsi_caller*) getSharedInstance;
+(void) setMsi:(rb_BarcodeChainway_setMsi_caller_params*)caller_params;
+(void) setMsi_in_thread:(rb_BarcodeChainway_setMsi_caller_params*)caller_params;
+(void) setMsi_in_UI_thread:(rb_BarcodeChainway_setMsi_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsi_caller* our_BarcodeChainway_setMsi_caller = nil;

@implementation rb_BarcodeChainway_setMsi_caller

+(rb_BarcodeChainway_setMsi_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsi_caller == nil) {
        our_BarcodeChainway_setMsi_caller = [[rb_BarcodeChainway_setMsi_caller alloc] init];
    }
    return our_BarcodeChainway_setMsi_caller;
}

-(void) command_setMsi:(rb_BarcodeChainway_setMsi_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsi:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsi:(rb_BarcodeChainway_setMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsi_caller getSharedInstance] command_setMsi:caller_params];
}

+(void) setMsi_in_thread:(rb_BarcodeChainway_setMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsi_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsi:) withObject:caller_params];
}

+(void) setMsi_in_UI_thread:(rb_BarcodeChainway_setMsi_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsi_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsi:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsi_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msi="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsi_caller setMsi_in_thread:[rb_BarcodeChainway_setMsi_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsi_caller setMsi:[rb_BarcodeChainway_setMsi_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsi(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsi_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsi(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsi_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiCheckDigits_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiCheckDigits_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiCheckDigits_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiCheckDigits_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiCheckDigits_caller_params* par = [[[rb_BarcodeChainway_getMsiCheckDigits_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiCheckDigits_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiCheckDigits_caller*) getSharedInstance;
+(void) getMsiCheckDigits:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params;
+(void) getMsiCheckDigits_in_thread:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params;
+(void) getMsiCheckDigits_in_UI_thread:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiCheckDigits_caller* our_BarcodeChainway_getMsiCheckDigits_caller = nil;

@implementation rb_BarcodeChainway_getMsiCheckDigits_caller

+(rb_BarcodeChainway_getMsiCheckDigits_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiCheckDigits_caller == nil) {
        our_BarcodeChainway_getMsiCheckDigits_caller = [[rb_BarcodeChainway_getMsiCheckDigits_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiCheckDigits_caller;
}

-(void) command_getMsiCheckDigits:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiCheckDigits:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiCheckDigits:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigits_caller getSharedInstance] command_getMsiCheckDigits:caller_params];
}

+(void) getMsiCheckDigits_in_thread:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigits_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiCheckDigits:) withObject:caller_params];
}

+(void) getMsiCheckDigits_in_UI_thread:(rb_BarcodeChainway_getMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigits_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiCheckDigits:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiCheckDigits_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiCheckDigits"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiCheckDigits_caller getMsiCheckDigits_in_thread:[rb_BarcodeChainway_getMsiCheckDigits_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiCheckDigits_caller getMsiCheckDigits:[rb_BarcodeChainway_getMsiCheckDigits_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiCheckDigits(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiCheckDigits_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiCheckDigits(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiCheckDigits_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiCheckDigits_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiCheckDigits_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiCheckDigits_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiCheckDigits_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiCheckDigits_caller_params* par = [[[rb_BarcodeChainway_setMsiCheckDigits_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiCheckDigits_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiCheckDigits_caller*) getSharedInstance;
+(void) setMsiCheckDigits:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params;
+(void) setMsiCheckDigits_in_thread:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params;
+(void) setMsiCheckDigits_in_UI_thread:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiCheckDigits_caller* our_BarcodeChainway_setMsiCheckDigits_caller = nil;

@implementation rb_BarcodeChainway_setMsiCheckDigits_caller

+(rb_BarcodeChainway_setMsiCheckDigits_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiCheckDigits_caller == nil) {
        our_BarcodeChainway_setMsiCheckDigits_caller = [[rb_BarcodeChainway_setMsiCheckDigits_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiCheckDigits_caller;
}

-(void) command_setMsiCheckDigits:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiCheckDigits:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiCheckDigits:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigits_caller getSharedInstance] command_setMsiCheckDigits:caller_params];
}

+(void) setMsiCheckDigits_in_thread:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigits_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiCheckDigits:) withObject:caller_params];
}

+(void) setMsiCheckDigits_in_UI_thread:(rb_BarcodeChainway_setMsiCheckDigits_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigits_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiCheckDigits:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiCheckDigits_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiCheckDigits="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiCheckDigits_caller setMsiCheckDigits_in_thread:[rb_BarcodeChainway_setMsiCheckDigits_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiCheckDigits_caller setMsiCheckDigits:[rb_BarcodeChainway_setMsiCheckDigits_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiCheckDigits(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiCheckDigits_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiCheckDigits(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiCheckDigits_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params* par = [[[rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiCheckDigitScheme_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiCheckDigitScheme_caller*) getSharedInstance;
+(void) getMsiCheckDigitScheme:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params;
+(void) getMsiCheckDigitScheme_in_thread:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params;
+(void) getMsiCheckDigitScheme_in_UI_thread:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiCheckDigitScheme_caller* our_BarcodeChainway_getMsiCheckDigitScheme_caller = nil;

@implementation rb_BarcodeChainway_getMsiCheckDigitScheme_caller

+(rb_BarcodeChainway_getMsiCheckDigitScheme_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiCheckDigitScheme_caller == nil) {
        our_BarcodeChainway_getMsiCheckDigitScheme_caller = [[rb_BarcodeChainway_getMsiCheckDigitScheme_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiCheckDigitScheme_caller;
}

-(void) command_getMsiCheckDigitScheme:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiCheckDigitScheme:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiCheckDigitScheme:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigitScheme_caller getSharedInstance] command_getMsiCheckDigitScheme:caller_params];
}

+(void) getMsiCheckDigitScheme_in_thread:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigitScheme_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiCheckDigitScheme:) withObject:caller_params];
}

+(void) getMsiCheckDigitScheme_in_UI_thread:(rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiCheckDigitScheme_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiCheckDigitScheme:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiCheckDigitScheme_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiCheckDigitScheme"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiCheckDigitScheme_caller getMsiCheckDigitScheme_in_thread:[rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiCheckDigitScheme_caller getMsiCheckDigitScheme:[rb_BarcodeChainway_getMsiCheckDigitScheme_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiCheckDigitScheme(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiCheckDigitScheme_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiCheckDigitScheme(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiCheckDigitScheme_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params* par = [[[rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiCheckDigitScheme_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiCheckDigitScheme_caller*) getSharedInstance;
+(void) setMsiCheckDigitScheme:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params;
+(void) setMsiCheckDigitScheme_in_thread:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params;
+(void) setMsiCheckDigitScheme_in_UI_thread:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiCheckDigitScheme_caller* our_BarcodeChainway_setMsiCheckDigitScheme_caller = nil;

@implementation rb_BarcodeChainway_setMsiCheckDigitScheme_caller

+(rb_BarcodeChainway_setMsiCheckDigitScheme_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiCheckDigitScheme_caller == nil) {
        our_BarcodeChainway_setMsiCheckDigitScheme_caller = [[rb_BarcodeChainway_setMsiCheckDigitScheme_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiCheckDigitScheme_caller;
}

-(void) command_setMsiCheckDigitScheme:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiCheckDigitScheme:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiCheckDigitScheme:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigitScheme_caller getSharedInstance] command_setMsiCheckDigitScheme:caller_params];
}

+(void) setMsiCheckDigitScheme_in_thread:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigitScheme_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiCheckDigitScheme:) withObject:caller_params];
}

+(void) setMsiCheckDigitScheme_in_UI_thread:(rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiCheckDigitScheme_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiCheckDigitScheme:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiCheckDigitScheme_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiCheckDigitScheme="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiCheckDigitScheme_caller setMsiCheckDigitScheme_in_thread:[rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiCheckDigitScheme_caller setMsiCheckDigitScheme:[rb_BarcodeChainway_setMsiCheckDigitScheme_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiCheckDigitScheme(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiCheckDigitScheme_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiCheckDigitScheme(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiCheckDigitScheme_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiMaxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiMaxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiMaxLength_caller_params* par = [[[rb_BarcodeChainway_getMsiMaxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiMaxLength_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiMaxLength_caller*) getSharedInstance;
+(void) getMsiMaxLength:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params;
+(void) getMsiMaxLength_in_thread:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params;
+(void) getMsiMaxLength_in_UI_thread:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiMaxLength_caller* our_BarcodeChainway_getMsiMaxLength_caller = nil;

@implementation rb_BarcodeChainway_getMsiMaxLength_caller

+(rb_BarcodeChainway_getMsiMaxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiMaxLength_caller == nil) {
        our_BarcodeChainway_getMsiMaxLength_caller = [[rb_BarcodeChainway_getMsiMaxLength_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiMaxLength_caller;
}

-(void) command_getMsiMaxLength:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiMaxLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiMaxLength:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMaxLength_caller getSharedInstance] command_getMsiMaxLength:caller_params];
}

+(void) getMsiMaxLength_in_thread:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMaxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiMaxLength:) withObject:caller_params];
}

+(void) getMsiMaxLength_in_UI_thread:(rb_BarcodeChainway_getMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMaxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiMaxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiMaxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiMaxLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiMaxLength_caller getMsiMaxLength_in_thread:[rb_BarcodeChainway_getMsiMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiMaxLength_caller getMsiMaxLength:[rb_BarcodeChainway_getMsiMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiMaxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiMaxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiMaxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiMaxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiMaxLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiMaxLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiMaxLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiMaxLength_caller_params* par = [[[rb_BarcodeChainway_setMsiMaxLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiMaxLength_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiMaxLength_caller*) getSharedInstance;
+(void) setMsiMaxLength:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params;
+(void) setMsiMaxLength_in_thread:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params;
+(void) setMsiMaxLength_in_UI_thread:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiMaxLength_caller* our_BarcodeChainway_setMsiMaxLength_caller = nil;

@implementation rb_BarcodeChainway_setMsiMaxLength_caller

+(rb_BarcodeChainway_setMsiMaxLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiMaxLength_caller == nil) {
        our_BarcodeChainway_setMsiMaxLength_caller = [[rb_BarcodeChainway_setMsiMaxLength_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiMaxLength_caller;
}

-(void) command_setMsiMaxLength:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiMaxLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiMaxLength:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMaxLength_caller getSharedInstance] command_setMsiMaxLength:caller_params];
}

+(void) setMsiMaxLength_in_thread:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMaxLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiMaxLength:) withObject:caller_params];
}

+(void) setMsiMaxLength_in_UI_thread:(rb_BarcodeChainway_setMsiMaxLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMaxLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiMaxLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiMaxLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiMaxLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiMaxLength_caller setMsiMaxLength_in_thread:[rb_BarcodeChainway_setMsiMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiMaxLength_caller setMsiMaxLength:[rb_BarcodeChainway_setMsiMaxLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiMaxLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiMaxLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiMaxLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiMaxLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiMinLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiMinLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiMinLength_caller_params* par = [[[rb_BarcodeChainway_getMsiMinLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiMinLength_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiMinLength_caller*) getSharedInstance;
+(void) getMsiMinLength:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params;
+(void) getMsiMinLength_in_thread:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params;
+(void) getMsiMinLength_in_UI_thread:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiMinLength_caller* our_BarcodeChainway_getMsiMinLength_caller = nil;

@implementation rb_BarcodeChainway_getMsiMinLength_caller

+(rb_BarcodeChainway_getMsiMinLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiMinLength_caller == nil) {
        our_BarcodeChainway_getMsiMinLength_caller = [[rb_BarcodeChainway_getMsiMinLength_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiMinLength_caller;
}

-(void) command_getMsiMinLength:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiMinLength:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiMinLength:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMinLength_caller getSharedInstance] command_getMsiMinLength:caller_params];
}

+(void) getMsiMinLength_in_thread:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMinLength_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiMinLength:) withObject:caller_params];
}

+(void) getMsiMinLength_in_UI_thread:(rb_BarcodeChainway_getMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiMinLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiMinLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiMinLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiMinLength"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiMinLength_caller getMsiMinLength_in_thread:[rb_BarcodeChainway_getMsiMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiMinLength_caller getMsiMinLength:[rb_BarcodeChainway_getMsiMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiMinLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiMinLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiMinLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiMinLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiMinLength_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiMinLength_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiMinLength_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiMinLength_caller_params* par = [[[rb_BarcodeChainway_setMsiMinLength_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiMinLength_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiMinLength_caller*) getSharedInstance;
+(void) setMsiMinLength:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params;
+(void) setMsiMinLength_in_thread:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params;
+(void) setMsiMinLength_in_UI_thread:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiMinLength_caller* our_BarcodeChainway_setMsiMinLength_caller = nil;

@implementation rb_BarcodeChainway_setMsiMinLength_caller

+(rb_BarcodeChainway_setMsiMinLength_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiMinLength_caller == nil) {
        our_BarcodeChainway_setMsiMinLength_caller = [[rb_BarcodeChainway_setMsiMinLength_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiMinLength_caller;
}

-(void) command_setMsiMinLength:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiMinLength:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiMinLength:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMinLength_caller getSharedInstance] command_setMsiMinLength:caller_params];
}

+(void) setMsiMinLength_in_thread:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMinLength_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiMinLength:) withObject:caller_params];
}

+(void) setMsiMinLength_in_UI_thread:(rb_BarcodeChainway_setMsiMinLength_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiMinLength_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiMinLength:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiMinLength_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiMinLength="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiMinLength_caller setMsiMinLength_in_thread:[rb_BarcodeChainway_setMsiMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiMinLength_caller setMsiMinLength:[rb_BarcodeChainway_setMsiMinLength_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiMinLength(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiMinLength_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiMinLength(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiMinLength_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiRedundancy_caller_params* par = [[[rb_BarcodeChainway_getMsiRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiRedundancy_caller*) getSharedInstance;
+(void) getMsiRedundancy:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params;
+(void) getMsiRedundancy_in_thread:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params;
+(void) getMsiRedundancy_in_UI_thread:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiRedundancy_caller* our_BarcodeChainway_getMsiRedundancy_caller = nil;

@implementation rb_BarcodeChainway_getMsiRedundancy_caller

+(rb_BarcodeChainway_getMsiRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiRedundancy_caller == nil) {
        our_BarcodeChainway_getMsiRedundancy_caller = [[rb_BarcodeChainway_getMsiRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiRedundancy_caller;
}

-(void) command_getMsiRedundancy:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiRedundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiRedundancy:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiRedundancy_caller getSharedInstance] command_getMsiRedundancy:caller_params];
}

+(void) getMsiRedundancy_in_thread:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiRedundancy:) withObject:caller_params];
}

+(void) getMsiRedundancy_in_UI_thread:(rb_BarcodeChainway_getMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiRedundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiRedundancy_caller getMsiRedundancy_in_thread:[rb_BarcodeChainway_getMsiRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiRedundancy_caller getMsiRedundancy:[rb_BarcodeChainway_getMsiRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiRedundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiRedundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiRedundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiRedundancy_caller_params* par = [[[rb_BarcodeChainway_setMsiRedundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiRedundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiRedundancy_caller*) getSharedInstance;
+(void) setMsiRedundancy:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params;
+(void) setMsiRedundancy_in_thread:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params;
+(void) setMsiRedundancy_in_UI_thread:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiRedundancy_caller* our_BarcodeChainway_setMsiRedundancy_caller = nil;

@implementation rb_BarcodeChainway_setMsiRedundancy_caller

+(rb_BarcodeChainway_setMsiRedundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiRedundancy_caller == nil) {
        our_BarcodeChainway_setMsiRedundancy_caller = [[rb_BarcodeChainway_setMsiRedundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiRedundancy_caller;
}

-(void) command_setMsiRedundancy:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiRedundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiRedundancy:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiRedundancy_caller getSharedInstance] command_setMsiRedundancy:caller_params];
}

+(void) setMsiRedundancy_in_thread:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiRedundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiRedundancy:) withObject:caller_params];
}

+(void) setMsiRedundancy_in_UI_thread:(rb_BarcodeChainway_setMsiRedundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiRedundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiRedundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiRedundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiRedundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiRedundancy_caller setMsiRedundancy_in_thread:[rb_BarcodeChainway_setMsiRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiRedundancy_caller setMsiRedundancy:[rb_BarcodeChainway_setMsiRedundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiRedundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiRedundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiRedundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiRedundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getMsiReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getMsiReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getMsiReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getMsiReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getMsiReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getMsiReportCheckDigit_caller*) getSharedInstance;
+(void) getMsiReportCheckDigit:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params;
+(void) getMsiReportCheckDigit_in_thread:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params;
+(void) getMsiReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getMsiReportCheckDigit_caller* our_BarcodeChainway_getMsiReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getMsiReportCheckDigit_caller

+(rb_BarcodeChainway_getMsiReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getMsiReportCheckDigit_caller == nil) {
        our_BarcodeChainway_getMsiReportCheckDigit_caller = [[rb_BarcodeChainway_getMsiReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getMsiReportCheckDigit_caller;
}

-(void) command_getMsiReportCheckDigit:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getMsiReportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getMsiReportCheckDigit:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiReportCheckDigit_caller getSharedInstance] command_getMsiReportCheckDigit:caller_params];
}

+(void) getMsiReportCheckDigit_in_thread:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getMsiReportCheckDigit:) withObject:caller_params];
}

+(void) getMsiReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getMsiReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getMsiReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getMsiReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiReportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getMsiReportCheckDigit_caller getMsiReportCheckDigit_in_thread:[rb_BarcodeChainway_getMsiReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getMsiReportCheckDigit_caller getMsiReportCheckDigit:[rb_BarcodeChainway_getMsiReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getMsiReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getMsiReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getMsiReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getMsiReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setMsiReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setMsiReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setMsiReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setMsiReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setMsiReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setMsiReportCheckDigit_caller*) getSharedInstance;
+(void) setMsiReportCheckDigit:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params;
+(void) setMsiReportCheckDigit_in_thread:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params;
+(void) setMsiReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setMsiReportCheckDigit_caller* our_BarcodeChainway_setMsiReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setMsiReportCheckDigit_caller

+(rb_BarcodeChainway_setMsiReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setMsiReportCheckDigit_caller == nil) {
        our_BarcodeChainway_setMsiReportCheckDigit_caller = [[rb_BarcodeChainway_setMsiReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setMsiReportCheckDigit_caller;
}

-(void) command_setMsiReportCheckDigit:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setMsiReportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setMsiReportCheckDigit:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiReportCheckDigit_caller getSharedInstance] command_setMsiReportCheckDigit:caller_params];
}

+(void) setMsiReportCheckDigit_in_thread:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setMsiReportCheckDigit:) withObject:caller_params];
}

+(void) setMsiReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setMsiReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setMsiReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setMsiReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setMsiReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::msiReportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setMsiReportCheckDigit_caller setMsiReportCheckDigit_in_thread:[rb_BarcodeChainway_setMsiReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setMsiReportCheckDigit_caller setMsiReportCheckDigit:[rb_BarcodeChainway_setMsiReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setMsiReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setMsiReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setMsiReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setMsiReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getPdf417_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getPdf417_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getPdf417_caller_params* par = [[[rb_BarcodeChainway_getPdf417_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getPdf417_caller : NSObject {

}
+(rb_BarcodeChainway_getPdf417_caller*) getSharedInstance;
+(void) getPdf417:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params;
+(void) getPdf417_in_thread:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params;
+(void) getPdf417_in_UI_thread:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getPdf417_caller* our_BarcodeChainway_getPdf417_caller = nil;

@implementation rb_BarcodeChainway_getPdf417_caller

+(rb_BarcodeChainway_getPdf417_caller*) getSharedInstance {
    if (our_BarcodeChainway_getPdf417_caller == nil) {
        our_BarcodeChainway_getPdf417_caller = [[rb_BarcodeChainway_getPdf417_caller alloc] init];
    }
    return our_BarcodeChainway_getPdf417_caller;
}

-(void) command_getPdf417:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getPdf417:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getPdf417:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPdf417_caller getSharedInstance] command_getPdf417:caller_params];
}

+(void) getPdf417_in_thread:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPdf417_caller getSharedInstance] performSelectorInBackground:@selector(command_getPdf417:) withObject:caller_params];
}

+(void) getPdf417_in_UI_thread:(rb_BarcodeChainway_getPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_getPdf417_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getPdf417:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getPdf417_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::pdf417"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getPdf417_caller getPdf417_in_thread:[rb_BarcodeChainway_getPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getPdf417_caller getPdf417:[rb_BarcodeChainway_getPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getPdf417(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getPdf417_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getPdf417(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getPdf417_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setPdf417_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setPdf417_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setPdf417_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setPdf417_caller_params* par = [[[rb_BarcodeChainway_setPdf417_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setPdf417_caller : NSObject {

}
+(rb_BarcodeChainway_setPdf417_caller*) getSharedInstance;
+(void) setPdf417:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params;
+(void) setPdf417_in_thread:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params;
+(void) setPdf417_in_UI_thread:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setPdf417_caller* our_BarcodeChainway_setPdf417_caller = nil;

@implementation rb_BarcodeChainway_setPdf417_caller

+(rb_BarcodeChainway_setPdf417_caller*) getSharedInstance {
    if (our_BarcodeChainway_setPdf417_caller == nil) {
        our_BarcodeChainway_setPdf417_caller = [[rb_BarcodeChainway_setPdf417_caller alloc] init];
    }
    return our_BarcodeChainway_setPdf417_caller;
}

-(void) command_setPdf417:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setPdf417:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setPdf417:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPdf417_caller getSharedInstance] command_setPdf417:caller_params];
}

+(void) setPdf417_in_thread:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPdf417_caller getSharedInstance] performSelectorInBackground:@selector(command_setPdf417:) withObject:caller_params];
}

+(void) setPdf417_in_UI_thread:(rb_BarcodeChainway_setPdf417_caller_params*)caller_params {
    [[rb_BarcodeChainway_setPdf417_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setPdf417:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setPdf417_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::pdf417="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setPdf417_caller setPdf417_in_thread:[rb_BarcodeChainway_setPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setPdf417_caller setPdf417:[rb_BarcodeChainway_setPdf417_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setPdf417(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setPdf417_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setPdf417(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setPdf417_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSignature_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSignature_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSignature_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSignature_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSignature_caller_params* par = [[[rb_BarcodeChainway_getSignature_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSignature_caller : NSObject {

}
+(rb_BarcodeChainway_getSignature_caller*) getSharedInstance;
+(void) getSignature:(rb_BarcodeChainway_getSignature_caller_params*)caller_params;
+(void) getSignature_in_thread:(rb_BarcodeChainway_getSignature_caller_params*)caller_params;
+(void) getSignature_in_UI_thread:(rb_BarcodeChainway_getSignature_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSignature_caller* our_BarcodeChainway_getSignature_caller = nil;

@implementation rb_BarcodeChainway_getSignature_caller

+(rb_BarcodeChainway_getSignature_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSignature_caller == nil) {
        our_BarcodeChainway_getSignature_caller = [[rb_BarcodeChainway_getSignature_caller alloc] init];
    }
    return our_BarcodeChainway_getSignature_caller;
}

-(void) command_getSignature:(rb_BarcodeChainway_getSignature_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSignature:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSignature:(rb_BarcodeChainway_getSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignature_caller getSharedInstance] command_getSignature:caller_params];
}

+(void) getSignature_in_thread:(rb_BarcodeChainway_getSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignature_caller getSharedInstance] performSelectorInBackground:@selector(command_getSignature:) withObject:caller_params];
}

+(void) getSignature_in_UI_thread:(rb_BarcodeChainway_getSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignature_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSignature:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSignature_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signature"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSignature_caller getSignature_in_thread:[rb_BarcodeChainway_getSignature_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSignature_caller getSignature:[rb_BarcodeChainway_getSignature_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSignature(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSignature_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSignature(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSignature_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setSignature_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setSignature_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setSignature_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setSignature_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setSignature_caller_params* par = [[[rb_BarcodeChainway_setSignature_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setSignature_caller : NSObject {

}
+(rb_BarcodeChainway_setSignature_caller*) getSharedInstance;
+(void) setSignature:(rb_BarcodeChainway_setSignature_caller_params*)caller_params;
+(void) setSignature_in_thread:(rb_BarcodeChainway_setSignature_caller_params*)caller_params;
+(void) setSignature_in_UI_thread:(rb_BarcodeChainway_setSignature_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setSignature_caller* our_BarcodeChainway_setSignature_caller = nil;

@implementation rb_BarcodeChainway_setSignature_caller

+(rb_BarcodeChainway_setSignature_caller*) getSharedInstance {
    if (our_BarcodeChainway_setSignature_caller == nil) {
        our_BarcodeChainway_setSignature_caller = [[rb_BarcodeChainway_setSignature_caller alloc] init];
    }
    return our_BarcodeChainway_setSignature_caller;
}

-(void) command_setSignature:(rb_BarcodeChainway_setSignature_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setSignature:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setSignature:(rb_BarcodeChainway_setSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignature_caller getSharedInstance] command_setSignature:caller_params];
}

+(void) setSignature_in_thread:(rb_BarcodeChainway_setSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignature_caller getSharedInstance] performSelectorInBackground:@selector(command_setSignature:) withObject:caller_params];
}

+(void) setSignature_in_UI_thread:(rb_BarcodeChainway_setSignature_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignature_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setSignature:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setSignature_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signature="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setSignature_caller setSignature_in_thread:[rb_BarcodeChainway_setSignature_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setSignature_caller setSignature:[rb_BarcodeChainway_setSignature_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setSignature(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setSignature_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setSignature(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setSignature_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSignatureImageHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSignatureImageHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSignatureImageHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSignatureImageHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSignatureImageHeight_caller_params* par = [[[rb_BarcodeChainway_getSignatureImageHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSignatureImageHeight_caller : NSObject {

}
+(rb_BarcodeChainway_getSignatureImageHeight_caller*) getSharedInstance;
+(void) getSignatureImageHeight:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params;
+(void) getSignatureImageHeight_in_thread:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params;
+(void) getSignatureImageHeight_in_UI_thread:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSignatureImageHeight_caller* our_BarcodeChainway_getSignatureImageHeight_caller = nil;

@implementation rb_BarcodeChainway_getSignatureImageHeight_caller

+(rb_BarcodeChainway_getSignatureImageHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSignatureImageHeight_caller == nil) {
        our_BarcodeChainway_getSignatureImageHeight_caller = [[rb_BarcodeChainway_getSignatureImageHeight_caller alloc] init];
    }
    return our_BarcodeChainway_getSignatureImageHeight_caller;
}

-(void) command_getSignatureImageHeight:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSignatureImageHeight:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSignatureImageHeight:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageHeight_caller getSharedInstance] command_getSignatureImageHeight:caller_params];
}

+(void) getSignatureImageHeight_in_thread:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_getSignatureImageHeight:) withObject:caller_params];
}

+(void) getSignatureImageHeight_in_UI_thread:(rb_BarcodeChainway_getSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSignatureImageHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSignatureImageHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageHeight"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSignatureImageHeight_caller getSignatureImageHeight_in_thread:[rb_BarcodeChainway_getSignatureImageHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSignatureImageHeight_caller getSignatureImageHeight:[rb_BarcodeChainway_getSignatureImageHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSignatureImageHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSignatureImageHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSignatureImageHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSignatureImageHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setSignatureImageHeight_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setSignatureImageHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setSignatureImageHeight_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setSignatureImageHeight_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setSignatureImageHeight_caller_params* par = [[[rb_BarcodeChainway_setSignatureImageHeight_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setSignatureImageHeight_caller : NSObject {

}
+(rb_BarcodeChainway_setSignatureImageHeight_caller*) getSharedInstance;
+(void) setSignatureImageHeight:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params;
+(void) setSignatureImageHeight_in_thread:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params;
+(void) setSignatureImageHeight_in_UI_thread:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setSignatureImageHeight_caller* our_BarcodeChainway_setSignatureImageHeight_caller = nil;

@implementation rb_BarcodeChainway_setSignatureImageHeight_caller

+(rb_BarcodeChainway_setSignatureImageHeight_caller*) getSharedInstance {
    if (our_BarcodeChainway_setSignatureImageHeight_caller == nil) {
        our_BarcodeChainway_setSignatureImageHeight_caller = [[rb_BarcodeChainway_setSignatureImageHeight_caller alloc] init];
    }
    return our_BarcodeChainway_setSignatureImageHeight_caller;
}

-(void) command_setSignatureImageHeight:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setSignatureImageHeight:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setSignatureImageHeight:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageHeight_caller getSharedInstance] command_setSignatureImageHeight:caller_params];
}

+(void) setSignatureImageHeight_in_thread:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageHeight_caller getSharedInstance] performSelectorInBackground:@selector(command_setSignatureImageHeight:) withObject:caller_params];
}

+(void) setSignatureImageHeight_in_UI_thread:(rb_BarcodeChainway_setSignatureImageHeight_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageHeight_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setSignatureImageHeight:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setSignatureImageHeight_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageHeight="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setSignatureImageHeight_caller setSignatureImageHeight_in_thread:[rb_BarcodeChainway_setSignatureImageHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setSignatureImageHeight_caller setSignatureImageHeight:[rb_BarcodeChainway_setSignatureImageHeight_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setSignatureImageHeight(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setSignatureImageHeight_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setSignatureImageHeight(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setSignatureImageHeight_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSignatureImageWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSignatureImageWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSignatureImageWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSignatureImageWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSignatureImageWidth_caller_params* par = [[[rb_BarcodeChainway_getSignatureImageWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSignatureImageWidth_caller : NSObject {

}
+(rb_BarcodeChainway_getSignatureImageWidth_caller*) getSharedInstance;
+(void) getSignatureImageWidth:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params;
+(void) getSignatureImageWidth_in_thread:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params;
+(void) getSignatureImageWidth_in_UI_thread:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSignatureImageWidth_caller* our_BarcodeChainway_getSignatureImageWidth_caller = nil;

@implementation rb_BarcodeChainway_getSignatureImageWidth_caller

+(rb_BarcodeChainway_getSignatureImageWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSignatureImageWidth_caller == nil) {
        our_BarcodeChainway_getSignatureImageWidth_caller = [[rb_BarcodeChainway_getSignatureImageWidth_caller alloc] init];
    }
    return our_BarcodeChainway_getSignatureImageWidth_caller;
}

-(void) command_getSignatureImageWidth:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSignatureImageWidth:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSignatureImageWidth:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageWidth_caller getSharedInstance] command_getSignatureImageWidth:caller_params];
}

+(void) getSignatureImageWidth_in_thread:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_getSignatureImageWidth:) withObject:caller_params];
}

+(void) getSignatureImageWidth_in_UI_thread:(rb_BarcodeChainway_getSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSignatureImageWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSignatureImageWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageWidth"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSignatureImageWidth_caller getSignatureImageWidth_in_thread:[rb_BarcodeChainway_getSignatureImageWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSignatureImageWidth_caller getSignatureImageWidth:[rb_BarcodeChainway_getSignatureImageWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSignatureImageWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSignatureImageWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSignatureImageWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSignatureImageWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setSignatureImageWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setSignatureImageWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setSignatureImageWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setSignatureImageWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setSignatureImageWidth_caller_params* par = [[[rb_BarcodeChainway_setSignatureImageWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setSignatureImageWidth_caller : NSObject {

}
+(rb_BarcodeChainway_setSignatureImageWidth_caller*) getSharedInstance;
+(void) setSignatureImageWidth:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params;
+(void) setSignatureImageWidth_in_thread:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params;
+(void) setSignatureImageWidth_in_UI_thread:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setSignatureImageWidth_caller* our_BarcodeChainway_setSignatureImageWidth_caller = nil;

@implementation rb_BarcodeChainway_setSignatureImageWidth_caller

+(rb_BarcodeChainway_setSignatureImageWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_setSignatureImageWidth_caller == nil) {
        our_BarcodeChainway_setSignatureImageWidth_caller = [[rb_BarcodeChainway_setSignatureImageWidth_caller alloc] init];
    }
    return our_BarcodeChainway_setSignatureImageWidth_caller;
}

-(void) command_setSignatureImageWidth:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setSignatureImageWidth:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setSignatureImageWidth:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageWidth_caller getSharedInstance] command_setSignatureImageWidth:caller_params];
}

+(void) setSignatureImageWidth_in_thread:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_setSignatureImageWidth:) withObject:caller_params];
}

+(void) setSignatureImageWidth_in_UI_thread:(rb_BarcodeChainway_setSignatureImageWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setSignatureImageWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setSignatureImageWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageWidth="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setSignatureImageWidth_caller setSignatureImageWidth_in_thread:[rb_BarcodeChainway_setSignatureImageWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setSignatureImageWidth_caller setSignatureImageWidth:[rb_BarcodeChainway_setSignatureImageWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setSignatureImageWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setSignatureImageWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setSignatureImageWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setSignatureImageWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSignatureImageQuality_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSignatureImageQuality_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSignatureImageQuality_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSignatureImageQuality_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSignatureImageQuality_caller_params* par = [[[rb_BarcodeChainway_getSignatureImageQuality_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSignatureImageQuality_caller : NSObject {

}
+(rb_BarcodeChainway_getSignatureImageQuality_caller*) getSharedInstance;
+(void) getSignatureImageQuality:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params;
+(void) getSignatureImageQuality_in_thread:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params;
+(void) getSignatureImageQuality_in_UI_thread:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSignatureImageQuality_caller* our_BarcodeChainway_getSignatureImageQuality_caller = nil;

@implementation rb_BarcodeChainway_getSignatureImageQuality_caller

+(rb_BarcodeChainway_getSignatureImageQuality_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSignatureImageQuality_caller == nil) {
        our_BarcodeChainway_getSignatureImageQuality_caller = [[rb_BarcodeChainway_getSignatureImageQuality_caller alloc] init];
    }
    return our_BarcodeChainway_getSignatureImageQuality_caller;
}

-(void) command_getSignatureImageQuality:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSignatureImageQuality:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSignatureImageQuality:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageQuality_caller getSharedInstance] command_getSignatureImageQuality:caller_params];
}

+(void) getSignatureImageQuality_in_thread:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageQuality_caller getSharedInstance] performSelectorInBackground:@selector(command_getSignatureImageQuality:) withObject:caller_params];
}

+(void) getSignatureImageQuality_in_UI_thread:(rb_BarcodeChainway_getSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSignatureImageQuality_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSignatureImageQuality:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSignatureImageQuality_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageQuality"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSignatureImageQuality_caller getSignatureImageQuality_in_thread:[rb_BarcodeChainway_getSignatureImageQuality_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSignatureImageQuality_caller getSignatureImageQuality:[rb_BarcodeChainway_getSignatureImageQuality_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSignatureImageQuality(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSignatureImageQuality_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSignatureImageQuality(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSignatureImageQuality_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setSignatureImageQuality_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setSignatureImageQuality_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setSignatureImageQuality_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setSignatureImageQuality_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setSignatureImageQuality_caller_params* par = [[[rb_BarcodeChainway_setSignatureImageQuality_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setSignatureImageQuality_caller : NSObject {

}
+(rb_BarcodeChainway_setSignatureImageQuality_caller*) getSharedInstance;
+(void) setSignatureImageQuality:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params;
+(void) setSignatureImageQuality_in_thread:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params;
+(void) setSignatureImageQuality_in_UI_thread:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setSignatureImageQuality_caller* our_BarcodeChainway_setSignatureImageQuality_caller = nil;

@implementation rb_BarcodeChainway_setSignatureImageQuality_caller

+(rb_BarcodeChainway_setSignatureImageQuality_caller*) getSharedInstance {
    if (our_BarcodeChainway_setSignatureImageQuality_caller == nil) {
        our_BarcodeChainway_setSignatureImageQuality_caller = [[rb_BarcodeChainway_setSignatureImageQuality_caller alloc] init];
    }
    return our_BarcodeChainway_setSignatureImageQuality_caller;
}

-(void) command_setSignatureImageQuality:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setSignatureImageQuality:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setSignatureImageQuality:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageQuality_caller getSharedInstance] command_setSignatureImageQuality:caller_params];
}

+(void) setSignatureImageQuality_in_thread:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageQuality_caller getSharedInstance] performSelectorInBackground:@selector(command_setSignatureImageQuality:) withObject:caller_params];
}

+(void) setSignatureImageQuality_in_UI_thread:(rb_BarcodeChainway_setSignatureImageQuality_caller_params*)caller_params {
    [[rb_BarcodeChainway_setSignatureImageQuality_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setSignatureImageQuality:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setSignatureImageQuality_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::signatureImageQuality="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setSignatureImageQuality_caller setSignatureImageQuality_in_thread:[rb_BarcodeChainway_setSignatureImageQuality_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setSignatureImageQuality_caller setSignatureImageQuality:[rb_BarcodeChainway_setSignatureImageQuality_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setSignatureImageQuality(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setSignatureImageQuality_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setSignatureImageQuality(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setSignatureImageQuality_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAusPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAusPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAusPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAusPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAusPostal_caller_params* par = [[[rb_BarcodeChainway_getAusPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAusPostal_caller : NSObject {

}
+(rb_BarcodeChainway_getAusPostal_caller*) getSharedInstance;
+(void) getAusPostal:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params;
+(void) getAusPostal_in_thread:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params;
+(void) getAusPostal_in_UI_thread:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAusPostal_caller* our_BarcodeChainway_getAusPostal_caller = nil;

@implementation rb_BarcodeChainway_getAusPostal_caller

+(rb_BarcodeChainway_getAusPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAusPostal_caller == nil) {
        our_BarcodeChainway_getAusPostal_caller = [[rb_BarcodeChainway_getAusPostal_caller alloc] init];
    }
    return our_BarcodeChainway_getAusPostal_caller;
}

-(void) command_getAusPostal:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAusPostal:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAusPostal:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAusPostal_caller getSharedInstance] command_getAusPostal:caller_params];
}

+(void) getAusPostal_in_thread:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAusPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_getAusPostal:) withObject:caller_params];
}

+(void) getAusPostal_in_UI_thread:(rb_BarcodeChainway_getAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAusPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAusPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAusPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ausPostal"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAusPostal_caller getAusPostal_in_thread:[rb_BarcodeChainway_getAusPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAusPostal_caller getAusPostal:[rb_BarcodeChainway_getAusPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAusPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAusPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAusPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAusPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setAusPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setAusPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setAusPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setAusPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setAusPostal_caller_params* par = [[[rb_BarcodeChainway_setAusPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setAusPostal_caller : NSObject {

}
+(rb_BarcodeChainway_setAusPostal_caller*) getSharedInstance;
+(void) setAusPostal:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params;
+(void) setAusPostal_in_thread:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params;
+(void) setAusPostal_in_UI_thread:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setAusPostal_caller* our_BarcodeChainway_setAusPostal_caller = nil;

@implementation rb_BarcodeChainway_setAusPostal_caller

+(rb_BarcodeChainway_setAusPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_setAusPostal_caller == nil) {
        our_BarcodeChainway_setAusPostal_caller = [[rb_BarcodeChainway_setAusPostal_caller alloc] init];
    }
    return our_BarcodeChainway_setAusPostal_caller;
}

-(void) command_setAusPostal:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setAusPostal:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setAusPostal:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAusPostal_caller getSharedInstance] command_setAusPostal:caller_params];
}

+(void) setAusPostal_in_thread:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAusPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_setAusPostal:) withObject:caller_params];
}

+(void) setAusPostal_in_UI_thread:(rb_BarcodeChainway_setAusPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setAusPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setAusPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setAusPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ausPostal="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setAusPostal_caller setAusPostal_in_thread:[rb_BarcodeChainway_setAusPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setAusPostal_caller setAusPostal:[rb_BarcodeChainway_setAusPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setAusPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setAusPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setAusPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setAusPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getCanPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getCanPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getCanPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getCanPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getCanPostal_caller_params* par = [[[rb_BarcodeChainway_getCanPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getCanPostal_caller : NSObject {

}
+(rb_BarcodeChainway_getCanPostal_caller*) getSharedInstance;
+(void) getCanPostal:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params;
+(void) getCanPostal_in_thread:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params;
+(void) getCanPostal_in_UI_thread:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getCanPostal_caller* our_BarcodeChainway_getCanPostal_caller = nil;

@implementation rb_BarcodeChainway_getCanPostal_caller

+(rb_BarcodeChainway_getCanPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_getCanPostal_caller == nil) {
        our_BarcodeChainway_getCanPostal_caller = [[rb_BarcodeChainway_getCanPostal_caller alloc] init];
    }
    return our_BarcodeChainway_getCanPostal_caller;
}

-(void) command_getCanPostal:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getCanPostal:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getCanPostal:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCanPostal_caller getSharedInstance] command_getCanPostal:caller_params];
}

+(void) getCanPostal_in_thread:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCanPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_getCanPostal:) withObject:caller_params];
}

+(void) getCanPostal_in_UI_thread:(rb_BarcodeChainway_getCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getCanPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getCanPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getCanPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::canPostal"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getCanPostal_caller getCanPostal_in_thread:[rb_BarcodeChainway_getCanPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getCanPostal_caller getCanPostal:[rb_BarcodeChainway_getCanPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getCanPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getCanPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getCanPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getCanPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setCanPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setCanPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setCanPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setCanPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setCanPostal_caller_params* par = [[[rb_BarcodeChainway_setCanPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setCanPostal_caller : NSObject {

}
+(rb_BarcodeChainway_setCanPostal_caller*) getSharedInstance;
+(void) setCanPostal:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params;
+(void) setCanPostal_in_thread:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params;
+(void) setCanPostal_in_UI_thread:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setCanPostal_caller* our_BarcodeChainway_setCanPostal_caller = nil;

@implementation rb_BarcodeChainway_setCanPostal_caller

+(rb_BarcodeChainway_setCanPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_setCanPostal_caller == nil) {
        our_BarcodeChainway_setCanPostal_caller = [[rb_BarcodeChainway_setCanPostal_caller alloc] init];
    }
    return our_BarcodeChainway_setCanPostal_caller;
}

-(void) command_setCanPostal:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setCanPostal:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setCanPostal:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCanPostal_caller getSharedInstance] command_setCanPostal:caller_params];
}

+(void) setCanPostal_in_thread:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCanPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_setCanPostal:) withObject:caller_params];
}

+(void) setCanPostal_in_UI_thread:(rb_BarcodeChainway_setCanPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setCanPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setCanPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setCanPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::canPostal="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setCanPostal_caller setCanPostal_in_thread:[rb_BarcodeChainway_setCanPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setCanPostal_caller setCanPostal:[rb_BarcodeChainway_setCanPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setCanPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setCanPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setCanPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setCanPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getDutchPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getDutchPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getDutchPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getDutchPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getDutchPostal_caller_params* par = [[[rb_BarcodeChainway_getDutchPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getDutchPostal_caller : NSObject {

}
+(rb_BarcodeChainway_getDutchPostal_caller*) getSharedInstance;
+(void) getDutchPostal:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params;
+(void) getDutchPostal_in_thread:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params;
+(void) getDutchPostal_in_UI_thread:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getDutchPostal_caller* our_BarcodeChainway_getDutchPostal_caller = nil;

@implementation rb_BarcodeChainway_getDutchPostal_caller

+(rb_BarcodeChainway_getDutchPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_getDutchPostal_caller == nil) {
        our_BarcodeChainway_getDutchPostal_caller = [[rb_BarcodeChainway_getDutchPostal_caller alloc] init];
    }
    return our_BarcodeChainway_getDutchPostal_caller;
}

-(void) command_getDutchPostal:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getDutchPostal:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getDutchPostal:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDutchPostal_caller getSharedInstance] command_getDutchPostal:caller_params];
}

+(void) getDutchPostal_in_thread:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDutchPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_getDutchPostal:) withObject:caller_params];
}

+(void) getDutchPostal_in_UI_thread:(rb_BarcodeChainway_getDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getDutchPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getDutchPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getDutchPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dutchPostal"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getDutchPostal_caller getDutchPostal_in_thread:[rb_BarcodeChainway_getDutchPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getDutchPostal_caller getDutchPostal:[rb_BarcodeChainway_getDutchPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getDutchPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getDutchPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getDutchPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getDutchPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setDutchPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setDutchPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setDutchPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setDutchPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setDutchPostal_caller_params* par = [[[rb_BarcodeChainway_setDutchPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setDutchPostal_caller : NSObject {

}
+(rb_BarcodeChainway_setDutchPostal_caller*) getSharedInstance;
+(void) setDutchPostal:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params;
+(void) setDutchPostal_in_thread:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params;
+(void) setDutchPostal_in_UI_thread:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setDutchPostal_caller* our_BarcodeChainway_setDutchPostal_caller = nil;

@implementation rb_BarcodeChainway_setDutchPostal_caller

+(rb_BarcodeChainway_setDutchPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_setDutchPostal_caller == nil) {
        our_BarcodeChainway_setDutchPostal_caller = [[rb_BarcodeChainway_setDutchPostal_caller alloc] init];
    }
    return our_BarcodeChainway_setDutchPostal_caller;
}

-(void) command_setDutchPostal:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setDutchPostal:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setDutchPostal:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDutchPostal_caller getSharedInstance] command_setDutchPostal:caller_params];
}

+(void) setDutchPostal_in_thread:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDutchPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_setDutchPostal:) withObject:caller_params];
}

+(void) setDutchPostal_in_UI_thread:(rb_BarcodeChainway_setDutchPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setDutchPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setDutchPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setDutchPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::dutchPostal="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setDutchPostal_caller setDutchPostal_in_thread:[rb_BarcodeChainway_setDutchPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setDutchPostal_caller setDutchPostal:[rb_BarcodeChainway_setDutchPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setDutchPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setDutchPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setDutchPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setDutchPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getJapPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getJapPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getJapPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getJapPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getJapPostal_caller_params* par = [[[rb_BarcodeChainway_getJapPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getJapPostal_caller : NSObject {

}
+(rb_BarcodeChainway_getJapPostal_caller*) getSharedInstance;
+(void) getJapPostal:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params;
+(void) getJapPostal_in_thread:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params;
+(void) getJapPostal_in_UI_thread:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getJapPostal_caller* our_BarcodeChainway_getJapPostal_caller = nil;

@implementation rb_BarcodeChainway_getJapPostal_caller

+(rb_BarcodeChainway_getJapPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_getJapPostal_caller == nil) {
        our_BarcodeChainway_getJapPostal_caller = [[rb_BarcodeChainway_getJapPostal_caller alloc] init];
    }
    return our_BarcodeChainway_getJapPostal_caller;
}

-(void) command_getJapPostal:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getJapPostal:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getJapPostal:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getJapPostal_caller getSharedInstance] command_getJapPostal:caller_params];
}

+(void) getJapPostal_in_thread:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getJapPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_getJapPostal:) withObject:caller_params];
}

+(void) getJapPostal_in_UI_thread:(rb_BarcodeChainway_getJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getJapPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getJapPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getJapPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::japPostal"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getJapPostal_caller getJapPostal_in_thread:[rb_BarcodeChainway_getJapPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getJapPostal_caller getJapPostal:[rb_BarcodeChainway_getJapPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getJapPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getJapPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getJapPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getJapPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setJapPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setJapPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setJapPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setJapPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setJapPostal_caller_params* par = [[[rb_BarcodeChainway_setJapPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setJapPostal_caller : NSObject {

}
+(rb_BarcodeChainway_setJapPostal_caller*) getSharedInstance;
+(void) setJapPostal:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params;
+(void) setJapPostal_in_thread:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params;
+(void) setJapPostal_in_UI_thread:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setJapPostal_caller* our_BarcodeChainway_setJapPostal_caller = nil;

@implementation rb_BarcodeChainway_setJapPostal_caller

+(rb_BarcodeChainway_setJapPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_setJapPostal_caller == nil) {
        our_BarcodeChainway_setJapPostal_caller = [[rb_BarcodeChainway_setJapPostal_caller alloc] init];
    }
    return our_BarcodeChainway_setJapPostal_caller;
}

-(void) command_setJapPostal:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setJapPostal:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setJapPostal:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setJapPostal_caller getSharedInstance] command_setJapPostal:caller_params];
}

+(void) setJapPostal_in_thread:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setJapPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_setJapPostal:) withObject:caller_params];
}

+(void) setJapPostal_in_UI_thread:(rb_BarcodeChainway_setJapPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setJapPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setJapPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setJapPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::japPostal="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setJapPostal_caller setJapPostal_in_thread:[rb_BarcodeChainway_setJapPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setJapPostal_caller setJapPostal:[rb_BarcodeChainway_setJapPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setJapPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setJapPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setJapPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setJapPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUkPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUkPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUkPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUkPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUkPostal_caller_params* par = [[[rb_BarcodeChainway_getUkPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUkPostal_caller : NSObject {

}
+(rb_BarcodeChainway_getUkPostal_caller*) getSharedInstance;
+(void) getUkPostal:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params;
+(void) getUkPostal_in_thread:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params;
+(void) getUkPostal_in_UI_thread:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUkPostal_caller* our_BarcodeChainway_getUkPostal_caller = nil;

@implementation rb_BarcodeChainway_getUkPostal_caller

+(rb_BarcodeChainway_getUkPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUkPostal_caller == nil) {
        our_BarcodeChainway_getUkPostal_caller = [[rb_BarcodeChainway_getUkPostal_caller alloc] init];
    }
    return our_BarcodeChainway_getUkPostal_caller;
}

-(void) command_getUkPostal:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUkPostal:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUkPostal:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostal_caller getSharedInstance] command_getUkPostal:caller_params];
}

+(void) getUkPostal_in_thread:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_getUkPostal:) withObject:caller_params];
}

+(void) getUkPostal_in_UI_thread:(rb_BarcodeChainway_getUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUkPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUkPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ukPostal"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUkPostal_caller getUkPostal_in_thread:[rb_BarcodeChainway_getUkPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUkPostal_caller getUkPostal:[rb_BarcodeChainway_getUkPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUkPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUkPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUkPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUkPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUkPostal_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUkPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUkPostal_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUkPostal_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUkPostal_caller_params* par = [[[rb_BarcodeChainway_setUkPostal_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUkPostal_caller : NSObject {

}
+(rb_BarcodeChainway_setUkPostal_caller*) getSharedInstance;
+(void) setUkPostal:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params;
+(void) setUkPostal_in_thread:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params;
+(void) setUkPostal_in_UI_thread:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUkPostal_caller* our_BarcodeChainway_setUkPostal_caller = nil;

@implementation rb_BarcodeChainway_setUkPostal_caller

+(rb_BarcodeChainway_setUkPostal_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUkPostal_caller == nil) {
        our_BarcodeChainway_setUkPostal_caller = [[rb_BarcodeChainway_setUkPostal_caller alloc] init];
    }
    return our_BarcodeChainway_setUkPostal_caller;
}

-(void) command_setUkPostal:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUkPostal:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUkPostal:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostal_caller getSharedInstance] command_setUkPostal:caller_params];
}

+(void) setUkPostal_in_thread:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostal_caller getSharedInstance] performSelectorInBackground:@selector(command_setUkPostal:) withObject:caller_params];
}

+(void) setUkPostal_in_UI_thread:(rb_BarcodeChainway_setUkPostal_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostal_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUkPostal:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUkPostal_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ukPostal="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUkPostal_caller setUkPostal_in_thread:[rb_BarcodeChainway_setUkPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUkPostal_caller setUkPostal:[rb_BarcodeChainway_setUkPostal_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUkPostal(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUkPostal_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUkPostal(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUkPostal_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUkPostalReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller*) getSharedInstance;
+(void) getUkPostalReportCheckDigit:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params;
+(void) getUkPostalReportCheckDigit_in_thread:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params;
+(void) getUkPostalReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUkPostalReportCheckDigit_caller* our_BarcodeChainway_getUkPostalReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUkPostalReportCheckDigit_caller

+(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUkPostalReportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUkPostalReportCheckDigit_caller = [[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUkPostalReportCheckDigit_caller;
}

-(void) command_getUkPostalReportCheckDigit:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUkPostalReportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUkPostalReportCheckDigit:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller getSharedInstance] command_getUkPostalReportCheckDigit:caller_params];
}

+(void) getUkPostalReportCheckDigit_in_thread:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUkPostalReportCheckDigit:) withObject:caller_params];
}

+(void) getUkPostalReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUkPostalReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUkPostalReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ukPostalReportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUkPostalReportCheckDigit_caller getUkPostalReportCheckDigit_in_thread:[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUkPostalReportCheckDigit_caller getUkPostalReportCheckDigit:[rb_BarcodeChainway_getUkPostalReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUkPostalReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUkPostalReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUkPostalReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUkPostalReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUkPostalReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller*) getSharedInstance;
+(void) setUkPostalReportCheckDigit:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params;
+(void) setUkPostalReportCheckDigit_in_thread:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params;
+(void) setUkPostalReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUkPostalReportCheckDigit_caller* our_BarcodeChainway_setUkPostalReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUkPostalReportCheckDigit_caller

+(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUkPostalReportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUkPostalReportCheckDigit_caller = [[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUkPostalReportCheckDigit_caller;
}

-(void) command_setUkPostalReportCheckDigit:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUkPostalReportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUkPostalReportCheckDigit:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller getSharedInstance] command_setUkPostalReportCheckDigit:caller_params];
}

+(void) setUkPostalReportCheckDigit_in_thread:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUkPostalReportCheckDigit:) withObject:caller_params];
}

+(void) setUkPostalReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUkPostalReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUkPostalReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::ukPostalReportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUkPostalReportCheckDigit_caller setUkPostalReportCheckDigit_in_thread:[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUkPostalReportCheckDigit_caller setUkPostalReportCheckDigit:[rb_BarcodeChainway_setUkPostalReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUkPostalReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUkPostalReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUkPostalReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUkPostalReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUs4state_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUs4state_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUs4state_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUs4state_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUs4state_caller_params* par = [[[rb_BarcodeChainway_getUs4state_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUs4state_caller : NSObject {

}
+(rb_BarcodeChainway_getUs4state_caller*) getSharedInstance;
+(void) getUs4state:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params;
+(void) getUs4state_in_thread:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params;
+(void) getUs4state_in_UI_thread:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUs4state_caller* our_BarcodeChainway_getUs4state_caller = nil;

@implementation rb_BarcodeChainway_getUs4state_caller

+(rb_BarcodeChainway_getUs4state_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUs4state_caller == nil) {
        our_BarcodeChainway_getUs4state_caller = [[rb_BarcodeChainway_getUs4state_caller alloc] init];
    }
    return our_BarcodeChainway_getUs4state_caller;
}

-(void) command_getUs4state:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUs4state:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUs4state:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4state_caller getSharedInstance] command_getUs4state:caller_params];
}

+(void) getUs4state_in_thread:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4state_caller getSharedInstance] performSelectorInBackground:@selector(command_getUs4state:) withObject:caller_params];
}

+(void) getUs4state_in_UI_thread:(rb_BarcodeChainway_getUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4state_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUs4state:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUs4state_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::us4state"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUs4state_caller getUs4state_in_thread:[rb_BarcodeChainway_getUs4state_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUs4state_caller getUs4state:[rb_BarcodeChainway_getUs4state_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUs4state(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUs4state_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUs4state(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUs4state_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUs4state_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUs4state_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUs4state_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUs4state_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUs4state_caller_params* par = [[[rb_BarcodeChainway_setUs4state_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUs4state_caller : NSObject {

}
+(rb_BarcodeChainway_setUs4state_caller*) getSharedInstance;
+(void) setUs4state:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params;
+(void) setUs4state_in_thread:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params;
+(void) setUs4state_in_UI_thread:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUs4state_caller* our_BarcodeChainway_setUs4state_caller = nil;

@implementation rb_BarcodeChainway_setUs4state_caller

+(rb_BarcodeChainway_setUs4state_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUs4state_caller == nil) {
        our_BarcodeChainway_setUs4state_caller = [[rb_BarcodeChainway_setUs4state_caller alloc] init];
    }
    return our_BarcodeChainway_setUs4state_caller;
}

-(void) command_setUs4state:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUs4state:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUs4state:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4state_caller getSharedInstance] command_setUs4state:caller_params];
}

+(void) setUs4state_in_thread:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4state_caller getSharedInstance] performSelectorInBackground:@selector(command_setUs4state:) withObject:caller_params];
}

+(void) setUs4state_in_UI_thread:(rb_BarcodeChainway_setUs4state_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4state_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUs4state:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUs4state_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::us4state="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUs4state_caller setUs4state_in_thread:[rb_BarcodeChainway_setUs4state_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUs4state_caller setUs4state:[rb_BarcodeChainway_setUs4state_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUs4state(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUs4state_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUs4state(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUs4state_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUs4stateFics_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUs4stateFics_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUs4stateFics_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUs4stateFics_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUs4stateFics_caller_params* par = [[[rb_BarcodeChainway_getUs4stateFics_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUs4stateFics_caller : NSObject {

}
+(rb_BarcodeChainway_getUs4stateFics_caller*) getSharedInstance;
+(void) getUs4stateFics:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params;
+(void) getUs4stateFics_in_thread:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params;
+(void) getUs4stateFics_in_UI_thread:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUs4stateFics_caller* our_BarcodeChainway_getUs4stateFics_caller = nil;

@implementation rb_BarcodeChainway_getUs4stateFics_caller

+(rb_BarcodeChainway_getUs4stateFics_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUs4stateFics_caller == nil) {
        our_BarcodeChainway_getUs4stateFics_caller = [[rb_BarcodeChainway_getUs4stateFics_caller alloc] init];
    }
    return our_BarcodeChainway_getUs4stateFics_caller;
}

-(void) command_getUs4stateFics:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUs4stateFics:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUs4stateFics:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4stateFics_caller getSharedInstance] command_getUs4stateFics:caller_params];
}

+(void) getUs4stateFics_in_thread:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4stateFics_caller getSharedInstance] performSelectorInBackground:@selector(command_getUs4stateFics:) withObject:caller_params];
}

+(void) getUs4stateFics_in_UI_thread:(rb_BarcodeChainway_getUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUs4stateFics_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUs4stateFics:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUs4stateFics_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::us4stateFics"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUs4stateFics_caller getUs4stateFics_in_thread:[rb_BarcodeChainway_getUs4stateFics_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUs4stateFics_caller getUs4stateFics:[rb_BarcodeChainway_getUs4stateFics_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUs4stateFics(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUs4stateFics_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUs4stateFics(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUs4stateFics_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUs4stateFics_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUs4stateFics_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUs4stateFics_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUs4stateFics_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUs4stateFics_caller_params* par = [[[rb_BarcodeChainway_setUs4stateFics_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUs4stateFics_caller : NSObject {

}
+(rb_BarcodeChainway_setUs4stateFics_caller*) getSharedInstance;
+(void) setUs4stateFics:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params;
+(void) setUs4stateFics_in_thread:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params;
+(void) setUs4stateFics_in_UI_thread:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUs4stateFics_caller* our_BarcodeChainway_setUs4stateFics_caller = nil;

@implementation rb_BarcodeChainway_setUs4stateFics_caller

+(rb_BarcodeChainway_setUs4stateFics_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUs4stateFics_caller == nil) {
        our_BarcodeChainway_setUs4stateFics_caller = [[rb_BarcodeChainway_setUs4stateFics_caller alloc] init];
    }
    return our_BarcodeChainway_setUs4stateFics_caller;
}

-(void) command_setUs4stateFics:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUs4stateFics:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUs4stateFics:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4stateFics_caller getSharedInstance] command_setUs4stateFics:caller_params];
}

+(void) setUs4stateFics_in_thread:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4stateFics_caller getSharedInstance] performSelectorInBackground:@selector(command_setUs4stateFics:) withObject:caller_params];
}

+(void) setUs4stateFics_in_UI_thread:(rb_BarcodeChainway_setUs4stateFics_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUs4stateFics_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUs4stateFics:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUs4stateFics_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::us4stateFics="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUs4stateFics_caller setUs4stateFics_in_thread:[rb_BarcodeChainway_setUs4stateFics_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUs4stateFics_caller setUs4stateFics:[rb_BarcodeChainway_setUs4stateFics_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUs4stateFics(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUs4stateFics_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUs4stateFics(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUs4stateFics_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUsPlanet_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUsPlanet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUsPlanet_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUsPlanet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUsPlanet_caller_params* par = [[[rb_BarcodeChainway_getUsPlanet_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUsPlanet_caller : NSObject {

}
+(rb_BarcodeChainway_getUsPlanet_caller*) getSharedInstance;
+(void) getUsPlanet:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params;
+(void) getUsPlanet_in_thread:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params;
+(void) getUsPlanet_in_UI_thread:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUsPlanet_caller* our_BarcodeChainway_getUsPlanet_caller = nil;

@implementation rb_BarcodeChainway_getUsPlanet_caller

+(rb_BarcodeChainway_getUsPlanet_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUsPlanet_caller == nil) {
        our_BarcodeChainway_getUsPlanet_caller = [[rb_BarcodeChainway_getUsPlanet_caller alloc] init];
    }
    return our_BarcodeChainway_getUsPlanet_caller;
}

-(void) command_getUsPlanet:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUsPlanet:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUsPlanet:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanet_caller getSharedInstance] command_getUsPlanet:caller_params];
}

+(void) getUsPlanet_in_thread:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanet_caller getSharedInstance] performSelectorInBackground:@selector(command_getUsPlanet:) withObject:caller_params];
}

+(void) getUsPlanet_in_UI_thread:(rb_BarcodeChainway_getUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanet_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUsPlanet:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUsPlanet_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPlanet"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUsPlanet_caller getUsPlanet_in_thread:[rb_BarcodeChainway_getUsPlanet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUsPlanet_caller getUsPlanet:[rb_BarcodeChainway_getUsPlanet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUsPlanet(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUsPlanet_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUsPlanet(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUsPlanet_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUsPlanet_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUsPlanet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUsPlanet_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUsPlanet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUsPlanet_caller_params* par = [[[rb_BarcodeChainway_setUsPlanet_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUsPlanet_caller : NSObject {

}
+(rb_BarcodeChainway_setUsPlanet_caller*) getSharedInstance;
+(void) setUsPlanet:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params;
+(void) setUsPlanet_in_thread:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params;
+(void) setUsPlanet_in_UI_thread:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUsPlanet_caller* our_BarcodeChainway_setUsPlanet_caller = nil;

@implementation rb_BarcodeChainway_setUsPlanet_caller

+(rb_BarcodeChainway_setUsPlanet_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUsPlanet_caller == nil) {
        our_BarcodeChainway_setUsPlanet_caller = [[rb_BarcodeChainway_setUsPlanet_caller alloc] init];
    }
    return our_BarcodeChainway_setUsPlanet_caller;
}

-(void) command_setUsPlanet:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUsPlanet:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUsPlanet:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanet_caller getSharedInstance] command_setUsPlanet:caller_params];
}

+(void) setUsPlanet_in_thread:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanet_caller getSharedInstance] performSelectorInBackground:@selector(command_setUsPlanet:) withObject:caller_params];
}

+(void) setUsPlanet_in_UI_thread:(rb_BarcodeChainway_setUsPlanet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanet_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUsPlanet:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUsPlanet_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPlanet="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUsPlanet_caller setUsPlanet_in_thread:[rb_BarcodeChainway_setUsPlanet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUsPlanet_caller setUsPlanet:[rb_BarcodeChainway_setUsPlanet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUsPlanet(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUsPlanet_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUsPlanet(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUsPlanet_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller*) getSharedInstance;
+(void) getUsPlanetReportCheckDigit:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params;
+(void) getUsPlanetReportCheckDigit_in_thread:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params;
+(void) getUsPlanetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller* our_BarcodeChainway_getUsPlanetReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller

+(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUsPlanetReportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUsPlanetReportCheckDigit_caller = [[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUsPlanetReportCheckDigit_caller;
}

-(void) command_getUsPlanetReportCheckDigit:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUsPlanetReportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUsPlanetReportCheckDigit:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller getSharedInstance] command_getUsPlanetReportCheckDigit:caller_params];
}

+(void) getUsPlanetReportCheckDigit_in_thread:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUsPlanetReportCheckDigit:) withObject:caller_params];
}

+(void) getUsPlanetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUsPlanetReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUsPlanetReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPlanetReportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller getUsPlanetReportCheckDigit_in_thread:[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller getUsPlanetReportCheckDigit:[rb_BarcodeChainway_getUsPlanetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUsPlanetReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUsPlanetReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUsPlanetReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUsPlanetReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller*) getSharedInstance;
+(void) setUsPlanetReportCheckDigit:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params;
+(void) setUsPlanetReportCheckDigit_in_thread:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params;
+(void) setUsPlanetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller* our_BarcodeChainway_setUsPlanetReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller

+(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUsPlanetReportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUsPlanetReportCheckDigit_caller = [[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUsPlanetReportCheckDigit_caller;
}

-(void) command_setUsPlanetReportCheckDigit:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUsPlanetReportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUsPlanetReportCheckDigit:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller getSharedInstance] command_setUsPlanetReportCheckDigit:caller_params];
}

+(void) setUsPlanetReportCheckDigit_in_thread:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUsPlanetReportCheckDigit:) withObject:caller_params];
}

+(void) setUsPlanetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUsPlanetReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUsPlanetReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPlanetReportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller setUsPlanetReportCheckDigit_in_thread:[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller setUsPlanetReportCheckDigit:[rb_BarcodeChainway_setUsPlanetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUsPlanetReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUsPlanetReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUsPlanetReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUsPlanetReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUsPostNet_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUsPostNet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUsPostNet_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUsPostNet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUsPostNet_caller_params* par = [[[rb_BarcodeChainway_getUsPostNet_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUsPostNet_caller : NSObject {

}
+(rb_BarcodeChainway_getUsPostNet_caller*) getSharedInstance;
+(void) getUsPostNet:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params;
+(void) getUsPostNet_in_thread:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params;
+(void) getUsPostNet_in_UI_thread:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUsPostNet_caller* our_BarcodeChainway_getUsPostNet_caller = nil;

@implementation rb_BarcodeChainway_getUsPostNet_caller

+(rb_BarcodeChainway_getUsPostNet_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUsPostNet_caller == nil) {
        our_BarcodeChainway_getUsPostNet_caller = [[rb_BarcodeChainway_getUsPostNet_caller alloc] init];
    }
    return our_BarcodeChainway_getUsPostNet_caller;
}

-(void) command_getUsPostNet:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUsPostNet:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUsPostNet:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNet_caller getSharedInstance] command_getUsPostNet:caller_params];
}

+(void) getUsPostNet_in_thread:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNet_caller getSharedInstance] performSelectorInBackground:@selector(command_getUsPostNet:) withObject:caller_params];
}

+(void) getUsPostNet_in_UI_thread:(rb_BarcodeChainway_getUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNet_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUsPostNet:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUsPostNet_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPostNet"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUsPostNet_caller getUsPostNet_in_thread:[rb_BarcodeChainway_getUsPostNet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUsPostNet_caller getUsPostNet:[rb_BarcodeChainway_getUsPostNet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUsPostNet(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUsPostNet_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUsPostNet(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUsPostNet_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUsPostNet_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUsPostNet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUsPostNet_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUsPostNet_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUsPostNet_caller_params* par = [[[rb_BarcodeChainway_setUsPostNet_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUsPostNet_caller : NSObject {

}
+(rb_BarcodeChainway_setUsPostNet_caller*) getSharedInstance;
+(void) setUsPostNet:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params;
+(void) setUsPostNet_in_thread:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params;
+(void) setUsPostNet_in_UI_thread:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUsPostNet_caller* our_BarcodeChainway_setUsPostNet_caller = nil;

@implementation rb_BarcodeChainway_setUsPostNet_caller

+(rb_BarcodeChainway_setUsPostNet_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUsPostNet_caller == nil) {
        our_BarcodeChainway_setUsPostNet_caller = [[rb_BarcodeChainway_setUsPostNet_caller alloc] init];
    }
    return our_BarcodeChainway_setUsPostNet_caller;
}

-(void) command_setUsPostNet:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUsPostNet:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUsPostNet:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNet_caller getSharedInstance] command_setUsPostNet:caller_params];
}

+(void) setUsPostNet_in_thread:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNet_caller getSharedInstance] performSelectorInBackground:@selector(command_setUsPostNet:) withObject:caller_params];
}

+(void) setUsPostNet_in_UI_thread:(rb_BarcodeChainway_setUsPostNet_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNet_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUsPostNet:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUsPostNet_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPostNet="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUsPostNet_caller setUsPostNet_in_thread:[rb_BarcodeChainway_setUsPostNet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUsPostNet_caller setUsPostNet:[rb_BarcodeChainway_setUsPostNet_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUsPostNet(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUsPostNet_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUsPostNet(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUsPostNet_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller*) getSharedInstance;
+(void) getUsPostNetReportCheckDigit:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params;
+(void) getUsPostNetReportCheckDigit_in_thread:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params;
+(void) getUsPostNetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller* our_BarcodeChainway_getUsPostNetReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller

+(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUsPostNetReportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUsPostNetReportCheckDigit_caller = [[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUsPostNetReportCheckDigit_caller;
}

-(void) command_getUsPostNetReportCheckDigit:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUsPostNetReportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUsPostNetReportCheckDigit:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller getSharedInstance] command_getUsPostNetReportCheckDigit:caller_params];
}

+(void) getUsPostNetReportCheckDigit_in_thread:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUsPostNetReportCheckDigit:) withObject:caller_params];
}

+(void) getUsPostNetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUsPostNetReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUsPostNetReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPostNetReportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller getUsPostNetReportCheckDigit_in_thread:[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller getUsPostNetReportCheckDigit:[rb_BarcodeChainway_getUsPostNetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUsPostNetReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUsPostNetReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUsPostNetReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUsPostNetReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller*) getSharedInstance;
+(void) setUsPostNetReportCheckDigit:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params;
+(void) setUsPostNetReportCheckDigit_in_thread:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params;
+(void) setUsPostNetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller* our_BarcodeChainway_setUsPostNetReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller

+(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUsPostNetReportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUsPostNetReportCheckDigit_caller = [[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUsPostNetReportCheckDigit_caller;
}

-(void) command_setUsPostNetReportCheckDigit:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUsPostNetReportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUsPostNetReportCheckDigit:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller getSharedInstance] command_setUsPostNetReportCheckDigit:caller_params];
}

+(void) setUsPostNetReportCheckDigit_in_thread:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUsPostNetReportCheckDigit:) withObject:caller_params];
}

+(void) setUsPostNetReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUsPostNetReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUsPostNetReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::usPostNetReportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller setUsPostNetReportCheckDigit_in_thread:[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller setUsPostNetReportCheckDigit:[rb_BarcodeChainway_setUsPostNetReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUsPostNetReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUsPostNetReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUsPostNetReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUsPostNetReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getQrCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getQrCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getQrCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getQrCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getQrCode_caller_params* par = [[[rb_BarcodeChainway_getQrCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getQrCode_caller : NSObject {

}
+(rb_BarcodeChainway_getQrCode_caller*) getSharedInstance;
+(void) getQrCode:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params;
+(void) getQrCode_in_thread:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params;
+(void) getQrCode_in_UI_thread:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getQrCode_caller* our_BarcodeChainway_getQrCode_caller = nil;

@implementation rb_BarcodeChainway_getQrCode_caller

+(rb_BarcodeChainway_getQrCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getQrCode_caller == nil) {
        our_BarcodeChainway_getQrCode_caller = [[rb_BarcodeChainway_getQrCode_caller alloc] init];
    }
    return our_BarcodeChainway_getQrCode_caller;
}

-(void) command_getQrCode:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getQrCode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getQrCode:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getQrCode_caller getSharedInstance] command_getQrCode:caller_params];
}

+(void) getQrCode_in_thread:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getQrCode_caller getSharedInstance] performSelectorInBackground:@selector(command_getQrCode:) withObject:caller_params];
}

+(void) getQrCode_in_UI_thread:(rb_BarcodeChainway_getQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getQrCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getQrCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getQrCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::qrCode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getQrCode_caller getQrCode_in_thread:[rb_BarcodeChainway_getQrCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getQrCode_caller getQrCode:[rb_BarcodeChainway_getQrCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getQrCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getQrCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getQrCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getQrCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setQrCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setQrCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setQrCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setQrCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setQrCode_caller_params* par = [[[rb_BarcodeChainway_setQrCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setQrCode_caller : NSObject {

}
+(rb_BarcodeChainway_setQrCode_caller*) getSharedInstance;
+(void) setQrCode:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params;
+(void) setQrCode_in_thread:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params;
+(void) setQrCode_in_UI_thread:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setQrCode_caller* our_BarcodeChainway_setQrCode_caller = nil;

@implementation rb_BarcodeChainway_setQrCode_caller

+(rb_BarcodeChainway_setQrCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setQrCode_caller == nil) {
        our_BarcodeChainway_setQrCode_caller = [[rb_BarcodeChainway_setQrCode_caller alloc] init];
    }
    return our_BarcodeChainway_setQrCode_caller;
}

-(void) command_setQrCode:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setQrCode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setQrCode:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setQrCode_caller getSharedInstance] command_setQrCode:caller_params];
}

+(void) setQrCode_in_thread:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setQrCode_caller getSharedInstance] performSelectorInBackground:@selector(command_setQrCode:) withObject:caller_params];
}

+(void) setQrCode_in_UI_thread:(rb_BarcodeChainway_setQrCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setQrCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setQrCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setQrCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::qrCode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setQrCode_caller setQrCode_in_thread:[rb_BarcodeChainway_setQrCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setQrCode_caller setQrCode:[rb_BarcodeChainway_setQrCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setQrCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setQrCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setQrCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setQrCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getGs1dataBar_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getGs1dataBar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getGs1dataBar_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getGs1dataBar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getGs1dataBar_caller_params* par = [[[rb_BarcodeChainway_getGs1dataBar_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getGs1dataBar_caller : NSObject {

}
+(rb_BarcodeChainway_getGs1dataBar_caller*) getSharedInstance;
+(void) getGs1dataBar:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params;
+(void) getGs1dataBar_in_thread:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params;
+(void) getGs1dataBar_in_UI_thread:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getGs1dataBar_caller* our_BarcodeChainway_getGs1dataBar_caller = nil;

@implementation rb_BarcodeChainway_getGs1dataBar_caller

+(rb_BarcodeChainway_getGs1dataBar_caller*) getSharedInstance {
    if (our_BarcodeChainway_getGs1dataBar_caller == nil) {
        our_BarcodeChainway_getGs1dataBar_caller = [[rb_BarcodeChainway_getGs1dataBar_caller alloc] init];
    }
    return our_BarcodeChainway_getGs1dataBar_caller;
}

-(void) command_getGs1dataBar:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getGs1dataBar:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getGs1dataBar:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBar_caller getSharedInstance] command_getGs1dataBar:caller_params];
}

+(void) getGs1dataBar_in_thread:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBar_caller getSharedInstance] performSelectorInBackground:@selector(command_getGs1dataBar:) withObject:caller_params];
}

+(void) getGs1dataBar_in_UI_thread:(rb_BarcodeChainway_getGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBar_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getGs1dataBar:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getGs1dataBar_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBar"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getGs1dataBar_caller getGs1dataBar_in_thread:[rb_BarcodeChainway_getGs1dataBar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getGs1dataBar_caller getGs1dataBar:[rb_BarcodeChainway_getGs1dataBar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getGs1dataBar(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getGs1dataBar_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getGs1dataBar(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getGs1dataBar_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setGs1dataBar_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setGs1dataBar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setGs1dataBar_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setGs1dataBar_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setGs1dataBar_caller_params* par = [[[rb_BarcodeChainway_setGs1dataBar_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setGs1dataBar_caller : NSObject {

}
+(rb_BarcodeChainway_setGs1dataBar_caller*) getSharedInstance;
+(void) setGs1dataBar:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params;
+(void) setGs1dataBar_in_thread:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params;
+(void) setGs1dataBar_in_UI_thread:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setGs1dataBar_caller* our_BarcodeChainway_setGs1dataBar_caller = nil;

@implementation rb_BarcodeChainway_setGs1dataBar_caller

+(rb_BarcodeChainway_setGs1dataBar_caller*) getSharedInstance {
    if (our_BarcodeChainway_setGs1dataBar_caller == nil) {
        our_BarcodeChainway_setGs1dataBar_caller = [[rb_BarcodeChainway_setGs1dataBar_caller alloc] init];
    }
    return our_BarcodeChainway_setGs1dataBar_caller;
}

-(void) command_setGs1dataBar:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setGs1dataBar:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setGs1dataBar:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBar_caller getSharedInstance] command_setGs1dataBar:caller_params];
}

+(void) setGs1dataBar_in_thread:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBar_caller getSharedInstance] performSelectorInBackground:@selector(command_setGs1dataBar:) withObject:caller_params];
}

+(void) setGs1dataBar_in_UI_thread:(rb_BarcodeChainway_setGs1dataBar_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBar_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setGs1dataBar:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setGs1dataBar_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBar="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setGs1dataBar_caller setGs1dataBar_in_thread:[rb_BarcodeChainway_setGs1dataBar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setGs1dataBar_caller setGs1dataBar:[rb_BarcodeChainway_setGs1dataBar_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setGs1dataBar(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setGs1dataBar_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setGs1dataBar(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setGs1dataBar_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getGs1dataBarExpanded_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getGs1dataBarExpanded_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getGs1dataBarExpanded_caller_params* par = [[[rb_BarcodeChainway_getGs1dataBarExpanded_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getGs1dataBarExpanded_caller : NSObject {

}
+(rb_BarcodeChainway_getGs1dataBarExpanded_caller*) getSharedInstance;
+(void) getGs1dataBarExpanded:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params;
+(void) getGs1dataBarExpanded_in_thread:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params;
+(void) getGs1dataBarExpanded_in_UI_thread:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getGs1dataBarExpanded_caller* our_BarcodeChainway_getGs1dataBarExpanded_caller = nil;

@implementation rb_BarcodeChainway_getGs1dataBarExpanded_caller

+(rb_BarcodeChainway_getGs1dataBarExpanded_caller*) getSharedInstance {
    if (our_BarcodeChainway_getGs1dataBarExpanded_caller == nil) {
        our_BarcodeChainway_getGs1dataBarExpanded_caller = [[rb_BarcodeChainway_getGs1dataBarExpanded_caller alloc] init];
    }
    return our_BarcodeChainway_getGs1dataBarExpanded_caller;
}

-(void) command_getGs1dataBarExpanded:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getGs1dataBarExpanded:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getGs1dataBarExpanded:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarExpanded_caller getSharedInstance] command_getGs1dataBarExpanded:caller_params];
}

+(void) getGs1dataBarExpanded_in_thread:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarExpanded_caller getSharedInstance] performSelectorInBackground:@selector(command_getGs1dataBarExpanded:) withObject:caller_params];
}

+(void) getGs1dataBarExpanded_in_UI_thread:(rb_BarcodeChainway_getGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarExpanded_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getGs1dataBarExpanded:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getGs1dataBarExpanded_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBarExpanded"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getGs1dataBarExpanded_caller getGs1dataBarExpanded_in_thread:[rb_BarcodeChainway_getGs1dataBarExpanded_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getGs1dataBarExpanded_caller getGs1dataBarExpanded:[rb_BarcodeChainway_getGs1dataBarExpanded_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getGs1dataBarExpanded(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getGs1dataBarExpanded_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getGs1dataBarExpanded(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getGs1dataBarExpanded_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setGs1dataBarExpanded_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setGs1dataBarExpanded_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setGs1dataBarExpanded_caller_params* par = [[[rb_BarcodeChainway_setGs1dataBarExpanded_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setGs1dataBarExpanded_caller : NSObject {

}
+(rb_BarcodeChainway_setGs1dataBarExpanded_caller*) getSharedInstance;
+(void) setGs1dataBarExpanded:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params;
+(void) setGs1dataBarExpanded_in_thread:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params;
+(void) setGs1dataBarExpanded_in_UI_thread:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setGs1dataBarExpanded_caller* our_BarcodeChainway_setGs1dataBarExpanded_caller = nil;

@implementation rb_BarcodeChainway_setGs1dataBarExpanded_caller

+(rb_BarcodeChainway_setGs1dataBarExpanded_caller*) getSharedInstance {
    if (our_BarcodeChainway_setGs1dataBarExpanded_caller == nil) {
        our_BarcodeChainway_setGs1dataBarExpanded_caller = [[rb_BarcodeChainway_setGs1dataBarExpanded_caller alloc] init];
    }
    return our_BarcodeChainway_setGs1dataBarExpanded_caller;
}

-(void) command_setGs1dataBarExpanded:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setGs1dataBarExpanded:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setGs1dataBarExpanded:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarExpanded_caller getSharedInstance] command_setGs1dataBarExpanded:caller_params];
}

+(void) setGs1dataBarExpanded_in_thread:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarExpanded_caller getSharedInstance] performSelectorInBackground:@selector(command_setGs1dataBarExpanded:) withObject:caller_params];
}

+(void) setGs1dataBarExpanded_in_UI_thread:(rb_BarcodeChainway_setGs1dataBarExpanded_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarExpanded_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setGs1dataBarExpanded:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setGs1dataBarExpanded_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBarExpanded="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setGs1dataBarExpanded_caller setGs1dataBarExpanded_in_thread:[rb_BarcodeChainway_setGs1dataBarExpanded_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setGs1dataBarExpanded_caller setGs1dataBarExpanded:[rb_BarcodeChainway_setGs1dataBarExpanded_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setGs1dataBarExpanded(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setGs1dataBarExpanded_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setGs1dataBarExpanded(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setGs1dataBarExpanded_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getGs1dataBarLimited_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getGs1dataBarLimited_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getGs1dataBarLimited_caller_params* par = [[[rb_BarcodeChainway_getGs1dataBarLimited_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getGs1dataBarLimited_caller : NSObject {

}
+(rb_BarcodeChainway_getGs1dataBarLimited_caller*) getSharedInstance;
+(void) getGs1dataBarLimited:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params;
+(void) getGs1dataBarLimited_in_thread:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params;
+(void) getGs1dataBarLimited_in_UI_thread:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getGs1dataBarLimited_caller* our_BarcodeChainway_getGs1dataBarLimited_caller = nil;

@implementation rb_BarcodeChainway_getGs1dataBarLimited_caller

+(rb_BarcodeChainway_getGs1dataBarLimited_caller*) getSharedInstance {
    if (our_BarcodeChainway_getGs1dataBarLimited_caller == nil) {
        our_BarcodeChainway_getGs1dataBarLimited_caller = [[rb_BarcodeChainway_getGs1dataBarLimited_caller alloc] init];
    }
    return our_BarcodeChainway_getGs1dataBarLimited_caller;
}

-(void) command_getGs1dataBarLimited:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getGs1dataBarLimited:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getGs1dataBarLimited:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarLimited_caller getSharedInstance] command_getGs1dataBarLimited:caller_params];
}

+(void) getGs1dataBarLimited_in_thread:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarLimited_caller getSharedInstance] performSelectorInBackground:@selector(command_getGs1dataBarLimited:) withObject:caller_params];
}

+(void) getGs1dataBarLimited_in_UI_thread:(rb_BarcodeChainway_getGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_getGs1dataBarLimited_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getGs1dataBarLimited:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getGs1dataBarLimited_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBarLimited"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getGs1dataBarLimited_caller getGs1dataBarLimited_in_thread:[rb_BarcodeChainway_getGs1dataBarLimited_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getGs1dataBarLimited_caller getGs1dataBarLimited:[rb_BarcodeChainway_getGs1dataBarLimited_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getGs1dataBarLimited(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getGs1dataBarLimited_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getGs1dataBarLimited(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getGs1dataBarLimited_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setGs1dataBarLimited_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setGs1dataBarLimited_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setGs1dataBarLimited_caller_params* par = [[[rb_BarcodeChainway_setGs1dataBarLimited_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setGs1dataBarLimited_caller : NSObject {

}
+(rb_BarcodeChainway_setGs1dataBarLimited_caller*) getSharedInstance;
+(void) setGs1dataBarLimited:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params;
+(void) setGs1dataBarLimited_in_thread:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params;
+(void) setGs1dataBarLimited_in_UI_thread:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setGs1dataBarLimited_caller* our_BarcodeChainway_setGs1dataBarLimited_caller = nil;

@implementation rb_BarcodeChainway_setGs1dataBarLimited_caller

+(rb_BarcodeChainway_setGs1dataBarLimited_caller*) getSharedInstance {
    if (our_BarcodeChainway_setGs1dataBarLimited_caller == nil) {
        our_BarcodeChainway_setGs1dataBarLimited_caller = [[rb_BarcodeChainway_setGs1dataBarLimited_caller alloc] init];
    }
    return our_BarcodeChainway_setGs1dataBarLimited_caller;
}

-(void) command_setGs1dataBarLimited:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setGs1dataBarLimited:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setGs1dataBarLimited:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarLimited_caller getSharedInstance] command_setGs1dataBarLimited:caller_params];
}

+(void) setGs1dataBarLimited_in_thread:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarLimited_caller getSharedInstance] performSelectorInBackground:@selector(command_setGs1dataBarLimited:) withObject:caller_params];
}

+(void) setGs1dataBarLimited_in_UI_thread:(rb_BarcodeChainway_setGs1dataBarLimited_caller_params*)caller_params {
    [[rb_BarcodeChainway_setGs1dataBarLimited_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setGs1dataBarLimited:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setGs1dataBarLimited_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::gs1dataBarLimited="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setGs1dataBarLimited_caller setGs1dataBarLimited_in_thread:[rb_BarcodeChainway_setGs1dataBarLimited_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setGs1dataBarLimited_caller setGs1dataBarLimited:[rb_BarcodeChainway_setGs1dataBarLimited_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setGs1dataBarLimited(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setGs1dataBarLimited_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setGs1dataBarLimited(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setGs1dataBarLimited_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getTlc39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getTlc39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getTlc39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getTlc39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getTlc39_caller_params* par = [[[rb_BarcodeChainway_getTlc39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getTlc39_caller : NSObject {

}
+(rb_BarcodeChainway_getTlc39_caller*) getSharedInstance;
+(void) getTlc39:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params;
+(void) getTlc39_in_thread:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params;
+(void) getTlc39_in_UI_thread:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getTlc39_caller* our_BarcodeChainway_getTlc39_caller = nil;

@implementation rb_BarcodeChainway_getTlc39_caller

+(rb_BarcodeChainway_getTlc39_caller*) getSharedInstance {
    if (our_BarcodeChainway_getTlc39_caller == nil) {
        our_BarcodeChainway_getTlc39_caller = [[rb_BarcodeChainway_getTlc39_caller alloc] init];
    }
    return our_BarcodeChainway_getTlc39_caller;
}

-(void) command_getTlc39:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getTlc39:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getTlc39:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTlc39_caller getSharedInstance] command_getTlc39:caller_params];
}

+(void) getTlc39_in_thread:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTlc39_caller getSharedInstance] performSelectorInBackground:@selector(command_getTlc39:) withObject:caller_params];
}

+(void) getTlc39_in_UI_thread:(rb_BarcodeChainway_getTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTlc39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getTlc39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getTlc39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::tlc39"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getTlc39_caller getTlc39_in_thread:[rb_BarcodeChainway_getTlc39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getTlc39_caller getTlc39:[rb_BarcodeChainway_getTlc39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getTlc39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getTlc39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getTlc39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getTlc39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setTlc39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setTlc39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setTlc39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setTlc39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setTlc39_caller_params* par = [[[rb_BarcodeChainway_setTlc39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setTlc39_caller : NSObject {

}
+(rb_BarcodeChainway_setTlc39_caller*) getSharedInstance;
+(void) setTlc39:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params;
+(void) setTlc39_in_thread:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params;
+(void) setTlc39_in_UI_thread:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setTlc39_caller* our_BarcodeChainway_setTlc39_caller = nil;

@implementation rb_BarcodeChainway_setTlc39_caller

+(rb_BarcodeChainway_setTlc39_caller*) getSharedInstance {
    if (our_BarcodeChainway_setTlc39_caller == nil) {
        our_BarcodeChainway_setTlc39_caller = [[rb_BarcodeChainway_setTlc39_caller alloc] init];
    }
    return our_BarcodeChainway_setTlc39_caller;
}

-(void) command_setTlc39:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setTlc39:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setTlc39:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTlc39_caller getSharedInstance] command_setTlc39:caller_params];
}

+(void) setTlc39_in_thread:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTlc39_caller getSharedInstance] performSelectorInBackground:@selector(command_setTlc39:) withObject:caller_params];
}

+(void) setTlc39_in_UI_thread:(rb_BarcodeChainway_setTlc39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTlc39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setTlc39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setTlc39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::tlc39="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setTlc39_caller setTlc39_in_thread:[rb_BarcodeChainway_setTlc39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setTlc39_caller setTlc39:[rb_BarcodeChainway_setTlc39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setTlc39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setTlc39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setTlc39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setTlc39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getTrioptic39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getTrioptic39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getTrioptic39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getTrioptic39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getTrioptic39_caller_params* par = [[[rb_BarcodeChainway_getTrioptic39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getTrioptic39_caller : NSObject {

}
+(rb_BarcodeChainway_getTrioptic39_caller*) getSharedInstance;
+(void) getTrioptic39:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params;
+(void) getTrioptic39_in_thread:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params;
+(void) getTrioptic39_in_UI_thread:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getTrioptic39_caller* our_BarcodeChainway_getTrioptic39_caller = nil;

@implementation rb_BarcodeChainway_getTrioptic39_caller

+(rb_BarcodeChainway_getTrioptic39_caller*) getSharedInstance {
    if (our_BarcodeChainway_getTrioptic39_caller == nil) {
        our_BarcodeChainway_getTrioptic39_caller = [[rb_BarcodeChainway_getTrioptic39_caller alloc] init];
    }
    return our_BarcodeChainway_getTrioptic39_caller;
}

-(void) command_getTrioptic39:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getTrioptic39:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getTrioptic39:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39_caller getSharedInstance] command_getTrioptic39:caller_params];
}

+(void) getTrioptic39_in_thread:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39_caller getSharedInstance] performSelectorInBackground:@selector(command_getTrioptic39:) withObject:caller_params];
}

+(void) getTrioptic39_in_UI_thread:(rb_BarcodeChainway_getTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getTrioptic39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getTrioptic39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::trioptic39"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getTrioptic39_caller getTrioptic39_in_thread:[rb_BarcodeChainway_getTrioptic39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getTrioptic39_caller getTrioptic39:[rb_BarcodeChainway_getTrioptic39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getTrioptic39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getTrioptic39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getTrioptic39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getTrioptic39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setTrioptic39_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setTrioptic39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setTrioptic39_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setTrioptic39_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setTrioptic39_caller_params* par = [[[rb_BarcodeChainway_setTrioptic39_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setTrioptic39_caller : NSObject {

}
+(rb_BarcodeChainway_setTrioptic39_caller*) getSharedInstance;
+(void) setTrioptic39:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params;
+(void) setTrioptic39_in_thread:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params;
+(void) setTrioptic39_in_UI_thread:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setTrioptic39_caller* our_BarcodeChainway_setTrioptic39_caller = nil;

@implementation rb_BarcodeChainway_setTrioptic39_caller

+(rb_BarcodeChainway_setTrioptic39_caller*) getSharedInstance {
    if (our_BarcodeChainway_setTrioptic39_caller == nil) {
        our_BarcodeChainway_setTrioptic39_caller = [[rb_BarcodeChainway_setTrioptic39_caller alloc] init];
    }
    return our_BarcodeChainway_setTrioptic39_caller;
}

-(void) command_setTrioptic39:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setTrioptic39:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setTrioptic39:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39_caller getSharedInstance] command_setTrioptic39:caller_params];
}

+(void) setTrioptic39_in_thread:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39_caller getSharedInstance] performSelectorInBackground:@selector(command_setTrioptic39:) withObject:caller_params];
}

+(void) setTrioptic39_in_UI_thread:(rb_BarcodeChainway_setTrioptic39_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setTrioptic39:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setTrioptic39_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::trioptic39="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setTrioptic39_caller setTrioptic39_in_thread:[rb_BarcodeChainway_setTrioptic39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setTrioptic39_caller setTrioptic39:[rb_BarcodeChainway_setTrioptic39_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setTrioptic39(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setTrioptic39_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setTrioptic39(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setTrioptic39_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getTrioptic39Redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getTrioptic39Redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getTrioptic39Redundancy_caller_params* par = [[[rb_BarcodeChainway_getTrioptic39Redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getTrioptic39Redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_getTrioptic39Redundancy_caller*) getSharedInstance;
+(void) getTrioptic39Redundancy:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params;
+(void) getTrioptic39Redundancy_in_thread:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params;
+(void) getTrioptic39Redundancy_in_UI_thread:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getTrioptic39Redundancy_caller* our_BarcodeChainway_getTrioptic39Redundancy_caller = nil;

@implementation rb_BarcodeChainway_getTrioptic39Redundancy_caller

+(rb_BarcodeChainway_getTrioptic39Redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_getTrioptic39Redundancy_caller == nil) {
        our_BarcodeChainway_getTrioptic39Redundancy_caller = [[rb_BarcodeChainway_getTrioptic39Redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_getTrioptic39Redundancy_caller;
}

-(void) command_getTrioptic39Redundancy:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getTrioptic39Redundancy:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getTrioptic39Redundancy:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39Redundancy_caller getSharedInstance] command_getTrioptic39Redundancy:caller_params];
}

+(void) getTrioptic39Redundancy_in_thread:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39Redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_getTrioptic39Redundancy:) withObject:caller_params];
}

+(void) getTrioptic39Redundancy_in_UI_thread:(rb_BarcodeChainway_getTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_getTrioptic39Redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getTrioptic39Redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getTrioptic39Redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::trioptic39Redundancy"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getTrioptic39Redundancy_caller getTrioptic39Redundancy_in_thread:[rb_BarcodeChainway_getTrioptic39Redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getTrioptic39Redundancy_caller getTrioptic39Redundancy:[rb_BarcodeChainway_getTrioptic39Redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getTrioptic39Redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getTrioptic39Redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getTrioptic39Redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getTrioptic39Redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setTrioptic39Redundancy_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setTrioptic39Redundancy_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setTrioptic39Redundancy_caller_params* par = [[[rb_BarcodeChainway_setTrioptic39Redundancy_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setTrioptic39Redundancy_caller : NSObject {

}
+(rb_BarcodeChainway_setTrioptic39Redundancy_caller*) getSharedInstance;
+(void) setTrioptic39Redundancy:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params;
+(void) setTrioptic39Redundancy_in_thread:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params;
+(void) setTrioptic39Redundancy_in_UI_thread:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setTrioptic39Redundancy_caller* our_BarcodeChainway_setTrioptic39Redundancy_caller = nil;

@implementation rb_BarcodeChainway_setTrioptic39Redundancy_caller

+(rb_BarcodeChainway_setTrioptic39Redundancy_caller*) getSharedInstance {
    if (our_BarcodeChainway_setTrioptic39Redundancy_caller == nil) {
        our_BarcodeChainway_setTrioptic39Redundancy_caller = [[rb_BarcodeChainway_setTrioptic39Redundancy_caller alloc] init];
    }
    return our_BarcodeChainway_setTrioptic39Redundancy_caller;
}

-(void) command_setTrioptic39Redundancy:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setTrioptic39Redundancy:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setTrioptic39Redundancy:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39Redundancy_caller getSharedInstance] command_setTrioptic39Redundancy:caller_params];
}

+(void) setTrioptic39Redundancy_in_thread:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39Redundancy_caller getSharedInstance] performSelectorInBackground:@selector(command_setTrioptic39Redundancy:) withObject:caller_params];
}

+(void) setTrioptic39Redundancy_in_UI_thread:(rb_BarcodeChainway_setTrioptic39Redundancy_caller_params*)caller_params {
    [[rb_BarcodeChainway_setTrioptic39Redundancy_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setTrioptic39Redundancy:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setTrioptic39Redundancy_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::trioptic39Redundancy="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setTrioptic39Redundancy_caller setTrioptic39Redundancy_in_thread:[rb_BarcodeChainway_setTrioptic39Redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setTrioptic39Redundancy_caller setTrioptic39Redundancy:[rb_BarcodeChainway_setTrioptic39Redundancy_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setTrioptic39Redundancy(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setTrioptic39Redundancy_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setTrioptic39Redundancy(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setTrioptic39Redundancy_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanBookland_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanBookland_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanBookland_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanBookland_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanBookland_caller_params* par = [[[rb_BarcodeChainway_getUpcEanBookland_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanBookland_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanBookland_caller*) getSharedInstance;
+(void) getUpcEanBookland:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params;
+(void) getUpcEanBookland_in_thread:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params;
+(void) getUpcEanBookland_in_UI_thread:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanBookland_caller* our_BarcodeChainway_getUpcEanBookland_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanBookland_caller

+(rb_BarcodeChainway_getUpcEanBookland_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanBookland_caller == nil) {
        our_BarcodeChainway_getUpcEanBookland_caller = [[rb_BarcodeChainway_getUpcEanBookland_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanBookland_caller;
}

-(void) command_getUpcEanBookland:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanBookland:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanBookland:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBookland_caller getSharedInstance] command_getUpcEanBookland:caller_params];
}

+(void) getUpcEanBookland_in_thread:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBookland_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanBookland:) withObject:caller_params];
}

+(void) getUpcEanBookland_in_UI_thread:(rb_BarcodeChainway_getUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBookland_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanBookland:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanBookland_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanBookland"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanBookland_caller getUpcEanBookland_in_thread:[rb_BarcodeChainway_getUpcEanBookland_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanBookland_caller getUpcEanBookland:[rb_BarcodeChainway_getUpcEanBookland_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanBookland(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanBookland_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanBookland(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanBookland_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanBookland_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanBookland_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanBookland_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanBookland_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanBookland_caller_params* par = [[[rb_BarcodeChainway_setUpcEanBookland_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanBookland_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanBookland_caller*) getSharedInstance;
+(void) setUpcEanBookland:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params;
+(void) setUpcEanBookland_in_thread:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params;
+(void) setUpcEanBookland_in_UI_thread:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanBookland_caller* our_BarcodeChainway_setUpcEanBookland_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanBookland_caller

+(rb_BarcodeChainway_setUpcEanBookland_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanBookland_caller == nil) {
        our_BarcodeChainway_setUpcEanBookland_caller = [[rb_BarcodeChainway_setUpcEanBookland_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanBookland_caller;
}

-(void) command_setUpcEanBookland:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanBookland:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanBookland:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBookland_caller getSharedInstance] command_setUpcEanBookland:caller_params];
}

+(void) setUpcEanBookland_in_thread:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBookland_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanBookland:) withObject:caller_params];
}

+(void) setUpcEanBookland_in_UI_thread:(rb_BarcodeChainway_setUpcEanBookland_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBookland_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanBookland:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanBookland_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanBookland="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanBookland_caller setUpcEanBookland_in_thread:[rb_BarcodeChainway_setUpcEanBookland_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanBookland_caller setUpcEanBookland:[rb_BarcodeChainway_setUpcEanBookland_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanBookland(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanBookland_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanBookland(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanBookland_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params* par = [[[rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanBooklandFormat_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanBooklandFormat_caller*) getSharedInstance;
+(void) getUpcEanBooklandFormat:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params;
+(void) getUpcEanBooklandFormat_in_thread:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params;
+(void) getUpcEanBooklandFormat_in_UI_thread:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanBooklandFormat_caller* our_BarcodeChainway_getUpcEanBooklandFormat_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanBooklandFormat_caller

+(rb_BarcodeChainway_getUpcEanBooklandFormat_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanBooklandFormat_caller == nil) {
        our_BarcodeChainway_getUpcEanBooklandFormat_caller = [[rb_BarcodeChainway_getUpcEanBooklandFormat_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanBooklandFormat_caller;
}

-(void) command_getUpcEanBooklandFormat:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanBooklandFormat:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanBooklandFormat:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBooklandFormat_caller getSharedInstance] command_getUpcEanBooklandFormat:caller_params];
}

+(void) getUpcEanBooklandFormat_in_thread:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBooklandFormat_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanBooklandFormat:) withObject:caller_params];
}

+(void) getUpcEanBooklandFormat_in_UI_thread:(rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanBooklandFormat_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanBooklandFormat:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanBooklandFormat_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanBooklandFormat"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanBooklandFormat_caller getUpcEanBooklandFormat_in_thread:[rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanBooklandFormat_caller getUpcEanBooklandFormat:[rb_BarcodeChainway_getUpcEanBooklandFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanBooklandFormat(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanBooklandFormat_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanBooklandFormat(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanBooklandFormat_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params* par = [[[rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanBooklandFormat_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanBooklandFormat_caller*) getSharedInstance;
+(void) setUpcEanBooklandFormat:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params;
+(void) setUpcEanBooklandFormat_in_thread:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params;
+(void) setUpcEanBooklandFormat_in_UI_thread:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanBooklandFormat_caller* our_BarcodeChainway_setUpcEanBooklandFormat_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanBooklandFormat_caller

+(rb_BarcodeChainway_setUpcEanBooklandFormat_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanBooklandFormat_caller == nil) {
        our_BarcodeChainway_setUpcEanBooklandFormat_caller = [[rb_BarcodeChainway_setUpcEanBooklandFormat_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanBooklandFormat_caller;
}

-(void) command_setUpcEanBooklandFormat:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanBooklandFormat:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanBooklandFormat:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBooklandFormat_caller getSharedInstance] command_setUpcEanBooklandFormat:caller_params];
}

+(void) setUpcEanBooklandFormat_in_thread:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBooklandFormat_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanBooklandFormat:) withObject:caller_params];
}

+(void) setUpcEanBooklandFormat_in_UI_thread:(rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanBooklandFormat_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanBooklandFormat:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanBooklandFormat_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanBooklandFormat="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanBooklandFormat_caller setUpcEanBooklandFormat_in_thread:[rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanBooklandFormat_caller setUpcEanBooklandFormat:[rb_BarcodeChainway_setUpcEanBooklandFormat_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanBooklandFormat(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanBooklandFormat_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanBooklandFormat(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanBooklandFormat_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params* par = [[[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller*) getSharedInstance;
+(void) getUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;
+(void) getUpcEanConvertGs1dataBarToUpcEan_in_thread:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;
+(void) getUpcEanConvertGs1dataBarToUpcEan_in_UI_thread:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller* our_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller

+(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller == nil) {
        our_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller = [[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller;
}

-(void) command_getUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanConvertGs1dataBarToUpcEan:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] command_getUpcEanConvertGs1dataBarToUpcEan:caller_params];
}

+(void) getUpcEanConvertGs1dataBarToUpcEan_in_thread:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanConvertGs1dataBarToUpcEan:) withObject:caller_params];
}

+(void) getUpcEanConvertGs1dataBarToUpcEan_in_UI_thread:(rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanConvertGs1dataBarToUpcEan:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanConvertGs1dataBarToUpcEan"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller getUpcEanConvertGs1dataBarToUpcEan_in_thread:[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller getUpcEanConvertGs1dataBarToUpcEan:[rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanConvertGs1dataBarToUpcEan(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanConvertGs1dataBarToUpcEan_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params* par = [[[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller*) getSharedInstance;
+(void) setUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;
+(void) setUpcEanConvertGs1dataBarToUpcEan_in_thread:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;
+(void) setUpcEanConvertGs1dataBarToUpcEan_in_UI_thread:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller* our_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller

+(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller == nil) {
        our_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller = [[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller;
}

-(void) command_setUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanConvertGs1dataBarToUpcEan:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanConvertGs1dataBarToUpcEan:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] command_setUpcEanConvertGs1dataBarToUpcEan:caller_params];
}

+(void) setUpcEanConvertGs1dataBarToUpcEan_in_thread:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanConvertGs1dataBarToUpcEan:) withObject:caller_params];
}

+(void) setUpcEanConvertGs1dataBarToUpcEan_in_UI_thread:(rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanConvertGs1dataBarToUpcEan:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanConvertGs1dataBarToUpcEan="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller setUpcEanConvertGs1dataBarToUpcEan_in_thread:[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller setUpcEanConvertGs1dataBarToUpcEan:[rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanConvertGs1dataBarToUpcEan(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanConvertGs1dataBarToUpcEan_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanCoupon_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanCoupon_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanCoupon_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanCoupon_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanCoupon_caller_params* par = [[[rb_BarcodeChainway_getUpcEanCoupon_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanCoupon_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanCoupon_caller*) getSharedInstance;
+(void) getUpcEanCoupon:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params;
+(void) getUpcEanCoupon_in_thread:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params;
+(void) getUpcEanCoupon_in_UI_thread:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanCoupon_caller* our_BarcodeChainway_getUpcEanCoupon_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanCoupon_caller

+(rb_BarcodeChainway_getUpcEanCoupon_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanCoupon_caller == nil) {
        our_BarcodeChainway_getUpcEanCoupon_caller = [[rb_BarcodeChainway_getUpcEanCoupon_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanCoupon_caller;
}

-(void) command_getUpcEanCoupon:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanCoupon:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanCoupon:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanCoupon_caller getSharedInstance] command_getUpcEanCoupon:caller_params];
}

+(void) getUpcEanCoupon_in_thread:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanCoupon_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanCoupon:) withObject:caller_params];
}

+(void) getUpcEanCoupon_in_UI_thread:(rb_BarcodeChainway_getUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanCoupon_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanCoupon:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanCoupon_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanCoupon"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanCoupon_caller getUpcEanCoupon_in_thread:[rb_BarcodeChainway_getUpcEanCoupon_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanCoupon_caller getUpcEanCoupon:[rb_BarcodeChainway_getUpcEanCoupon_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanCoupon(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanCoupon_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanCoupon(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanCoupon_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanCoupon_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanCoupon_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanCoupon_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanCoupon_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanCoupon_caller_params* par = [[[rb_BarcodeChainway_setUpcEanCoupon_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanCoupon_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanCoupon_caller*) getSharedInstance;
+(void) setUpcEanCoupon:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params;
+(void) setUpcEanCoupon_in_thread:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params;
+(void) setUpcEanCoupon_in_UI_thread:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanCoupon_caller* our_BarcodeChainway_setUpcEanCoupon_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanCoupon_caller

+(rb_BarcodeChainway_setUpcEanCoupon_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanCoupon_caller == nil) {
        our_BarcodeChainway_setUpcEanCoupon_caller = [[rb_BarcodeChainway_setUpcEanCoupon_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanCoupon_caller;
}

-(void) command_setUpcEanCoupon:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanCoupon:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanCoupon:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanCoupon_caller getSharedInstance] command_setUpcEanCoupon:caller_params];
}

+(void) setUpcEanCoupon_in_thread:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanCoupon_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanCoupon:) withObject:caller_params];
}

+(void) setUpcEanCoupon_in_UI_thread:(rb_BarcodeChainway_setUpcEanCoupon_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanCoupon_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanCoupon:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanCoupon_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanCoupon="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanCoupon_caller setUpcEanCoupon_in_thread:[rb_BarcodeChainway_setUpcEanCoupon_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanCoupon_caller setUpcEanCoupon:[rb_BarcodeChainway_setUpcEanCoupon_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanCoupon(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanCoupon_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanCoupon(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanCoupon_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanLinearDecode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanLinearDecode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanLinearDecode_caller_params* par = [[[rb_BarcodeChainway_getUpcEanLinearDecode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanLinearDecode_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanLinearDecode_caller*) getSharedInstance;
+(void) getUpcEanLinearDecode:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params;
+(void) getUpcEanLinearDecode_in_thread:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params;
+(void) getUpcEanLinearDecode_in_UI_thread:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanLinearDecode_caller* our_BarcodeChainway_getUpcEanLinearDecode_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanLinearDecode_caller

+(rb_BarcodeChainway_getUpcEanLinearDecode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanLinearDecode_caller == nil) {
        our_BarcodeChainway_getUpcEanLinearDecode_caller = [[rb_BarcodeChainway_getUpcEanLinearDecode_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanLinearDecode_caller;
}

-(void) command_getUpcEanLinearDecode:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanLinearDecode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanLinearDecode:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanLinearDecode_caller getSharedInstance] command_getUpcEanLinearDecode:caller_params];
}

+(void) getUpcEanLinearDecode_in_thread:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanLinearDecode_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanLinearDecode:) withObject:caller_params];
}

+(void) getUpcEanLinearDecode_in_UI_thread:(rb_BarcodeChainway_getUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanLinearDecode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanLinearDecode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanLinearDecode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanLinearDecode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanLinearDecode_caller getUpcEanLinearDecode_in_thread:[rb_BarcodeChainway_getUpcEanLinearDecode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanLinearDecode_caller getUpcEanLinearDecode:[rb_BarcodeChainway_getUpcEanLinearDecode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanLinearDecode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanLinearDecode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanLinearDecode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanLinearDecode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanLinearDecode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanLinearDecode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanLinearDecode_caller_params* par = [[[rb_BarcodeChainway_setUpcEanLinearDecode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanLinearDecode_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanLinearDecode_caller*) getSharedInstance;
+(void) setUpcEanLinearDecode:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params;
+(void) setUpcEanLinearDecode_in_thread:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params;
+(void) setUpcEanLinearDecode_in_UI_thread:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanLinearDecode_caller* our_BarcodeChainway_setUpcEanLinearDecode_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanLinearDecode_caller

+(rb_BarcodeChainway_setUpcEanLinearDecode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanLinearDecode_caller == nil) {
        our_BarcodeChainway_setUpcEanLinearDecode_caller = [[rb_BarcodeChainway_setUpcEanLinearDecode_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanLinearDecode_caller;
}

-(void) command_setUpcEanLinearDecode:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanLinearDecode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanLinearDecode:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanLinearDecode_caller getSharedInstance] command_setUpcEanLinearDecode:caller_params];
}

+(void) setUpcEanLinearDecode_in_thread:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanLinearDecode_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanLinearDecode:) withObject:caller_params];
}

+(void) setUpcEanLinearDecode_in_UI_thread:(rb_BarcodeChainway_setUpcEanLinearDecode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanLinearDecode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanLinearDecode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanLinearDecode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanLinearDecode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanLinearDecode_caller setUpcEanLinearDecode_in_thread:[rb_BarcodeChainway_setUpcEanLinearDecode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanLinearDecode_caller setUpcEanLinearDecode:[rb_BarcodeChainway_setUpcEanLinearDecode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanLinearDecode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanLinearDecode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanLinearDecode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanLinearDecode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller*) getSharedInstance;
+(void) getUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params;
+(void) getUpcEanRandomWeightCheckDigit_in_thread:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params;
+(void) getUpcEanRandomWeightCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller* our_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller

+(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller == nil) {
        our_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller = [[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller;
}

-(void) command_getUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanRandomWeightCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller getSharedInstance] command_getUpcEanRandomWeightCheckDigit:caller_params];
}

+(void) getUpcEanRandomWeightCheckDigit_in_thread:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanRandomWeightCheckDigit:) withObject:caller_params];
}

+(void) getUpcEanRandomWeightCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanRandomWeightCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanRandomWeightCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller getUpcEanRandomWeightCheckDigit_in_thread:[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller getUpcEanRandomWeightCheckDigit:[rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanRandomWeightCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanRandomWeightCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller*) getSharedInstance;
+(void) setUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params;
+(void) setUpcEanRandomWeightCheckDigit_in_thread:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params;
+(void) setUpcEanRandomWeightCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller* our_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller

+(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller == nil) {
        our_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller = [[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller;
}

-(void) command_setUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanRandomWeightCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanRandomWeightCheckDigit:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller getSharedInstance] command_setUpcEanRandomWeightCheckDigit:caller_params];
}

+(void) setUpcEanRandomWeightCheckDigit_in_thread:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanRandomWeightCheckDigit:) withObject:caller_params];
}

+(void) setUpcEanRandomWeightCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanRandomWeightCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanRandomWeightCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller setUpcEanRandomWeightCheckDigit_in_thread:[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller setUpcEanRandomWeightCheckDigit:[rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanRandomWeightCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanRandomWeightCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanRetryCount_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanRetryCount_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanRetryCount_caller_params* par = [[[rb_BarcodeChainway_getUpcEanRetryCount_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanRetryCount_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanRetryCount_caller*) getSharedInstance;
+(void) getUpcEanRetryCount:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params;
+(void) getUpcEanRetryCount_in_thread:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params;
+(void) getUpcEanRetryCount_in_UI_thread:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanRetryCount_caller* our_BarcodeChainway_getUpcEanRetryCount_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanRetryCount_caller

+(rb_BarcodeChainway_getUpcEanRetryCount_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanRetryCount_caller == nil) {
        our_BarcodeChainway_getUpcEanRetryCount_caller = [[rb_BarcodeChainway_getUpcEanRetryCount_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanRetryCount_caller;
}

-(void) command_getUpcEanRetryCount:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanRetryCount:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanRetryCount:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRetryCount_caller getSharedInstance] command_getUpcEanRetryCount:caller_params];
}

+(void) getUpcEanRetryCount_in_thread:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRetryCount_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanRetryCount:) withObject:caller_params];
}

+(void) getUpcEanRetryCount_in_UI_thread:(rb_BarcodeChainway_getUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanRetryCount_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanRetryCount:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanRetryCount_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanRetryCount"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanRetryCount_caller getUpcEanRetryCount_in_thread:[rb_BarcodeChainway_getUpcEanRetryCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanRetryCount_caller getUpcEanRetryCount:[rb_BarcodeChainway_getUpcEanRetryCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanRetryCount(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanRetryCount_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanRetryCount(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanRetryCount_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanRetryCount_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanRetryCount_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanRetryCount_caller_params* par = [[[rb_BarcodeChainway_setUpcEanRetryCount_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanRetryCount_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanRetryCount_caller*) getSharedInstance;
+(void) setUpcEanRetryCount:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params;
+(void) setUpcEanRetryCount_in_thread:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params;
+(void) setUpcEanRetryCount_in_UI_thread:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanRetryCount_caller* our_BarcodeChainway_setUpcEanRetryCount_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanRetryCount_caller

+(rb_BarcodeChainway_setUpcEanRetryCount_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanRetryCount_caller == nil) {
        our_BarcodeChainway_setUpcEanRetryCount_caller = [[rb_BarcodeChainway_setUpcEanRetryCount_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanRetryCount_caller;
}

-(void) command_setUpcEanRetryCount:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanRetryCount:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanRetryCount:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRetryCount_caller getSharedInstance] command_setUpcEanRetryCount:caller_params];
}

+(void) setUpcEanRetryCount_in_thread:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRetryCount_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanRetryCount:) withObject:caller_params];
}

+(void) setUpcEanRetryCount_in_UI_thread:(rb_BarcodeChainway_setUpcEanRetryCount_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanRetryCount_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanRetryCount:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanRetryCount_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanRetryCount="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanRetryCount_caller setUpcEanRetryCount_in_thread:[rb_BarcodeChainway_setUpcEanRetryCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanRetryCount_caller setUpcEanRetryCount:[rb_BarcodeChainway_setUpcEanRetryCount_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanRetryCount(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanRetryCount_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanRetryCount(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanRetryCount_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params* par = [[[rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanSecurityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanSecurityLevel_caller*) getSharedInstance;
+(void) getUpcEanSecurityLevel:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params;
+(void) getUpcEanSecurityLevel_in_thread:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params;
+(void) getUpcEanSecurityLevel_in_UI_thread:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanSecurityLevel_caller* our_BarcodeChainway_getUpcEanSecurityLevel_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanSecurityLevel_caller

+(rb_BarcodeChainway_getUpcEanSecurityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanSecurityLevel_caller == nil) {
        our_BarcodeChainway_getUpcEanSecurityLevel_caller = [[rb_BarcodeChainway_getUpcEanSecurityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanSecurityLevel_caller;
}

-(void) command_getUpcEanSecurityLevel:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanSecurityLevel:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanSecurityLevel:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSecurityLevel_caller getSharedInstance] command_getUpcEanSecurityLevel:caller_params];
}

+(void) getUpcEanSecurityLevel_in_thread:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSecurityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanSecurityLevel:) withObject:caller_params];
}

+(void) getUpcEanSecurityLevel_in_UI_thread:(rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSecurityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanSecurityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanSecurityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSecurityLevel"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanSecurityLevel_caller getUpcEanSecurityLevel_in_thread:[rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanSecurityLevel_caller getUpcEanSecurityLevel:[rb_BarcodeChainway_getUpcEanSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanSecurityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanSecurityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanSecurityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanSecurityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params* par = [[[rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanSecurityLevel_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanSecurityLevel_caller*) getSharedInstance;
+(void) setUpcEanSecurityLevel:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params;
+(void) setUpcEanSecurityLevel_in_thread:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params;
+(void) setUpcEanSecurityLevel_in_UI_thread:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanSecurityLevel_caller* our_BarcodeChainway_setUpcEanSecurityLevel_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanSecurityLevel_caller

+(rb_BarcodeChainway_setUpcEanSecurityLevel_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanSecurityLevel_caller == nil) {
        our_BarcodeChainway_setUpcEanSecurityLevel_caller = [[rb_BarcodeChainway_setUpcEanSecurityLevel_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanSecurityLevel_caller;
}

-(void) command_setUpcEanSecurityLevel:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanSecurityLevel:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanSecurityLevel:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSecurityLevel_caller getSharedInstance] command_setUpcEanSecurityLevel:caller_params];
}

+(void) setUpcEanSecurityLevel_in_thread:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSecurityLevel_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanSecurityLevel:) withObject:caller_params];
}

+(void) setUpcEanSecurityLevel_in_UI_thread:(rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSecurityLevel_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanSecurityLevel:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanSecurityLevel_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSecurityLevel="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanSecurityLevel_caller setUpcEanSecurityLevel_in_thread:[rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanSecurityLevel_caller setUpcEanSecurityLevel:[rb_BarcodeChainway_setUpcEanSecurityLevel_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanSecurityLevel(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanSecurityLevel_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanSecurityLevel(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanSecurityLevel_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanSupplemental2_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanSupplemental2_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanSupplemental2_caller_params* par = [[[rb_BarcodeChainway_getUpcEanSupplemental2_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanSupplemental2_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanSupplemental2_caller*) getSharedInstance;
+(void) getUpcEanSupplemental2:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params;
+(void) getUpcEanSupplemental2_in_thread:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params;
+(void) getUpcEanSupplemental2_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanSupplemental2_caller* our_BarcodeChainway_getUpcEanSupplemental2_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanSupplemental2_caller

+(rb_BarcodeChainway_getUpcEanSupplemental2_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanSupplemental2_caller == nil) {
        our_BarcodeChainway_getUpcEanSupplemental2_caller = [[rb_BarcodeChainway_getUpcEanSupplemental2_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanSupplemental2_caller;
}

-(void) command_getUpcEanSupplemental2:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanSupplemental2:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanSupplemental2:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental2_caller getSharedInstance] command_getUpcEanSupplemental2:caller_params];
}

+(void) getUpcEanSupplemental2_in_thread:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental2_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanSupplemental2:) withObject:caller_params];
}

+(void) getUpcEanSupplemental2_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental2_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanSupplemental2:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanSupplemental2_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplemental2"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanSupplemental2_caller getUpcEanSupplemental2_in_thread:[rb_BarcodeChainway_getUpcEanSupplemental2_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanSupplemental2_caller getUpcEanSupplemental2:[rb_BarcodeChainway_getUpcEanSupplemental2_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanSupplemental2(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanSupplemental2_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanSupplemental2(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanSupplemental2_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanSupplemental2_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanSupplemental2_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanSupplemental2_caller_params* par = [[[rb_BarcodeChainway_setUpcEanSupplemental2_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanSupplemental2_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanSupplemental2_caller*) getSharedInstance;
+(void) setUpcEanSupplemental2:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params;
+(void) setUpcEanSupplemental2_in_thread:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params;
+(void) setUpcEanSupplemental2_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanSupplemental2_caller* our_BarcodeChainway_setUpcEanSupplemental2_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanSupplemental2_caller

+(rb_BarcodeChainway_setUpcEanSupplemental2_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanSupplemental2_caller == nil) {
        our_BarcodeChainway_setUpcEanSupplemental2_caller = [[rb_BarcodeChainway_setUpcEanSupplemental2_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanSupplemental2_caller;
}

-(void) command_setUpcEanSupplemental2:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanSupplemental2:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanSupplemental2:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental2_caller getSharedInstance] command_setUpcEanSupplemental2:caller_params];
}

+(void) setUpcEanSupplemental2_in_thread:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental2_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanSupplemental2:) withObject:caller_params];
}

+(void) setUpcEanSupplemental2_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplemental2_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental2_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanSupplemental2:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanSupplemental2_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplemental2="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanSupplemental2_caller setUpcEanSupplemental2_in_thread:[rb_BarcodeChainway_setUpcEanSupplemental2_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanSupplemental2_caller setUpcEanSupplemental2:[rb_BarcodeChainway_setUpcEanSupplemental2_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanSupplemental2(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanSupplemental2_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanSupplemental2(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanSupplemental2_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanSupplemental5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanSupplemental5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanSupplemental5_caller_params* par = [[[rb_BarcodeChainway_getUpcEanSupplemental5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanSupplemental5_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanSupplemental5_caller*) getSharedInstance;
+(void) getUpcEanSupplemental5:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params;
+(void) getUpcEanSupplemental5_in_thread:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params;
+(void) getUpcEanSupplemental5_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanSupplemental5_caller* our_BarcodeChainway_getUpcEanSupplemental5_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanSupplemental5_caller

+(rb_BarcodeChainway_getUpcEanSupplemental5_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanSupplemental5_caller == nil) {
        our_BarcodeChainway_getUpcEanSupplemental5_caller = [[rb_BarcodeChainway_getUpcEanSupplemental5_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanSupplemental5_caller;
}

-(void) command_getUpcEanSupplemental5:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanSupplemental5:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanSupplemental5:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental5_caller getSharedInstance] command_getUpcEanSupplemental5:caller_params];
}

+(void) getUpcEanSupplemental5_in_thread:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental5_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanSupplemental5:) withObject:caller_params];
}

+(void) getUpcEanSupplemental5_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplemental5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanSupplemental5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanSupplemental5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplemental5"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanSupplemental5_caller getUpcEanSupplemental5_in_thread:[rb_BarcodeChainway_getUpcEanSupplemental5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanSupplemental5_caller getUpcEanSupplemental5:[rb_BarcodeChainway_getUpcEanSupplemental5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanSupplemental5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanSupplemental5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanSupplemental5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanSupplemental5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanSupplemental5_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanSupplemental5_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanSupplemental5_caller_params* par = [[[rb_BarcodeChainway_setUpcEanSupplemental5_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanSupplemental5_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanSupplemental5_caller*) getSharedInstance;
+(void) setUpcEanSupplemental5:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params;
+(void) setUpcEanSupplemental5_in_thread:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params;
+(void) setUpcEanSupplemental5_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanSupplemental5_caller* our_BarcodeChainway_setUpcEanSupplemental5_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanSupplemental5_caller

+(rb_BarcodeChainway_setUpcEanSupplemental5_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanSupplemental5_caller == nil) {
        our_BarcodeChainway_setUpcEanSupplemental5_caller = [[rb_BarcodeChainway_setUpcEanSupplemental5_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanSupplemental5_caller;
}

-(void) command_setUpcEanSupplemental5:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanSupplemental5:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanSupplemental5:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental5_caller getSharedInstance] command_setUpcEanSupplemental5:caller_params];
}

+(void) setUpcEanSupplemental5_in_thread:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental5_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanSupplemental5:) withObject:caller_params];
}

+(void) setUpcEanSupplemental5_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplemental5_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplemental5_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanSupplemental5:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanSupplemental5_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplemental5="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanSupplemental5_caller setUpcEanSupplemental5_in_thread:[rb_BarcodeChainway_setUpcEanSupplemental5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanSupplemental5_caller setUpcEanSupplemental5:[rb_BarcodeChainway_setUpcEanSupplemental5_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanSupplemental5(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanSupplemental5_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanSupplemental5(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanSupplemental5_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params* par = [[[rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcEanSupplementalMode_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcEanSupplementalMode_caller*) getSharedInstance;
+(void) getUpcEanSupplementalMode:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params;
+(void) getUpcEanSupplementalMode_in_thread:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params;
+(void) getUpcEanSupplementalMode_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcEanSupplementalMode_caller* our_BarcodeChainway_getUpcEanSupplementalMode_caller = nil;

@implementation rb_BarcodeChainway_getUpcEanSupplementalMode_caller

+(rb_BarcodeChainway_getUpcEanSupplementalMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcEanSupplementalMode_caller == nil) {
        our_BarcodeChainway_getUpcEanSupplementalMode_caller = [[rb_BarcodeChainway_getUpcEanSupplementalMode_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcEanSupplementalMode_caller;
}

-(void) command_getUpcEanSupplementalMode:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcEanSupplementalMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcEanSupplementalMode:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplementalMode_caller getSharedInstance] command_getUpcEanSupplementalMode:caller_params];
}

+(void) getUpcEanSupplementalMode_in_thread:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplementalMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcEanSupplementalMode:) withObject:caller_params];
}

+(void) getUpcEanSupplementalMode_in_UI_thread:(rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcEanSupplementalMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcEanSupplementalMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcEanSupplementalMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplementalMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcEanSupplementalMode_caller getUpcEanSupplementalMode_in_thread:[rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcEanSupplementalMode_caller getUpcEanSupplementalMode:[rb_BarcodeChainway_getUpcEanSupplementalMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcEanSupplementalMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcEanSupplementalMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcEanSupplementalMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcEanSupplementalMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params* par = [[[rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcEanSupplementalMode_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcEanSupplementalMode_caller*) getSharedInstance;
+(void) setUpcEanSupplementalMode:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params;
+(void) setUpcEanSupplementalMode_in_thread:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params;
+(void) setUpcEanSupplementalMode_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcEanSupplementalMode_caller* our_BarcodeChainway_setUpcEanSupplementalMode_caller = nil;

@implementation rb_BarcodeChainway_setUpcEanSupplementalMode_caller

+(rb_BarcodeChainway_setUpcEanSupplementalMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcEanSupplementalMode_caller == nil) {
        our_BarcodeChainway_setUpcEanSupplementalMode_caller = [[rb_BarcodeChainway_setUpcEanSupplementalMode_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcEanSupplementalMode_caller;
}

-(void) command_setUpcEanSupplementalMode:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcEanSupplementalMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcEanSupplementalMode:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplementalMode_caller getSharedInstance] command_setUpcEanSupplementalMode:caller_params];
}

+(void) setUpcEanSupplementalMode_in_thread:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplementalMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcEanSupplementalMode:) withObject:caller_params];
}

+(void) setUpcEanSupplementalMode_in_UI_thread:(rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcEanSupplementalMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcEanSupplementalMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcEanSupplementalMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcEanSupplementalMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcEanSupplementalMode_caller setUpcEanSupplementalMode_in_thread:[rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcEanSupplementalMode_caller setUpcEanSupplementalMode:[rb_BarcodeChainway_setUpcEanSupplementalMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcEanSupplementalMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcEanSupplementalMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcEanSupplementalMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcEanSupplementalMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpca_caller_params* par = [[[rb_BarcodeChainway_getUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpca_caller : NSObject {

}
+(rb_BarcodeChainway_getUpca_caller*) getSharedInstance;
+(void) getUpca:(rb_BarcodeChainway_getUpca_caller_params*)caller_params;
+(void) getUpca_in_thread:(rb_BarcodeChainway_getUpca_caller_params*)caller_params;
+(void) getUpca_in_UI_thread:(rb_BarcodeChainway_getUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpca_caller* our_BarcodeChainway_getUpca_caller = nil;

@implementation rb_BarcodeChainway_getUpca_caller

+(rb_BarcodeChainway_getUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpca_caller == nil) {
        our_BarcodeChainway_getUpca_caller = [[rb_BarcodeChainway_getUpca_caller alloc] init];
    }
    return our_BarcodeChainway_getUpca_caller;
}

-(void) command_getUpca:(rb_BarcodeChainway_getUpca_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpca:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpca:(rb_BarcodeChainway_getUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpca_caller getSharedInstance] command_getUpca:caller_params];
}

+(void) getUpca_in_thread:(rb_BarcodeChainway_getUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpca:) withObject:caller_params];
}

+(void) getUpca_in_UI_thread:(rb_BarcodeChainway_getUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upca"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpca_caller getUpca_in_thread:[rb_BarcodeChainway_getUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpca_caller getUpca:[rb_BarcodeChainway_getUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpca_caller_params* par = [[[rb_BarcodeChainway_setUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpca_caller : NSObject {

}
+(rb_BarcodeChainway_setUpca_caller*) getSharedInstance;
+(void) setUpca:(rb_BarcodeChainway_setUpca_caller_params*)caller_params;
+(void) setUpca_in_thread:(rb_BarcodeChainway_setUpca_caller_params*)caller_params;
+(void) setUpca_in_UI_thread:(rb_BarcodeChainway_setUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpca_caller* our_BarcodeChainway_setUpca_caller = nil;

@implementation rb_BarcodeChainway_setUpca_caller

+(rb_BarcodeChainway_setUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpca_caller == nil) {
        our_BarcodeChainway_setUpca_caller = [[rb_BarcodeChainway_setUpca_caller alloc] init];
    }
    return our_BarcodeChainway_setUpca_caller;
}

-(void) command_setUpca:(rb_BarcodeChainway_setUpca_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpca:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpca:(rb_BarcodeChainway_setUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpca_caller getSharedInstance] command_setUpca:caller_params];
}

+(void) setUpca_in_thread:(rb_BarcodeChainway_setUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpca:) withObject:caller_params];
}

+(void) setUpca_in_UI_thread:(rb_BarcodeChainway_setUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upca="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpca_caller setUpca_in_thread:[rb_BarcodeChainway_setUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpca_caller setUpca:[rb_BarcodeChainway_setUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcaPreamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcaPreamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcaPreamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcaPreamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcaPreamble_caller_params* par = [[[rb_BarcodeChainway_getUpcaPreamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcaPreamble_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcaPreamble_caller*) getSharedInstance;
+(void) getUpcaPreamble:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params;
+(void) getUpcaPreamble_in_thread:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params;
+(void) getUpcaPreamble_in_UI_thread:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcaPreamble_caller* our_BarcodeChainway_getUpcaPreamble_caller = nil;

@implementation rb_BarcodeChainway_getUpcaPreamble_caller

+(rb_BarcodeChainway_getUpcaPreamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcaPreamble_caller == nil) {
        our_BarcodeChainway_getUpcaPreamble_caller = [[rb_BarcodeChainway_getUpcaPreamble_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcaPreamble_caller;
}

-(void) command_getUpcaPreamble:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcaPreamble:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcaPreamble:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaPreamble_caller getSharedInstance] command_getUpcaPreamble:caller_params];
}

+(void) getUpcaPreamble_in_thread:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaPreamble_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcaPreamble:) withObject:caller_params];
}

+(void) getUpcaPreamble_in_UI_thread:(rb_BarcodeChainway_getUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaPreamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcaPreamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcaPreamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcaPreamble"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcaPreamble_caller getUpcaPreamble_in_thread:[rb_BarcodeChainway_getUpcaPreamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcaPreamble_caller getUpcaPreamble:[rb_BarcodeChainway_getUpcaPreamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcaPreamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcaPreamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcaPreamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcaPreamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcaPreamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcaPreamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcaPreamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcaPreamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcaPreamble_caller_params* par = [[[rb_BarcodeChainway_setUpcaPreamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcaPreamble_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcaPreamble_caller*) getSharedInstance;
+(void) setUpcaPreamble:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params;
+(void) setUpcaPreamble_in_thread:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params;
+(void) setUpcaPreamble_in_UI_thread:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcaPreamble_caller* our_BarcodeChainway_setUpcaPreamble_caller = nil;

@implementation rb_BarcodeChainway_setUpcaPreamble_caller

+(rb_BarcodeChainway_setUpcaPreamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcaPreamble_caller == nil) {
        our_BarcodeChainway_setUpcaPreamble_caller = [[rb_BarcodeChainway_setUpcaPreamble_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcaPreamble_caller;
}

-(void) command_setUpcaPreamble:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcaPreamble:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcaPreamble:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaPreamble_caller getSharedInstance] command_setUpcaPreamble:caller_params];
}

+(void) setUpcaPreamble_in_thread:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaPreamble_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcaPreamble:) withObject:caller_params];
}

+(void) setUpcaPreamble_in_UI_thread:(rb_BarcodeChainway_setUpcaPreamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaPreamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcaPreamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcaPreamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcaPreamble="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcaPreamble_caller setUpcaPreamble_in_thread:[rb_BarcodeChainway_setUpcaPreamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcaPreamble_caller setUpcaPreamble:[rb_BarcodeChainway_setUpcaPreamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcaPreamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcaPreamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcaPreamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcaPreamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpcaReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUpcaReportCheckDigit_caller*) getSharedInstance;
+(void) getUpcaReportCheckDigit:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params;
+(void) getUpcaReportCheckDigit_in_thread:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params;
+(void) getUpcaReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpcaReportCheckDigit_caller* our_BarcodeChainway_getUpcaReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUpcaReportCheckDigit_caller

+(rb_BarcodeChainway_getUpcaReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpcaReportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUpcaReportCheckDigit_caller = [[rb_BarcodeChainway_getUpcaReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUpcaReportCheckDigit_caller;
}

-(void) command_getUpcaReportCheckDigit:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpcaReportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpcaReportCheckDigit:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaReportCheckDigit_caller getSharedInstance] command_getUpcaReportCheckDigit:caller_params];
}

+(void) getUpcaReportCheckDigit_in_thread:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpcaReportCheckDigit:) withObject:caller_params];
}

+(void) getUpcaReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpcaReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpcaReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpcaReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcaReportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpcaReportCheckDigit_caller getUpcaReportCheckDigit_in_thread:[rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpcaReportCheckDigit_caller getUpcaReportCheckDigit:[rb_BarcodeChainway_getUpcaReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpcaReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpcaReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpcaReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpcaReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpcaReportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUpcaReportCheckDigit_caller*) getSharedInstance;
+(void) setUpcaReportCheckDigit:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params;
+(void) setUpcaReportCheckDigit_in_thread:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params;
+(void) setUpcaReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpcaReportCheckDigit_caller* our_BarcodeChainway_setUpcaReportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUpcaReportCheckDigit_caller

+(rb_BarcodeChainway_setUpcaReportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpcaReportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUpcaReportCheckDigit_caller = [[rb_BarcodeChainway_setUpcaReportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUpcaReportCheckDigit_caller;
}

-(void) command_setUpcaReportCheckDigit:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpcaReportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpcaReportCheckDigit:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaReportCheckDigit_caller getSharedInstance] command_setUpcaReportCheckDigit:caller_params];
}

+(void) setUpcaReportCheckDigit_in_thread:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaReportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpcaReportCheckDigit:) withObject:caller_params];
}

+(void) setUpcaReportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpcaReportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpcaReportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpcaReportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upcaReportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpcaReportCheckDigit_caller setUpcaReportCheckDigit_in_thread:[rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpcaReportCheckDigit_caller setUpcaReportCheckDigit:[rb_BarcodeChainway_setUpcaReportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpcaReportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpcaReportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpcaReportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpcaReportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce0_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce0_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce0_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce0_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce0_caller_params* par = [[[rb_BarcodeChainway_getUpce0_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce0_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce0_caller*) getSharedInstance;
+(void) getUpce0:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params;
+(void) getUpce0_in_thread:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params;
+(void) getUpce0_in_UI_thread:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce0_caller* our_BarcodeChainway_getUpce0_caller = nil;

@implementation rb_BarcodeChainway_getUpce0_caller

+(rb_BarcodeChainway_getUpce0_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce0_caller == nil) {
        our_BarcodeChainway_getUpce0_caller = [[rb_BarcodeChainway_getUpce0_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce0_caller;
}

-(void) command_getUpce0:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce0:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce0:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0_caller getSharedInstance] command_getUpce0:caller_params];
}

+(void) getUpce0_in_thread:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce0:) withObject:caller_params];
}

+(void) getUpce0_in_UI_thread:(rb_BarcodeChainway_getUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce0:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce0_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce0_caller getUpce0_in_thread:[rb_BarcodeChainway_getUpce0_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce0_caller getUpce0:[rb_BarcodeChainway_getUpce0_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce0(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce0_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce0(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce0_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce0_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce0_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce0_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce0_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce0_caller_params* par = [[[rb_BarcodeChainway_setUpce0_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce0_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce0_caller*) getSharedInstance;
+(void) setUpce0:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params;
+(void) setUpce0_in_thread:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params;
+(void) setUpce0_in_UI_thread:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce0_caller* our_BarcodeChainway_setUpce0_caller = nil;

@implementation rb_BarcodeChainway_setUpce0_caller

+(rb_BarcodeChainway_setUpce0_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce0_caller == nil) {
        our_BarcodeChainway_setUpce0_caller = [[rb_BarcodeChainway_setUpce0_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce0_caller;
}

-(void) command_setUpce0:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce0:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce0:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0_caller getSharedInstance] command_setUpce0:caller_params];
}

+(void) setUpce0_in_thread:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce0:) withObject:caller_params];
}

+(void) setUpce0_in_UI_thread:(rb_BarcodeChainway_setUpce0_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce0:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce0_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce0_caller setUpce0_in_thread:[rb_BarcodeChainway_setUpce0_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce0_caller setUpce0:[rb_BarcodeChainway_setUpce0_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce0(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce0_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce0(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce0_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce0convertToUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce0convertToUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce0convertToUpca_caller_params* par = [[[rb_BarcodeChainway_getUpce0convertToUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce0convertToUpca_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce0convertToUpca_caller*) getSharedInstance;
+(void) getUpce0convertToUpca:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params;
+(void) getUpce0convertToUpca_in_thread:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params;
+(void) getUpce0convertToUpca_in_UI_thread:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce0convertToUpca_caller* our_BarcodeChainway_getUpce0convertToUpca_caller = nil;

@implementation rb_BarcodeChainway_getUpce0convertToUpca_caller

+(rb_BarcodeChainway_getUpce0convertToUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce0convertToUpca_caller == nil) {
        our_BarcodeChainway_getUpce0convertToUpca_caller = [[rb_BarcodeChainway_getUpce0convertToUpca_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce0convertToUpca_caller;
}

-(void) command_getUpce0convertToUpca:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce0convertToUpca:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce0convertToUpca:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0convertToUpca_caller getSharedInstance] command_getUpce0convertToUpca:caller_params];
}

+(void) getUpce0convertToUpca_in_thread:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0convertToUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce0convertToUpca:) withObject:caller_params];
}

+(void) getUpce0convertToUpca_in_UI_thread:(rb_BarcodeChainway_getUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0convertToUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce0convertToUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce0convertToUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0convertToUpca"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce0convertToUpca_caller getUpce0convertToUpca_in_thread:[rb_BarcodeChainway_getUpce0convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce0convertToUpca_caller getUpce0convertToUpca:[rb_BarcodeChainway_getUpce0convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce0convertToUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce0convertToUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce0convertToUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce0convertToUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce0convertToUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce0convertToUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce0convertToUpca_caller_params* par = [[[rb_BarcodeChainway_setUpce0convertToUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce0convertToUpca_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce0convertToUpca_caller*) getSharedInstance;
+(void) setUpce0convertToUpca:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params;
+(void) setUpce0convertToUpca_in_thread:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params;
+(void) setUpce0convertToUpca_in_UI_thread:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce0convertToUpca_caller* our_BarcodeChainway_setUpce0convertToUpca_caller = nil;

@implementation rb_BarcodeChainway_setUpce0convertToUpca_caller

+(rb_BarcodeChainway_setUpce0convertToUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce0convertToUpca_caller == nil) {
        our_BarcodeChainway_setUpce0convertToUpca_caller = [[rb_BarcodeChainway_setUpce0convertToUpca_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce0convertToUpca_caller;
}

-(void) command_setUpce0convertToUpca:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce0convertToUpca:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce0convertToUpca:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0convertToUpca_caller getSharedInstance] command_setUpce0convertToUpca:caller_params];
}

+(void) setUpce0convertToUpca_in_thread:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0convertToUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce0convertToUpca:) withObject:caller_params];
}

+(void) setUpce0convertToUpca_in_UI_thread:(rb_BarcodeChainway_setUpce0convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0convertToUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce0convertToUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce0convertToUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0convertToUpca="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce0convertToUpca_caller setUpce0convertToUpca_in_thread:[rb_BarcodeChainway_setUpce0convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce0convertToUpca_caller setUpce0convertToUpca:[rb_BarcodeChainway_setUpce0convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce0convertToUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce0convertToUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce0convertToUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce0convertToUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce0preamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce0preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce0preamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce0preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce0preamble_caller_params* par = [[[rb_BarcodeChainway_getUpce0preamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce0preamble_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce0preamble_caller*) getSharedInstance;
+(void) getUpce0preamble:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params;
+(void) getUpce0preamble_in_thread:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params;
+(void) getUpce0preamble_in_UI_thread:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce0preamble_caller* our_BarcodeChainway_getUpce0preamble_caller = nil;

@implementation rb_BarcodeChainway_getUpce0preamble_caller

+(rb_BarcodeChainway_getUpce0preamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce0preamble_caller == nil) {
        our_BarcodeChainway_getUpce0preamble_caller = [[rb_BarcodeChainway_getUpce0preamble_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce0preamble_caller;
}

-(void) command_getUpce0preamble:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce0preamble:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce0preamble:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0preamble_caller getSharedInstance] command_getUpce0preamble:caller_params];
}

+(void) getUpce0preamble_in_thread:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0preamble_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce0preamble:) withObject:caller_params];
}

+(void) getUpce0preamble_in_UI_thread:(rb_BarcodeChainway_getUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0preamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce0preamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce0preamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0preamble"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce0preamble_caller getUpce0preamble_in_thread:[rb_BarcodeChainway_getUpce0preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce0preamble_caller getUpce0preamble:[rb_BarcodeChainway_getUpce0preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce0preamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce0preamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce0preamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce0preamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce0preamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce0preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce0preamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce0preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce0preamble_caller_params* par = [[[rb_BarcodeChainway_setUpce0preamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce0preamble_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce0preamble_caller*) getSharedInstance;
+(void) setUpce0preamble:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params;
+(void) setUpce0preamble_in_thread:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params;
+(void) setUpce0preamble_in_UI_thread:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce0preamble_caller* our_BarcodeChainway_setUpce0preamble_caller = nil;

@implementation rb_BarcodeChainway_setUpce0preamble_caller

+(rb_BarcodeChainway_setUpce0preamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce0preamble_caller == nil) {
        our_BarcodeChainway_setUpce0preamble_caller = [[rb_BarcodeChainway_setUpce0preamble_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce0preamble_caller;
}

-(void) command_setUpce0preamble:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce0preamble:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce0preamble:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0preamble_caller getSharedInstance] command_setUpce0preamble:caller_params];
}

+(void) setUpce0preamble_in_thread:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0preamble_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce0preamble:) withObject:caller_params];
}

+(void) setUpce0preamble_in_UI_thread:(rb_BarcodeChainway_setUpce0preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0preamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce0preamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce0preamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0preamble="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce0preamble_caller setUpce0preamble_in_thread:[rb_BarcodeChainway_setUpce0preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce0preamble_caller setUpce0preamble:[rb_BarcodeChainway_setUpce0preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce0preamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce0preamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce0preamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce0preamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce0reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce0reportCheckDigit_caller*) getSharedInstance;
+(void) getUpce0reportCheckDigit:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params;
+(void) getUpce0reportCheckDigit_in_thread:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params;
+(void) getUpce0reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce0reportCheckDigit_caller* our_BarcodeChainway_getUpce0reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUpce0reportCheckDigit_caller

+(rb_BarcodeChainway_getUpce0reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce0reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUpce0reportCheckDigit_caller = [[rb_BarcodeChainway_getUpce0reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce0reportCheckDigit_caller;
}

-(void) command_getUpce0reportCheckDigit:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce0reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce0reportCheckDigit:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0reportCheckDigit_caller getSharedInstance] command_getUpce0reportCheckDigit:caller_params];
}

+(void) getUpce0reportCheckDigit_in_thread:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce0reportCheckDigit:) withObject:caller_params];
}

+(void) getUpce0reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce0reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce0reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce0reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce0reportCheckDigit_caller getUpce0reportCheckDigit_in_thread:[rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce0reportCheckDigit_caller getUpce0reportCheckDigit:[rb_BarcodeChainway_getUpce0reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce0reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce0reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce0reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce0reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce0reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce0reportCheckDigit_caller*) getSharedInstance;
+(void) setUpce0reportCheckDigit:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params;
+(void) setUpce0reportCheckDigit_in_thread:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params;
+(void) setUpce0reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce0reportCheckDigit_caller* our_BarcodeChainway_setUpce0reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUpce0reportCheckDigit_caller

+(rb_BarcodeChainway_setUpce0reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce0reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUpce0reportCheckDigit_caller = [[rb_BarcodeChainway_setUpce0reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce0reportCheckDigit_caller;
}

-(void) command_setUpce0reportCheckDigit:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce0reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce0reportCheckDigit:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0reportCheckDigit_caller getSharedInstance] command_setUpce0reportCheckDigit:caller_params];
}

+(void) setUpce0reportCheckDigit_in_thread:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce0reportCheckDigit:) withObject:caller_params];
}

+(void) setUpce0reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce0reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce0reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce0reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce0reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce0reportCheckDigit_caller setUpce0reportCheckDigit_in_thread:[rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce0reportCheckDigit_caller setUpce0reportCheckDigit:[rb_BarcodeChainway_setUpce0reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce0reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce0reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce0reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce0reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce1_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce1_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce1_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce1_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce1_caller_params* par = [[[rb_BarcodeChainway_getUpce1_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce1_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce1_caller*) getSharedInstance;
+(void) getUpce1:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params;
+(void) getUpce1_in_thread:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params;
+(void) getUpce1_in_UI_thread:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce1_caller* our_BarcodeChainway_getUpce1_caller = nil;

@implementation rb_BarcodeChainway_getUpce1_caller

+(rb_BarcodeChainway_getUpce1_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce1_caller == nil) {
        our_BarcodeChainway_getUpce1_caller = [[rb_BarcodeChainway_getUpce1_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce1_caller;
}

-(void) command_getUpce1:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce1:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce1:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1_caller getSharedInstance] command_getUpce1:caller_params];
}

+(void) getUpce1_in_thread:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce1:) withObject:caller_params];
}

+(void) getUpce1_in_UI_thread:(rb_BarcodeChainway_getUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce1:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce1_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce1_caller getUpce1_in_thread:[rb_BarcodeChainway_getUpce1_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce1_caller getUpce1:[rb_BarcodeChainway_getUpce1_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce1(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce1_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce1(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce1_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce1_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce1_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce1_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce1_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce1_caller_params* par = [[[rb_BarcodeChainway_setUpce1_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce1_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce1_caller*) getSharedInstance;
+(void) setUpce1:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params;
+(void) setUpce1_in_thread:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params;
+(void) setUpce1_in_UI_thread:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce1_caller* our_BarcodeChainway_setUpce1_caller = nil;

@implementation rb_BarcodeChainway_setUpce1_caller

+(rb_BarcodeChainway_setUpce1_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce1_caller == nil) {
        our_BarcodeChainway_setUpce1_caller = [[rb_BarcodeChainway_setUpce1_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce1_caller;
}

-(void) command_setUpce1:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce1:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce1:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1_caller getSharedInstance] command_setUpce1:caller_params];
}

+(void) setUpce1_in_thread:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce1:) withObject:caller_params];
}

+(void) setUpce1_in_UI_thread:(rb_BarcodeChainway_setUpce1_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce1:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce1_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce1_caller setUpce1_in_thread:[rb_BarcodeChainway_setUpce1_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce1_caller setUpce1:[rb_BarcodeChainway_setUpce1_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce1(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce1_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce1(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce1_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce1convertToUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce1convertToUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce1convertToUpca_caller_params* par = [[[rb_BarcodeChainway_getUpce1convertToUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce1convertToUpca_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce1convertToUpca_caller*) getSharedInstance;
+(void) getUpce1convertToUpca:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params;
+(void) getUpce1convertToUpca_in_thread:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params;
+(void) getUpce1convertToUpca_in_UI_thread:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce1convertToUpca_caller* our_BarcodeChainway_getUpce1convertToUpca_caller = nil;

@implementation rb_BarcodeChainway_getUpce1convertToUpca_caller

+(rb_BarcodeChainway_getUpce1convertToUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce1convertToUpca_caller == nil) {
        our_BarcodeChainway_getUpce1convertToUpca_caller = [[rb_BarcodeChainway_getUpce1convertToUpca_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce1convertToUpca_caller;
}

-(void) command_getUpce1convertToUpca:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce1convertToUpca:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce1convertToUpca:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1convertToUpca_caller getSharedInstance] command_getUpce1convertToUpca:caller_params];
}

+(void) getUpce1convertToUpca_in_thread:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1convertToUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce1convertToUpca:) withObject:caller_params];
}

+(void) getUpce1convertToUpca_in_UI_thread:(rb_BarcodeChainway_getUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1convertToUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce1convertToUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce1convertToUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1convertToUpca"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce1convertToUpca_caller getUpce1convertToUpca_in_thread:[rb_BarcodeChainway_getUpce1convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce1convertToUpca_caller getUpce1convertToUpca:[rb_BarcodeChainway_getUpce1convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce1convertToUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce1convertToUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce1convertToUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce1convertToUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce1convertToUpca_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce1convertToUpca_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce1convertToUpca_caller_params* par = [[[rb_BarcodeChainway_setUpce1convertToUpca_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce1convertToUpca_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce1convertToUpca_caller*) getSharedInstance;
+(void) setUpce1convertToUpca:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params;
+(void) setUpce1convertToUpca_in_thread:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params;
+(void) setUpce1convertToUpca_in_UI_thread:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce1convertToUpca_caller* our_BarcodeChainway_setUpce1convertToUpca_caller = nil;

@implementation rb_BarcodeChainway_setUpce1convertToUpca_caller

+(rb_BarcodeChainway_setUpce1convertToUpca_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce1convertToUpca_caller == nil) {
        our_BarcodeChainway_setUpce1convertToUpca_caller = [[rb_BarcodeChainway_setUpce1convertToUpca_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce1convertToUpca_caller;
}

-(void) command_setUpce1convertToUpca:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce1convertToUpca:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce1convertToUpca:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1convertToUpca_caller getSharedInstance] command_setUpce1convertToUpca:caller_params];
}

+(void) setUpce1convertToUpca_in_thread:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1convertToUpca_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce1convertToUpca:) withObject:caller_params];
}

+(void) setUpce1convertToUpca_in_UI_thread:(rb_BarcodeChainway_setUpce1convertToUpca_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1convertToUpca_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce1convertToUpca:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce1convertToUpca_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1convertToUpca="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce1convertToUpca_caller setUpce1convertToUpca_in_thread:[rb_BarcodeChainway_setUpce1convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce1convertToUpca_caller setUpce1convertToUpca:[rb_BarcodeChainway_setUpce1convertToUpca_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce1convertToUpca(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce1convertToUpca_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce1convertToUpca(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce1convertToUpca_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce1preamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce1preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce1preamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce1preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce1preamble_caller_params* par = [[[rb_BarcodeChainway_getUpce1preamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce1preamble_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce1preamble_caller*) getSharedInstance;
+(void) getUpce1preamble:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params;
+(void) getUpce1preamble_in_thread:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params;
+(void) getUpce1preamble_in_UI_thread:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce1preamble_caller* our_BarcodeChainway_getUpce1preamble_caller = nil;

@implementation rb_BarcodeChainway_getUpce1preamble_caller

+(rb_BarcodeChainway_getUpce1preamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce1preamble_caller == nil) {
        our_BarcodeChainway_getUpce1preamble_caller = [[rb_BarcodeChainway_getUpce1preamble_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce1preamble_caller;
}

-(void) command_getUpce1preamble:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce1preamble:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce1preamble:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1preamble_caller getSharedInstance] command_getUpce1preamble:caller_params];
}

+(void) getUpce1preamble_in_thread:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1preamble_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce1preamble:) withObject:caller_params];
}

+(void) getUpce1preamble_in_UI_thread:(rb_BarcodeChainway_getUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1preamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce1preamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce1preamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1preamble"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce1preamble_caller getUpce1preamble_in_thread:[rb_BarcodeChainway_getUpce1preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce1preamble_caller getUpce1preamble:[rb_BarcodeChainway_getUpce1preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce1preamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce1preamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce1preamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce1preamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce1preamble_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce1preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce1preamble_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce1preamble_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce1preamble_caller_params* par = [[[rb_BarcodeChainway_setUpce1preamble_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce1preamble_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce1preamble_caller*) getSharedInstance;
+(void) setUpce1preamble:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params;
+(void) setUpce1preamble_in_thread:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params;
+(void) setUpce1preamble_in_UI_thread:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce1preamble_caller* our_BarcodeChainway_setUpce1preamble_caller = nil;

@implementation rb_BarcodeChainway_setUpce1preamble_caller

+(rb_BarcodeChainway_setUpce1preamble_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce1preamble_caller == nil) {
        our_BarcodeChainway_setUpce1preamble_caller = [[rb_BarcodeChainway_setUpce1preamble_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce1preamble_caller;
}

-(void) command_setUpce1preamble:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce1preamble:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce1preamble:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1preamble_caller getSharedInstance] command_setUpce1preamble:caller_params];
}

+(void) setUpce1preamble_in_thread:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1preamble_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce1preamble:) withObject:caller_params];
}

+(void) setUpce1preamble_in_UI_thread:(rb_BarcodeChainway_setUpce1preamble_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1preamble_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce1preamble:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce1preamble_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1preamble="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce1preamble_caller setUpce1preamble_in_thread:[rb_BarcodeChainway_setUpce1preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce1preamble_caller setUpce1preamble:[rb_BarcodeChainway_setUpce1preamble_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce1preamble(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce1preamble_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce1preamble(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce1preamble_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getUpce1reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_getUpce1reportCheckDigit_caller*) getSharedInstance;
+(void) getUpce1reportCheckDigit:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params;
+(void) getUpce1reportCheckDigit_in_thread:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params;
+(void) getUpce1reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getUpce1reportCheckDigit_caller* our_BarcodeChainway_getUpce1reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_getUpce1reportCheckDigit_caller

+(rb_BarcodeChainway_getUpce1reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_getUpce1reportCheckDigit_caller == nil) {
        our_BarcodeChainway_getUpce1reportCheckDigit_caller = [[rb_BarcodeChainway_getUpce1reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_getUpce1reportCheckDigit_caller;
}

-(void) command_getUpce1reportCheckDigit:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getUpce1reportCheckDigit:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getUpce1reportCheckDigit:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1reportCheckDigit_caller getSharedInstance] command_getUpce1reportCheckDigit:caller_params];
}

+(void) getUpce1reportCheckDigit_in_thread:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_getUpce1reportCheckDigit:) withObject:caller_params];
}

+(void) getUpce1reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_getUpce1reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getUpce1reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getUpce1reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1reportCheckDigit"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getUpce1reportCheckDigit_caller getUpce1reportCheckDigit_in_thread:[rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getUpce1reportCheckDigit_caller getUpce1reportCheckDigit:[rb_BarcodeChainway_getUpce1reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getUpce1reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getUpce1reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getUpce1reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getUpce1reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params* par = [[[rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setUpce1reportCheckDigit_caller : NSObject {

}
+(rb_BarcodeChainway_setUpce1reportCheckDigit_caller*) getSharedInstance;
+(void) setUpce1reportCheckDigit:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params;
+(void) setUpce1reportCheckDigit_in_thread:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params;
+(void) setUpce1reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setUpce1reportCheckDigit_caller* our_BarcodeChainway_setUpce1reportCheckDigit_caller = nil;

@implementation rb_BarcodeChainway_setUpce1reportCheckDigit_caller

+(rb_BarcodeChainway_setUpce1reportCheckDigit_caller*) getSharedInstance {
    if (our_BarcodeChainway_setUpce1reportCheckDigit_caller == nil) {
        our_BarcodeChainway_setUpce1reportCheckDigit_caller = [[rb_BarcodeChainway_setUpce1reportCheckDigit_caller alloc] init];
    }
    return our_BarcodeChainway_setUpce1reportCheckDigit_caller;
}

-(void) command_setUpce1reportCheckDigit:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setUpce1reportCheckDigit:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setUpce1reportCheckDigit:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1reportCheckDigit_caller getSharedInstance] command_setUpce1reportCheckDigit:caller_params];
}

+(void) setUpce1reportCheckDigit_in_thread:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1reportCheckDigit_caller getSharedInstance] performSelectorInBackground:@selector(command_setUpce1reportCheckDigit:) withObject:caller_params];
}

+(void) setUpce1reportCheckDigit_in_UI_thread:(rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params*)caller_params {
    [[rb_BarcodeChainway_setUpce1reportCheckDigit_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setUpce1reportCheckDigit:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setUpce1reportCheckDigit_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::upce1reportCheckDigit="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setUpce1reportCheckDigit_caller setUpce1reportCheckDigit_in_thread:[rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setUpce1reportCheckDigit_caller setUpce1reportCheckDigit:[rb_BarcodeChainway_setUpce1reportCheckDigit_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setUpce1reportCheckDigit(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setUpce1reportCheckDigit_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setUpce1reportCheckDigit(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setUpce1reportCheckDigit_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getWebcode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getWebcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getWebcode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getWebcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getWebcode_caller_params* par = [[[rb_BarcodeChainway_getWebcode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getWebcode_caller : NSObject {

}
+(rb_BarcodeChainway_getWebcode_caller*) getSharedInstance;
+(void) getWebcode:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params;
+(void) getWebcode_in_thread:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params;
+(void) getWebcode_in_UI_thread:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getWebcode_caller* our_BarcodeChainway_getWebcode_caller = nil;

@implementation rb_BarcodeChainway_getWebcode_caller

+(rb_BarcodeChainway_getWebcode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getWebcode_caller == nil) {
        our_BarcodeChainway_getWebcode_caller = [[rb_BarcodeChainway_getWebcode_caller alloc] init];
    }
    return our_BarcodeChainway_getWebcode_caller;
}

-(void) command_getWebcode:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getWebcode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getWebcode:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcode_caller getSharedInstance] command_getWebcode:caller_params];
}

+(void) getWebcode_in_thread:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcode_caller getSharedInstance] performSelectorInBackground:@selector(command_getWebcode:) withObject:caller_params];
}

+(void) getWebcode_in_UI_thread:(rb_BarcodeChainway_getWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getWebcode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getWebcode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::webcode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getWebcode_caller getWebcode_in_thread:[rb_BarcodeChainway_getWebcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getWebcode_caller getWebcode:[rb_BarcodeChainway_getWebcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getWebcode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getWebcode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getWebcode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getWebcode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setWebcode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setWebcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setWebcode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setWebcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setWebcode_caller_params* par = [[[rb_BarcodeChainway_setWebcode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setWebcode_caller : NSObject {

}
+(rb_BarcodeChainway_setWebcode_caller*) getSharedInstance;
+(void) setWebcode:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params;
+(void) setWebcode_in_thread:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params;
+(void) setWebcode_in_UI_thread:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setWebcode_caller* our_BarcodeChainway_setWebcode_caller = nil;

@implementation rb_BarcodeChainway_setWebcode_caller

+(rb_BarcodeChainway_setWebcode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setWebcode_caller == nil) {
        our_BarcodeChainway_setWebcode_caller = [[rb_BarcodeChainway_setWebcode_caller alloc] init];
    }
    return our_BarcodeChainway_setWebcode_caller;
}

-(void) command_setWebcode:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setWebcode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setWebcode:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcode_caller getSharedInstance] command_setWebcode:caller_params];
}

+(void) setWebcode_in_thread:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcode_caller getSharedInstance] performSelectorInBackground:@selector(command_setWebcode:) withObject:caller_params];
}

+(void) setWebcode_in_UI_thread:(rb_BarcodeChainway_setWebcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setWebcode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setWebcode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::webcode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setWebcode_caller setWebcode_in_thread:[rb_BarcodeChainway_setWebcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setWebcode_caller setWebcode:[rb_BarcodeChainway_setWebcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setWebcode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setWebcode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setWebcode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setWebcode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params* par = [[[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller : NSObject {

}
+(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller*) getSharedInstance;
+(void) getWebcodeDecodeGtSubtype:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params;
+(void) getWebcodeDecodeGtSubtype_in_thread:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params;
+(void) getWebcodeDecodeGtSubtype_in_UI_thread:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller* our_BarcodeChainway_getWebcodeDecodeGtSubtype_caller = nil;

@implementation rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller

+(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller*) getSharedInstance {
    if (our_BarcodeChainway_getWebcodeDecodeGtSubtype_caller == nil) {
        our_BarcodeChainway_getWebcodeDecodeGtSubtype_caller = [[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller alloc] init];
    }
    return our_BarcodeChainway_getWebcodeDecodeGtSubtype_caller;
}

-(void) command_getWebcodeDecodeGtSubtype:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getWebcodeDecodeGtSubtype:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getWebcodeDecodeGtSubtype:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller getSharedInstance] command_getWebcodeDecodeGtSubtype:caller_params];
}

+(void) getWebcodeDecodeGtSubtype_in_thread:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller getSharedInstance] performSelectorInBackground:@selector(command_getWebcodeDecodeGtSubtype:) withObject:caller_params];
}

+(void) getWebcodeDecodeGtSubtype_in_UI_thread:(rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getWebcodeDecodeGtSubtype:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getWebcodeDecodeGtSubtype_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::webcodeDecodeGtSubtype"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller getWebcodeDecodeGtSubtype_in_thread:[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller getWebcodeDecodeGtSubtype:[rb_BarcodeChainway_getWebcodeDecodeGtSubtype_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getWebcodeDecodeGtSubtype(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getWebcodeDecodeGtSubtype_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getWebcodeDecodeGtSubtype(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getWebcodeDecodeGtSubtype_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params* par = [[[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller : NSObject {

}
+(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller*) getSharedInstance;
+(void) setWebcodeDecodeGtSubtype:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params;
+(void) setWebcodeDecodeGtSubtype_in_thread:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params;
+(void) setWebcodeDecodeGtSubtype_in_UI_thread:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller* our_BarcodeChainway_setWebcodeDecodeGtSubtype_caller = nil;

@implementation rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller

+(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller*) getSharedInstance {
    if (our_BarcodeChainway_setWebcodeDecodeGtSubtype_caller == nil) {
        our_BarcodeChainway_setWebcodeDecodeGtSubtype_caller = [[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller alloc] init];
    }
    return our_BarcodeChainway_setWebcodeDecodeGtSubtype_caller;
}

-(void) command_setWebcodeDecodeGtSubtype:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setWebcodeDecodeGtSubtype:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setWebcodeDecodeGtSubtype:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller getSharedInstance] command_setWebcodeDecodeGtSubtype:caller_params];
}

+(void) setWebcodeDecodeGtSubtype_in_thread:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller getSharedInstance] performSelectorInBackground:@selector(command_setWebcodeDecodeGtSubtype:) withObject:caller_params];
}

+(void) setWebcodeDecodeGtSubtype_in_UI_thread:(rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params*)caller_params {
    [[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setWebcodeDecodeGtSubtype:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setWebcodeDecodeGtSubtype_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::webcodeDecodeGtSubtype="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller setWebcodeDecodeGtSubtype_in_thread:[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller setWebcodeDecodeGtSubtype:[rb_BarcodeChainway_setWebcodeDecodeGtSubtype_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setWebcodeDecodeGtSubtype(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setWebcodeDecodeGtSubtype_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setWebcodeDecodeGtSubtype(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setWebcodeDecodeGtSubtype_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmModelNumber_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmModelNumber_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmModelNumber_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmModelNumber_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmModelNumber_caller_params* par = [[[rb_BarcodeChainway_getRsmModelNumber_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmModelNumber_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmModelNumber_caller*) getSharedInstance;
+(void) getRsmModelNumber:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params;
+(void) getRsmModelNumber_in_thread:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params;
+(void) getRsmModelNumber_in_UI_thread:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmModelNumber_caller* our_BarcodeChainway_getRsmModelNumber_caller = nil;

@implementation rb_BarcodeChainway_getRsmModelNumber_caller

+(rb_BarcodeChainway_getRsmModelNumber_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmModelNumber_caller == nil) {
        our_BarcodeChainway_getRsmModelNumber_caller = [[rb_BarcodeChainway_getRsmModelNumber_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmModelNumber_caller;
}

-(void) command_getRsmModelNumber:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmModelNumber:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmModelNumber:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmModelNumber_caller getSharedInstance] command_getRsmModelNumber:caller_params];
}

+(void) getRsmModelNumber_in_thread:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmModelNumber_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmModelNumber:) withObject:caller_params];
}

+(void) getRsmModelNumber_in_UI_thread:(rb_BarcodeChainway_getRsmModelNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmModelNumber_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmModelNumber:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmModelNumber_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmModelNumber"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmModelNumber_caller getRsmModelNumber_in_thread:[rb_BarcodeChainway_getRsmModelNumber_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmModelNumber_caller getRsmModelNumber:[rb_BarcodeChainway_getRsmModelNumber_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmModelNumber(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmModelNumber_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmModelNumber(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmModelNumber_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmSerialNumber_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmSerialNumber_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmSerialNumber_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmSerialNumber_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmSerialNumber_caller_params* par = [[[rb_BarcodeChainway_getRsmSerialNumber_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmSerialNumber_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmSerialNumber_caller*) getSharedInstance;
+(void) getRsmSerialNumber:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params;
+(void) getRsmSerialNumber_in_thread:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params;
+(void) getRsmSerialNumber_in_UI_thread:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmSerialNumber_caller* our_BarcodeChainway_getRsmSerialNumber_caller = nil;

@implementation rb_BarcodeChainway_getRsmSerialNumber_caller

+(rb_BarcodeChainway_getRsmSerialNumber_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmSerialNumber_caller == nil) {
        our_BarcodeChainway_getRsmSerialNumber_caller = [[rb_BarcodeChainway_getRsmSerialNumber_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmSerialNumber_caller;
}

-(void) command_getRsmSerialNumber:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmSerialNumber:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmSerialNumber:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmSerialNumber_caller getSharedInstance] command_getRsmSerialNumber:caller_params];
}

+(void) getRsmSerialNumber_in_thread:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmSerialNumber_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmSerialNumber:) withObject:caller_params];
}

+(void) getRsmSerialNumber_in_UI_thread:(rb_BarcodeChainway_getRsmSerialNumber_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmSerialNumber_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmSerialNumber:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmSerialNumber_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmSerialNumber"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmSerialNumber_caller getRsmSerialNumber_in_thread:[rb_BarcodeChainway_getRsmSerialNumber_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmSerialNumber_caller getRsmSerialNumber:[rb_BarcodeChainway_getRsmSerialNumber_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmSerialNumber(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmSerialNumber_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmSerialNumber(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmSerialNumber_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmDateOfManufacture_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmDateOfManufacture_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmDateOfManufacture_caller_params* par = [[[rb_BarcodeChainway_getRsmDateOfManufacture_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmDateOfManufacture_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmDateOfManufacture_caller*) getSharedInstance;
+(void) getRsmDateOfManufacture:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params;
+(void) getRsmDateOfManufacture_in_thread:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params;
+(void) getRsmDateOfManufacture_in_UI_thread:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmDateOfManufacture_caller* our_BarcodeChainway_getRsmDateOfManufacture_caller = nil;

@implementation rb_BarcodeChainway_getRsmDateOfManufacture_caller

+(rb_BarcodeChainway_getRsmDateOfManufacture_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmDateOfManufacture_caller == nil) {
        our_BarcodeChainway_getRsmDateOfManufacture_caller = [[rb_BarcodeChainway_getRsmDateOfManufacture_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmDateOfManufacture_caller;
}

-(void) command_getRsmDateOfManufacture:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmDateOfManufacture:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmDateOfManufacture:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfManufacture_caller getSharedInstance] command_getRsmDateOfManufacture:caller_params];
}

+(void) getRsmDateOfManufacture_in_thread:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfManufacture_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmDateOfManufacture:) withObject:caller_params];
}

+(void) getRsmDateOfManufacture_in_UI_thread:(rb_BarcodeChainway_getRsmDateOfManufacture_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfManufacture_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmDateOfManufacture:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmDateOfManufacture_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmDateOfManufacture"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmDateOfManufacture_caller getRsmDateOfManufacture_in_thread:[rb_BarcodeChainway_getRsmDateOfManufacture_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmDateOfManufacture_caller getRsmDateOfManufacture:[rb_BarcodeChainway_getRsmDateOfManufacture_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmDateOfManufacture(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmDateOfManufacture_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmDateOfManufacture(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmDateOfManufacture_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmDateOfService_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmDateOfService_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmDateOfService_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmDateOfService_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmDateOfService_caller_params* par = [[[rb_BarcodeChainway_getRsmDateOfService_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmDateOfService_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmDateOfService_caller*) getSharedInstance;
+(void) getRsmDateOfService:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params;
+(void) getRsmDateOfService_in_thread:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params;
+(void) getRsmDateOfService_in_UI_thread:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmDateOfService_caller* our_BarcodeChainway_getRsmDateOfService_caller = nil;

@implementation rb_BarcodeChainway_getRsmDateOfService_caller

+(rb_BarcodeChainway_getRsmDateOfService_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmDateOfService_caller == nil) {
        our_BarcodeChainway_getRsmDateOfService_caller = [[rb_BarcodeChainway_getRsmDateOfService_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmDateOfService_caller;
}

-(void) command_getRsmDateOfService:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmDateOfService:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmDateOfService:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfService_caller getSharedInstance] command_getRsmDateOfService:caller_params];
}

+(void) getRsmDateOfService_in_thread:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfService_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmDateOfService:) withObject:caller_params];
}

+(void) getRsmDateOfService_in_UI_thread:(rb_BarcodeChainway_getRsmDateOfService_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDateOfService_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmDateOfService:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmDateOfService_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmDateOfService"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmDateOfService_caller getRsmDateOfService_in_thread:[rb_BarcodeChainway_getRsmDateOfService_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmDateOfService_caller getRsmDateOfService:[rb_BarcodeChainway_getRsmDateOfService_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmDateOfService(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmDateOfService_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmDateOfService(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmDateOfService_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothAddress_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothAddress_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothAddress_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothAddress_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothAddress_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothAddress_caller*) getSharedInstance;
+(void) getRsmBluetoothAddress:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params;
+(void) getRsmBluetoothAddress_in_thread:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params;
+(void) getRsmBluetoothAddress_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothAddress_caller* our_BarcodeChainway_getRsmBluetoothAddress_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothAddress_caller

+(rb_BarcodeChainway_getRsmBluetoothAddress_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothAddress_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothAddress_caller = [[rb_BarcodeChainway_getRsmBluetoothAddress_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothAddress_caller;
}

-(void) command_getRsmBluetoothAddress:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothAddress:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothAddress:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAddress_caller getSharedInstance] command_getRsmBluetoothAddress:caller_params];
}

+(void) getRsmBluetoothAddress_in_thread:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAddress_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothAddress:) withObject:caller_params];
}

+(void) getRsmBluetoothAddress_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAddress_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAddress_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothAddress:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothAddress_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothAddress"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothAddress_caller getRsmBluetoothAddress_in_thread:[rb_BarcodeChainway_getRsmBluetoothAddress_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothAddress_caller getRsmBluetoothAddress:[rb_BarcodeChainway_getRsmBluetoothAddress_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothAddress(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothAddress_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothAddress(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothAddress_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmFirmwareVersion_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmFirmwareVersion_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmFirmwareVersion_caller_params* par = [[[rb_BarcodeChainway_getRsmFirmwareVersion_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmFirmwareVersion_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmFirmwareVersion_caller*) getSharedInstance;
+(void) getRsmFirmwareVersion:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params;
+(void) getRsmFirmwareVersion_in_thread:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params;
+(void) getRsmFirmwareVersion_in_UI_thread:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmFirmwareVersion_caller* our_BarcodeChainway_getRsmFirmwareVersion_caller = nil;

@implementation rb_BarcodeChainway_getRsmFirmwareVersion_caller

+(rb_BarcodeChainway_getRsmFirmwareVersion_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmFirmwareVersion_caller == nil) {
        our_BarcodeChainway_getRsmFirmwareVersion_caller = [[rb_BarcodeChainway_getRsmFirmwareVersion_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmFirmwareVersion_caller;
}

-(void) command_getRsmFirmwareVersion:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmFirmwareVersion:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmFirmwareVersion:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmFirmwareVersion_caller getSharedInstance] command_getRsmFirmwareVersion:caller_params];
}

+(void) getRsmFirmwareVersion_in_thread:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmFirmwareVersion_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmFirmwareVersion:) withObject:caller_params];
}

+(void) getRsmFirmwareVersion_in_UI_thread:(rb_BarcodeChainway_getRsmFirmwareVersion_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmFirmwareVersion_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmFirmwareVersion:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmFirmwareVersion_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmFirmwareVersion"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmFirmwareVersion_caller getRsmFirmwareVersion_in_thread:[rb_BarcodeChainway_getRsmFirmwareVersion_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmFirmwareVersion_caller getRsmFirmwareVersion:[rb_BarcodeChainway_getRsmFirmwareVersion_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmFirmwareVersion(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmFirmwareVersion_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmFirmwareVersion(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmFirmwareVersion_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmDeviceClass_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmDeviceClass_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmDeviceClass_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmDeviceClass_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmDeviceClass_caller_params* par = [[[rb_BarcodeChainway_getRsmDeviceClass_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmDeviceClass_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmDeviceClass_caller*) getSharedInstance;
+(void) getRsmDeviceClass:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params;
+(void) getRsmDeviceClass_in_thread:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params;
+(void) getRsmDeviceClass_in_UI_thread:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmDeviceClass_caller* our_BarcodeChainway_getRsmDeviceClass_caller = nil;

@implementation rb_BarcodeChainway_getRsmDeviceClass_caller

+(rb_BarcodeChainway_getRsmDeviceClass_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmDeviceClass_caller == nil) {
        our_BarcodeChainway_getRsmDeviceClass_caller = [[rb_BarcodeChainway_getRsmDeviceClass_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmDeviceClass_caller;
}

-(void) command_getRsmDeviceClass:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmDeviceClass:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmDeviceClass:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDeviceClass_caller getSharedInstance] command_getRsmDeviceClass:caller_params];
}

+(void) getRsmDeviceClass_in_thread:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDeviceClass_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmDeviceClass:) withObject:caller_params];
}

+(void) getRsmDeviceClass_in_UI_thread:(rb_BarcodeChainway_getRsmDeviceClass_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDeviceClass_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmDeviceClass:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmDeviceClass_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmDeviceClass"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmDeviceClass_caller getRsmDeviceClass_in_thread:[rb_BarcodeChainway_getRsmDeviceClass_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmDeviceClass_caller getRsmDeviceClass:[rb_BarcodeChainway_getRsmDeviceClass_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmDeviceClass(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmDeviceClass_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmDeviceClass(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmDeviceClass_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBatteryStatus_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBatteryStatus_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBatteryStatus_caller_params* par = [[[rb_BarcodeChainway_getRsmBatteryStatus_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBatteryStatus_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBatteryStatus_caller*) getSharedInstance;
+(void) getRsmBatteryStatus:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params;
+(void) getRsmBatteryStatus_in_thread:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params;
+(void) getRsmBatteryStatus_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBatteryStatus_caller* our_BarcodeChainway_getRsmBatteryStatus_caller = nil;

@implementation rb_BarcodeChainway_getRsmBatteryStatus_caller

+(rb_BarcodeChainway_getRsmBatteryStatus_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBatteryStatus_caller == nil) {
        our_BarcodeChainway_getRsmBatteryStatus_caller = [[rb_BarcodeChainway_getRsmBatteryStatus_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBatteryStatus_caller;
}

-(void) command_getRsmBatteryStatus:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBatteryStatus:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBatteryStatus:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryStatus_caller getSharedInstance] command_getRsmBatteryStatus:caller_params];
}

+(void) getRsmBatteryStatus_in_thread:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryStatus_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBatteryStatus:) withObject:caller_params];
}

+(void) getRsmBatteryStatus_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryStatus_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBatteryStatus:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBatteryStatus_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBatteryStatus"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBatteryStatus_caller getRsmBatteryStatus_in_thread:[rb_BarcodeChainway_getRsmBatteryStatus_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBatteryStatus_caller getRsmBatteryStatus:[rb_BarcodeChainway_getRsmBatteryStatus_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBatteryStatus(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBatteryStatus_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBatteryStatus(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBatteryStatus_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBatteryCapacity_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBatteryCapacity_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBatteryCapacity_caller_params* par = [[[rb_BarcodeChainway_getRsmBatteryCapacity_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBatteryCapacity_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBatteryCapacity_caller*) getSharedInstance;
+(void) getRsmBatteryCapacity:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params;
+(void) getRsmBatteryCapacity_in_thread:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params;
+(void) getRsmBatteryCapacity_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBatteryCapacity_caller* our_BarcodeChainway_getRsmBatteryCapacity_caller = nil;

@implementation rb_BarcodeChainway_getRsmBatteryCapacity_caller

+(rb_BarcodeChainway_getRsmBatteryCapacity_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBatteryCapacity_caller == nil) {
        our_BarcodeChainway_getRsmBatteryCapacity_caller = [[rb_BarcodeChainway_getRsmBatteryCapacity_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBatteryCapacity_caller;
}

-(void) command_getRsmBatteryCapacity:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBatteryCapacity:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBatteryCapacity:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryCapacity_caller getSharedInstance] command_getRsmBatteryCapacity:caller_params];
}

+(void) getRsmBatteryCapacity_in_thread:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryCapacity_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBatteryCapacity:) withObject:caller_params];
}

+(void) getRsmBatteryCapacity_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryCapacity_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryCapacity_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBatteryCapacity:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBatteryCapacity_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBatteryCapacity"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBatteryCapacity_caller getRsmBatteryCapacity_in_thread:[rb_BarcodeChainway_getRsmBatteryCapacity_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBatteryCapacity_caller getRsmBatteryCapacity:[rb_BarcodeChainway_getRsmBatteryCapacity_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBatteryCapacity(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBatteryCapacity_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBatteryCapacity(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBatteryCapacity_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBatteryId_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBatteryId_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBatteryId_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBatteryId_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBatteryId_caller_params* par = [[[rb_BarcodeChainway_getRsmBatteryId_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBatteryId_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBatteryId_caller*) getSharedInstance;
+(void) getRsmBatteryId:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params;
+(void) getRsmBatteryId_in_thread:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params;
+(void) getRsmBatteryId_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBatteryId_caller* our_BarcodeChainway_getRsmBatteryId_caller = nil;

@implementation rb_BarcodeChainway_getRsmBatteryId_caller

+(rb_BarcodeChainway_getRsmBatteryId_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBatteryId_caller == nil) {
        our_BarcodeChainway_getRsmBatteryId_caller = [[rb_BarcodeChainway_getRsmBatteryId_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBatteryId_caller;
}

-(void) command_getRsmBatteryId:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBatteryId:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBatteryId:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryId_caller getSharedInstance] command_getRsmBatteryId:caller_params];
}

+(void) getRsmBatteryId_in_thread:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryId_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBatteryId:) withObject:caller_params];
}

+(void) getRsmBatteryId_in_UI_thread:(rb_BarcodeChainway_getRsmBatteryId_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBatteryId_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBatteryId:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBatteryId_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBatteryId"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBatteryId_caller getRsmBatteryId_in_thread:[rb_BarcodeChainway_getRsmBatteryId_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBatteryId_caller getRsmBatteryId:[rb_BarcodeChainway_getRsmBatteryId_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBatteryId(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBatteryId_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBatteryId(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBatteryId_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothAuthentication_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller*) getSharedInstance;
+(void) getRsmBluetoothAuthentication:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params;
+(void) getRsmBluetoothAuthentication_in_thread:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params;
+(void) getRsmBluetoothAuthentication_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothAuthentication_caller* our_BarcodeChainway_getRsmBluetoothAuthentication_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothAuthentication_caller

+(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothAuthentication_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothAuthentication_caller = [[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothAuthentication_caller;
}

-(void) command_getRsmBluetoothAuthentication:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothAuthentication:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothAuthentication:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller getSharedInstance] command_getRsmBluetoothAuthentication:caller_params];
}

+(void) getRsmBluetoothAuthentication_in_thread:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothAuthentication:) withObject:caller_params];
}

+(void) getRsmBluetoothAuthentication_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothAuthentication:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothAuthentication_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothAuthentication"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothAuthentication_caller getRsmBluetoothAuthentication_in_thread:[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothAuthentication_caller getRsmBluetoothAuthentication:[rb_BarcodeChainway_getRsmBluetoothAuthentication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothAuthentication(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothAuthentication_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothAuthentication(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothAuthentication_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothAuthentication_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller*) getSharedInstance;
+(void) setRsmBluetoothAuthentication:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params;
+(void) setRsmBluetoothAuthentication_in_thread:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params;
+(void) setRsmBluetoothAuthentication_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothAuthentication_caller* our_BarcodeChainway_setRsmBluetoothAuthentication_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothAuthentication_caller

+(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothAuthentication_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothAuthentication_caller = [[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothAuthentication_caller;
}

-(void) command_setRsmBluetoothAuthentication:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothAuthentication:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothAuthentication:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller getSharedInstance] command_setRsmBluetoothAuthentication:caller_params];
}

+(void) setRsmBluetoothAuthentication_in_thread:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothAuthentication:) withObject:caller_params];
}

+(void) setRsmBluetoothAuthentication_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothAuthentication:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothAuthentication_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothAuthentication="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothAuthentication_caller setRsmBluetoothAuthentication_in_thread:[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothAuthentication_caller setRsmBluetoothAuthentication:[rb_BarcodeChainway_setRsmBluetoothAuthentication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothAuthentication(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothAuthentication_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothAuthentication(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothAuthentication_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothEncryption_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothEncryption_caller*) getSharedInstance;
+(void) getRsmBluetoothEncryption:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params;
+(void) getRsmBluetoothEncryption_in_thread:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params;
+(void) getRsmBluetoothEncryption_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothEncryption_caller* our_BarcodeChainway_getRsmBluetoothEncryption_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothEncryption_caller

+(rb_BarcodeChainway_getRsmBluetoothEncryption_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothEncryption_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothEncryption_caller = [[rb_BarcodeChainway_getRsmBluetoothEncryption_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothEncryption_caller;
}

-(void) command_getRsmBluetoothEncryption:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothEncryption:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothEncryption:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothEncryption_caller getSharedInstance] command_getRsmBluetoothEncryption:caller_params];
}

+(void) getRsmBluetoothEncryption_in_thread:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothEncryption_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothEncryption:) withObject:caller_params];
}

+(void) getRsmBluetoothEncryption_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothEncryption_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothEncryption:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothEncryption_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothEncryption"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothEncryption_caller getRsmBluetoothEncryption_in_thread:[rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothEncryption_caller getRsmBluetoothEncryption:[rb_BarcodeChainway_getRsmBluetoothEncryption_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothEncryption(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothEncryption_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothEncryption(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothEncryption_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothEncryption_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothEncryption_caller*) getSharedInstance;
+(void) setRsmBluetoothEncryption:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params;
+(void) setRsmBluetoothEncryption_in_thread:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params;
+(void) setRsmBluetoothEncryption_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothEncryption_caller* our_BarcodeChainway_setRsmBluetoothEncryption_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothEncryption_caller

+(rb_BarcodeChainway_setRsmBluetoothEncryption_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothEncryption_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothEncryption_caller = [[rb_BarcodeChainway_setRsmBluetoothEncryption_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothEncryption_caller;
}

-(void) command_setRsmBluetoothEncryption:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothEncryption:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothEncryption:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothEncryption_caller getSharedInstance] command_setRsmBluetoothEncryption:caller_params];
}

+(void) setRsmBluetoothEncryption_in_thread:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothEncryption_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothEncryption:) withObject:caller_params];
}

+(void) setRsmBluetoothEncryption_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothEncryption_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothEncryption:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothEncryption_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothEncryption="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothEncryption_caller setRsmBluetoothEncryption_in_thread:[rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothEncryption_caller setRsmBluetoothEncryption:[rb_BarcodeChainway_setRsmBluetoothEncryption_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothEncryption(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothEncryption_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothEncryption(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothEncryption_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothPinCode_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothPinCode_caller*) getSharedInstance;
+(void) getRsmBluetoothPinCode:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params;
+(void) getRsmBluetoothPinCode_in_thread:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params;
+(void) getRsmBluetoothPinCode_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothPinCode_caller* our_BarcodeChainway_getRsmBluetoothPinCode_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothPinCode_caller

+(rb_BarcodeChainway_getRsmBluetoothPinCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothPinCode_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothPinCode_caller = [[rb_BarcodeChainway_getRsmBluetoothPinCode_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothPinCode_caller;
}

-(void) command_getRsmBluetoothPinCode:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothPinCode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothPinCode:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCode_caller getSharedInstance] command_getRsmBluetoothPinCode:caller_params];
}

+(void) getRsmBluetoothPinCode_in_thread:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCode_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothPinCode:) withObject:caller_params];
}

+(void) getRsmBluetoothPinCode_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothPinCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothPinCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothPinCode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothPinCode_caller getRsmBluetoothPinCode_in_thread:[rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothPinCode_caller getRsmBluetoothPinCode:[rb_BarcodeChainway_getRsmBluetoothPinCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothPinCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothPinCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothPinCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothPinCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothPinCode_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothPinCode_caller*) getSharedInstance;
+(void) setRsmBluetoothPinCode:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params;
+(void) setRsmBluetoothPinCode_in_thread:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params;
+(void) setRsmBluetoothPinCode_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothPinCode_caller* our_BarcodeChainway_setRsmBluetoothPinCode_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothPinCode_caller

+(rb_BarcodeChainway_setRsmBluetoothPinCode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothPinCode_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothPinCode_caller = [[rb_BarcodeChainway_setRsmBluetoothPinCode_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothPinCode_caller;
}

-(void) command_setRsmBluetoothPinCode:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothPinCode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothPinCode:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCode_caller getSharedInstance] command_setRsmBluetoothPinCode:caller_params];
}

+(void) setRsmBluetoothPinCode_in_thread:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCode_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothPinCode:) withObject:caller_params];
}

+(void) setRsmBluetoothPinCode_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothPinCode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothPinCode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothPinCode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothPinCode_caller setRsmBluetoothPinCode_in_thread:[rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothPinCode_caller setRsmBluetoothPinCode:[rb_BarcodeChainway_setRsmBluetoothPinCode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothPinCode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothPinCode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothPinCode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothPinCode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller*) getSharedInstance;
+(void) getRsmBluetoothPinCodeType:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params;
+(void) getRsmBluetoothPinCodeType_in_thread:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params;
+(void) getRsmBluetoothPinCodeType_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller* our_BarcodeChainway_getRsmBluetoothPinCodeType_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller

+(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothPinCodeType_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothPinCodeType_caller = [[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothPinCodeType_caller;
}

-(void) command_getRsmBluetoothPinCodeType:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothPinCodeType:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothPinCodeType:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller getSharedInstance] command_getRsmBluetoothPinCodeType:caller_params];
}

+(void) getRsmBluetoothPinCodeType_in_thread:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothPinCodeType:) withObject:caller_params];
}

+(void) getRsmBluetoothPinCodeType_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothPinCodeType:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothPinCodeType_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothPinCodeType"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller getRsmBluetoothPinCodeType_in_thread:[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller getRsmBluetoothPinCodeType:[rb_BarcodeChainway_getRsmBluetoothPinCodeType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothPinCodeType(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothPinCodeType_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothPinCodeType(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothPinCodeType_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller*) getSharedInstance;
+(void) setRsmBluetoothPinCodeType:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params;
+(void) setRsmBluetoothPinCodeType_in_thread:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params;
+(void) setRsmBluetoothPinCodeType_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller* our_BarcodeChainway_setRsmBluetoothPinCodeType_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller

+(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothPinCodeType_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothPinCodeType_caller = [[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothPinCodeType_caller;
}

-(void) command_setRsmBluetoothPinCodeType:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothPinCodeType:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothPinCodeType:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller getSharedInstance] command_setRsmBluetoothPinCodeType:caller_params];
}

+(void) setRsmBluetoothPinCodeType_in_thread:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothPinCodeType:) withObject:caller_params];
}

+(void) setRsmBluetoothPinCodeType_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothPinCodeType:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothPinCodeType_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothPinCodeType="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller setRsmBluetoothPinCodeType_in_thread:[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller setRsmBluetoothPinCodeType:[rb_BarcodeChainway_setRsmBluetoothPinCodeType_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothPinCodeType(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothPinCodeType_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothPinCodeType(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothPinCodeType_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller*) getSharedInstance;
+(void) getRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params;
+(void) getRsmBluetoothReconnectionAttempts_in_thread:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params;
+(void) getRsmBluetoothReconnectionAttempts_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller* our_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller

+(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller = [[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller;
}

-(void) command_getRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothReconnectionAttempts:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller getSharedInstance] command_getRsmBluetoothReconnectionAttempts:caller_params];
}

+(void) getRsmBluetoothReconnectionAttempts_in_thread:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothReconnectionAttempts:) withObject:caller_params];
}

+(void) getRsmBluetoothReconnectionAttempts_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothReconnectionAttempts:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothReconnectionAttempts"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller getRsmBluetoothReconnectionAttempts_in_thread:[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller getRsmBluetoothReconnectionAttempts:[rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothReconnectionAttempts(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothReconnectionAttempts_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller*) getSharedInstance;
+(void) setRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params;
+(void) setRsmBluetoothReconnectionAttempts_in_thread:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params;
+(void) setRsmBluetoothReconnectionAttempts_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller* our_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller

+(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller = [[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller;
}

-(void) command_setRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothReconnectionAttempts:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothReconnectionAttempts:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller getSharedInstance] command_setRsmBluetoothReconnectionAttempts:caller_params];
}

+(void) setRsmBluetoothReconnectionAttempts_in_thread:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothReconnectionAttempts:) withObject:caller_params];
}

+(void) setRsmBluetoothReconnectionAttempts_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothReconnectionAttempts:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothReconnectionAttempts="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller setRsmBluetoothReconnectionAttempts_in_thread:[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller setRsmBluetoothReconnectionAttempts:[rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothReconnectionAttempts(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothReconnectionAttempts_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller*) getSharedInstance;
+(void) getRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;
+(void) getRsmBluetoothBeepOnReconnectAttempt_in_thread:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;
+(void) getRsmBluetoothBeepOnReconnectAttempt_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller* our_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller

+(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller = [[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller;
}

-(void) command_getRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothBeepOnReconnectAttempt:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] command_getRsmBluetoothBeepOnReconnectAttempt:caller_params];
}

+(void) getRsmBluetoothBeepOnReconnectAttempt_in_thread:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothBeepOnReconnectAttempt:) withObject:caller_params];
}

+(void) getRsmBluetoothBeepOnReconnectAttempt_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothBeepOnReconnectAttempt:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothBeepOnReconnectAttempt"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller getRsmBluetoothBeepOnReconnectAttempt_in_thread:[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller getRsmBluetoothBeepOnReconnectAttempt:[rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothBeepOnReconnectAttempt(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothBeepOnReconnectAttempt_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller*) getSharedInstance;
+(void) setRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;
+(void) setRsmBluetoothBeepOnReconnectAttempt_in_thread:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;
+(void) setRsmBluetoothBeepOnReconnectAttempt_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller* our_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller

+(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller = [[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller;
}

-(void) command_setRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothBeepOnReconnectAttempt:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothBeepOnReconnectAttempt:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] command_setRsmBluetoothBeepOnReconnectAttempt:caller_params];
}

+(void) setRsmBluetoothBeepOnReconnectAttempt_in_thread:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothBeepOnReconnectAttempt:) withObject:caller_params];
}

+(void) setRsmBluetoothBeepOnReconnectAttempt_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothBeepOnReconnectAttempt:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothBeepOnReconnectAttempt="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller setRsmBluetoothBeepOnReconnectAttempt_in_thread:[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller setRsmBluetoothBeepOnReconnectAttempt:[rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothBeepOnReconnectAttempt(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothBeepOnReconnectAttempt_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller*) getSharedInstance;
+(void) getRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params;
+(void) getRsmBluetoothHidAutoReconnect_in_thread:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params;
+(void) getRsmBluetoothHidAutoReconnect_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller* our_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller

+(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller = [[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller;
}

-(void) command_getRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothHidAutoReconnect:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller getSharedInstance] command_getRsmBluetoothHidAutoReconnect:caller_params];
}

+(void) getRsmBluetoothHidAutoReconnect_in_thread:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothHidAutoReconnect:) withObject:caller_params];
}

+(void) getRsmBluetoothHidAutoReconnect_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothHidAutoReconnect:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothHidAutoReconnect"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller getRsmBluetoothHidAutoReconnect_in_thread:[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller getRsmBluetoothHidAutoReconnect:[rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothHidAutoReconnect(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothHidAutoReconnect_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller*) getSharedInstance;
+(void) setRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params;
+(void) setRsmBluetoothHidAutoReconnect_in_thread:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params;
+(void) setRsmBluetoothHidAutoReconnect_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller* our_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller

+(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller = [[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller;
}

-(void) command_setRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothHidAutoReconnect:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothHidAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller getSharedInstance] command_setRsmBluetoothHidAutoReconnect:caller_params];
}

+(void) setRsmBluetoothHidAutoReconnect_in_thread:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothHidAutoReconnect:) withObject:caller_params];
}

+(void) setRsmBluetoothHidAutoReconnect_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothHidAutoReconnect:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothHidAutoReconnect="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller setRsmBluetoothHidAutoReconnect_in_thread:[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller setRsmBluetoothHidAutoReconnect:[rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothHidAutoReconnect(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothHidAutoReconnect_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller*) getSharedInstance;
+(void) getRsmBluetoothFriendlyName:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params;
+(void) getRsmBluetoothFriendlyName_in_thread:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params;
+(void) getRsmBluetoothFriendlyName_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller* our_BarcodeChainway_getRsmBluetoothFriendlyName_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller

+(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothFriendlyName_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothFriendlyName_caller = [[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothFriendlyName_caller;
}

-(void) command_getRsmBluetoothFriendlyName:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothFriendlyName:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothFriendlyName:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller getSharedInstance] command_getRsmBluetoothFriendlyName:caller_params];
}

+(void) getRsmBluetoothFriendlyName_in_thread:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothFriendlyName:) withObject:caller_params];
}

+(void) getRsmBluetoothFriendlyName_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothFriendlyName:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothFriendlyName_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothFriendlyName"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller getRsmBluetoothFriendlyName_in_thread:[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller getRsmBluetoothFriendlyName:[rb_BarcodeChainway_getRsmBluetoothFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothFriendlyName(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothFriendlyName_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothFriendlyName(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothFriendlyName_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller*) getSharedInstance;
+(void) setRsmBluetoothFriendlyName:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params;
+(void) setRsmBluetoothFriendlyName_in_thread:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params;
+(void) setRsmBluetoothFriendlyName_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller* our_BarcodeChainway_setRsmBluetoothFriendlyName_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller

+(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothFriendlyName_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothFriendlyName_caller = [[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothFriendlyName_caller;
}

-(void) command_setRsmBluetoothFriendlyName:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothFriendlyName:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothFriendlyName:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller getSharedInstance] command_setRsmBluetoothFriendlyName:caller_params];
}

+(void) setRsmBluetoothFriendlyName_in_thread:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothFriendlyName:) withObject:caller_params];
}

+(void) setRsmBluetoothFriendlyName_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothFriendlyName:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothFriendlyName_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothFriendlyName="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller setRsmBluetoothFriendlyName_in_thread:[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller setRsmBluetoothFriendlyName:[rb_BarcodeChainway_setRsmBluetoothFriendlyName_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothFriendlyName(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothFriendlyName_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothFriendlyName(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothFriendlyName_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller*) getSharedInstance;
+(void) getRsmBluetoothInquiryMode:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params;
+(void) getRsmBluetoothInquiryMode_in_thread:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params;
+(void) getRsmBluetoothInquiryMode_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller* our_BarcodeChainway_getRsmBluetoothInquiryMode_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller

+(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothInquiryMode_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothInquiryMode_caller = [[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothInquiryMode_caller;
}

-(void) command_getRsmBluetoothInquiryMode:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothInquiryMode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothInquiryMode:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller getSharedInstance] command_getRsmBluetoothInquiryMode:caller_params];
}

+(void) getRsmBluetoothInquiryMode_in_thread:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothInquiryMode:) withObject:caller_params];
}

+(void) getRsmBluetoothInquiryMode_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothInquiryMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothInquiryMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothInquiryMode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller getRsmBluetoothInquiryMode_in_thread:[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller getRsmBluetoothInquiryMode:[rb_BarcodeChainway_getRsmBluetoothInquiryMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothInquiryMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothInquiryMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothInquiryMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothInquiryMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller*) getSharedInstance;
+(void) setRsmBluetoothInquiryMode:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params;
+(void) setRsmBluetoothInquiryMode_in_thread:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params;
+(void) setRsmBluetoothInquiryMode_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller* our_BarcodeChainway_setRsmBluetoothInquiryMode_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller

+(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothInquiryMode_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothInquiryMode_caller = [[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothInquiryMode_caller;
}

-(void) command_setRsmBluetoothInquiryMode:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothInquiryMode:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothInquiryMode:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller getSharedInstance] command_setRsmBluetoothInquiryMode:caller_params];
}

+(void) setRsmBluetoothInquiryMode_in_thread:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothInquiryMode:) withObject:caller_params];
}

+(void) setRsmBluetoothInquiryMode_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothInquiryMode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothInquiryMode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothInquiryMode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller setRsmBluetoothInquiryMode_in_thread:[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller setRsmBluetoothInquiryMode:[rb_BarcodeChainway_setRsmBluetoothInquiryMode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothInquiryMode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothInquiryMode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothInquiryMode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothInquiryMode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params* par = [[[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller*) getSharedInstance;
+(void) getRsmBluetoothAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params;
+(void) getRsmBluetoothAutoReconnect_in_thread:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params;
+(void) getRsmBluetoothAutoReconnect_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller* our_BarcodeChainway_getRsmBluetoothAutoReconnect_caller = nil;

@implementation rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller

+(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmBluetoothAutoReconnect_caller == nil) {
        our_BarcodeChainway_getRsmBluetoothAutoReconnect_caller = [[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmBluetoothAutoReconnect_caller;
}

-(void) command_getRsmBluetoothAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmBluetoothAutoReconnect:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmBluetoothAutoReconnect:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller getSharedInstance] command_getRsmBluetoothAutoReconnect:caller_params];
}

+(void) getRsmBluetoothAutoReconnect_in_thread:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmBluetoothAutoReconnect:) withObject:caller_params];
}

+(void) getRsmBluetoothAutoReconnect_in_UI_thread:(rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmBluetoothAutoReconnect:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmBluetoothAutoReconnect_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothAutoReconnect"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller getRsmBluetoothAutoReconnect_in_thread:[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller getRsmBluetoothAutoReconnect:[rb_BarcodeChainway_getRsmBluetoothAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmBluetoothAutoReconnect(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmBluetoothAutoReconnect_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmBluetoothAutoReconnect(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmBluetoothAutoReconnect_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params* par = [[[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller*) getSharedInstance;
+(void) setRsmBluetoothAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params;
+(void) setRsmBluetoothAutoReconnect_in_thread:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params;
+(void) setRsmBluetoothAutoReconnect_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller* our_BarcodeChainway_setRsmBluetoothAutoReconnect_caller = nil;

@implementation rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller

+(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmBluetoothAutoReconnect_caller == nil) {
        our_BarcodeChainway_setRsmBluetoothAutoReconnect_caller = [[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmBluetoothAutoReconnect_caller;
}

-(void) command_setRsmBluetoothAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmBluetoothAutoReconnect:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmBluetoothAutoReconnect:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller getSharedInstance] command_setRsmBluetoothAutoReconnect:caller_params];
}

+(void) setRsmBluetoothAutoReconnect_in_thread:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmBluetoothAutoReconnect:) withObject:caller_params];
}

+(void) setRsmBluetoothAutoReconnect_in_UI_thread:(rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmBluetoothAutoReconnect:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmBluetoothAutoReconnect_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmBluetoothAutoReconnect="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller setRsmBluetoothAutoReconnect_in_thread:[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller setRsmBluetoothAutoReconnect:[rb_BarcodeChainway_setRsmBluetoothAutoReconnect_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmBluetoothAutoReconnect(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmBluetoothAutoReconnect_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmBluetoothAutoReconnect(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmBluetoothAutoReconnect_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params* par = [[[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller*) getSharedInstance;
+(void) getRsmForceSavePairingBarcode:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params;
+(void) getRsmForceSavePairingBarcode_in_thread:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params;
+(void) getRsmForceSavePairingBarcode_in_UI_thread:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller* our_BarcodeChainway_getRsmForceSavePairingBarcode_caller = nil;

@implementation rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller

+(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmForceSavePairingBarcode_caller == nil) {
        our_BarcodeChainway_getRsmForceSavePairingBarcode_caller = [[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmForceSavePairingBarcode_caller;
}

-(void) command_getRsmForceSavePairingBarcode:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmForceSavePairingBarcode:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmForceSavePairingBarcode:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller getSharedInstance] command_getRsmForceSavePairingBarcode:caller_params];
}

+(void) getRsmForceSavePairingBarcode_in_thread:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmForceSavePairingBarcode:) withObject:caller_params];
}

+(void) getRsmForceSavePairingBarcode_in_UI_thread:(rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmForceSavePairingBarcode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmForceSavePairingBarcode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmForceSavePairingBarcode"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller getRsmForceSavePairingBarcode_in_thread:[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller getRsmForceSavePairingBarcode:[rb_BarcodeChainway_getRsmForceSavePairingBarcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmForceSavePairingBarcode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmForceSavePairingBarcode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmForceSavePairingBarcode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmForceSavePairingBarcode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params* par = [[[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller*) getSharedInstance;
+(void) setRsmForceSavePairingBarcode:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params;
+(void) setRsmForceSavePairingBarcode_in_thread:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params;
+(void) setRsmForceSavePairingBarcode_in_UI_thread:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller* our_BarcodeChainway_setRsmForceSavePairingBarcode_caller = nil;

@implementation rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller

+(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmForceSavePairingBarcode_caller == nil) {
        our_BarcodeChainway_setRsmForceSavePairingBarcode_caller = [[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmForceSavePairingBarcode_caller;
}

-(void) command_setRsmForceSavePairingBarcode:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmForceSavePairingBarcode:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmForceSavePairingBarcode:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller getSharedInstance] command_setRsmForceSavePairingBarcode:caller_params];
}

+(void) setRsmForceSavePairingBarcode_in_thread:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmForceSavePairingBarcode:) withObject:caller_params];
}

+(void) setRsmForceSavePairingBarcode_in_UI_thread:(rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmForceSavePairingBarcode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmForceSavePairingBarcode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmForceSavePairingBarcode="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller setRsmForceSavePairingBarcode_in_thread:[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller setRsmForceSavePairingBarcode:[rb_BarcodeChainway_setRsmForceSavePairingBarcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmForceSavePairingBarcode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmForceSavePairingBarcode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmForceSavePairingBarcode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmForceSavePairingBarcode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params* par = [[[rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmLowBatteryIndication_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmLowBatteryIndication_caller*) getSharedInstance;
+(void) getRsmLowBatteryIndication:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params;
+(void) getRsmLowBatteryIndication_in_thread:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params;
+(void) getRsmLowBatteryIndication_in_UI_thread:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmLowBatteryIndication_caller* our_BarcodeChainway_getRsmLowBatteryIndication_caller = nil;

@implementation rb_BarcodeChainway_getRsmLowBatteryIndication_caller

+(rb_BarcodeChainway_getRsmLowBatteryIndication_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmLowBatteryIndication_caller == nil) {
        our_BarcodeChainway_getRsmLowBatteryIndication_caller = [[rb_BarcodeChainway_getRsmLowBatteryIndication_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmLowBatteryIndication_caller;
}

-(void) command_getRsmLowBatteryIndication:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmLowBatteryIndication:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmLowBatteryIndication:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndication_caller getSharedInstance] command_getRsmLowBatteryIndication:caller_params];
}

+(void) getRsmLowBatteryIndication_in_thread:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndication_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmLowBatteryIndication:) withObject:caller_params];
}

+(void) getRsmLowBatteryIndication_in_UI_thread:(rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndication_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmLowBatteryIndication:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmLowBatteryIndication_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmLowBatteryIndication"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmLowBatteryIndication_caller getRsmLowBatteryIndication_in_thread:[rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmLowBatteryIndication_caller getRsmLowBatteryIndication:[rb_BarcodeChainway_getRsmLowBatteryIndication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmLowBatteryIndication(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmLowBatteryIndication_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmLowBatteryIndication(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmLowBatteryIndication_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params* par = [[[rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmLowBatteryIndication_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmLowBatteryIndication_caller*) getSharedInstance;
+(void) setRsmLowBatteryIndication:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params;
+(void) setRsmLowBatteryIndication_in_thread:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params;
+(void) setRsmLowBatteryIndication_in_UI_thread:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmLowBatteryIndication_caller* our_BarcodeChainway_setRsmLowBatteryIndication_caller = nil;

@implementation rb_BarcodeChainway_setRsmLowBatteryIndication_caller

+(rb_BarcodeChainway_setRsmLowBatteryIndication_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmLowBatteryIndication_caller == nil) {
        our_BarcodeChainway_setRsmLowBatteryIndication_caller = [[rb_BarcodeChainway_setRsmLowBatteryIndication_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmLowBatteryIndication_caller;
}

-(void) command_setRsmLowBatteryIndication:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmLowBatteryIndication:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmLowBatteryIndication:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndication_caller getSharedInstance] command_setRsmLowBatteryIndication:caller_params];
}

+(void) setRsmLowBatteryIndication_in_thread:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndication_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmLowBatteryIndication:) withObject:caller_params];
}

+(void) setRsmLowBatteryIndication_in_UI_thread:(rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndication_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmLowBatteryIndication:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmLowBatteryIndication_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmLowBatteryIndication="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmLowBatteryIndication_caller setRsmLowBatteryIndication_in_thread:[rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmLowBatteryIndication_caller setRsmLowBatteryIndication:[rb_BarcodeChainway_setRsmLowBatteryIndication_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmLowBatteryIndication(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmLowBatteryIndication_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmLowBatteryIndication(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmLowBatteryIndication_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params* par = [[[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller*) getSharedInstance;
+(void) getRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params;
+(void) getRsmLowBatteryIndicationCycle_in_thread:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params;
+(void) getRsmLowBatteryIndicationCycle_in_UI_thread:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller* our_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller = nil;

@implementation rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller

+(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller == nil) {
        our_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller = [[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller;
}

-(void) command_getRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmLowBatteryIndicationCycle:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller getSharedInstance] command_getRsmLowBatteryIndicationCycle:caller_params];
}

+(void) getRsmLowBatteryIndicationCycle_in_thread:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmLowBatteryIndicationCycle:) withObject:caller_params];
}

+(void) getRsmLowBatteryIndicationCycle_in_UI_thread:(rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmLowBatteryIndicationCycle:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmLowBatteryIndicationCycle"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller getRsmLowBatteryIndicationCycle_in_thread:[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller getRsmLowBatteryIndicationCycle:[rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmLowBatteryIndicationCycle(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmLowBatteryIndicationCycle(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmLowBatteryIndicationCycle_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params* par = [[[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller*) getSharedInstance;
+(void) setRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params;
+(void) setRsmLowBatteryIndicationCycle_in_thread:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params;
+(void) setRsmLowBatteryIndicationCycle_in_UI_thread:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller* our_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller = nil;

@implementation rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller

+(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller == nil) {
        our_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller = [[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller;
}

-(void) command_setRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmLowBatteryIndicationCycle:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmLowBatteryIndicationCycle:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller getSharedInstance] command_setRsmLowBatteryIndicationCycle:caller_params];
}

+(void) setRsmLowBatteryIndicationCycle_in_thread:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmLowBatteryIndicationCycle:) withObject:caller_params];
}

+(void) setRsmLowBatteryIndicationCycle_in_UI_thread:(rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmLowBatteryIndicationCycle:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmLowBatteryIndicationCycle="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller setRsmLowBatteryIndicationCycle_in_thread:[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller setRsmLowBatteryIndicationCycle:[rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmLowBatteryIndicationCycle(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmLowBatteryIndicationCycle(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmLowBatteryIndicationCycle_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmScanLineWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmScanLineWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmScanLineWidth_caller_params* par = [[[rb_BarcodeChainway_getRsmScanLineWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmScanLineWidth_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmScanLineWidth_caller*) getSharedInstance;
+(void) getRsmScanLineWidth:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params;
+(void) getRsmScanLineWidth_in_thread:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params;
+(void) getRsmScanLineWidth_in_UI_thread:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmScanLineWidth_caller* our_BarcodeChainway_getRsmScanLineWidth_caller = nil;

@implementation rb_BarcodeChainway_getRsmScanLineWidth_caller

+(rb_BarcodeChainway_getRsmScanLineWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmScanLineWidth_caller == nil) {
        our_BarcodeChainway_getRsmScanLineWidth_caller = [[rb_BarcodeChainway_getRsmScanLineWidth_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmScanLineWidth_caller;
}

-(void) command_getRsmScanLineWidth:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmScanLineWidth:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmScanLineWidth:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanLineWidth_caller getSharedInstance] command_getRsmScanLineWidth:caller_params];
}

+(void) getRsmScanLineWidth_in_thread:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanLineWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmScanLineWidth:) withObject:caller_params];
}

+(void) getRsmScanLineWidth_in_UI_thread:(rb_BarcodeChainway_getRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanLineWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmScanLineWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmScanLineWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmScanLineWidth"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmScanLineWidth_caller getRsmScanLineWidth_in_thread:[rb_BarcodeChainway_getRsmScanLineWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmScanLineWidth_caller getRsmScanLineWidth:[rb_BarcodeChainway_getRsmScanLineWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmScanLineWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmScanLineWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmScanLineWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmScanLineWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmScanLineWidth_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmScanLineWidth_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmScanLineWidth_caller_params* par = [[[rb_BarcodeChainway_setRsmScanLineWidth_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmScanLineWidth_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmScanLineWidth_caller*) getSharedInstance;
+(void) setRsmScanLineWidth:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params;
+(void) setRsmScanLineWidth_in_thread:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params;
+(void) setRsmScanLineWidth_in_UI_thread:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmScanLineWidth_caller* our_BarcodeChainway_setRsmScanLineWidth_caller = nil;

@implementation rb_BarcodeChainway_setRsmScanLineWidth_caller

+(rb_BarcodeChainway_setRsmScanLineWidth_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmScanLineWidth_caller == nil) {
        our_BarcodeChainway_setRsmScanLineWidth_caller = [[rb_BarcodeChainway_setRsmScanLineWidth_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmScanLineWidth_caller;
}

-(void) command_setRsmScanLineWidth:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmScanLineWidth:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmScanLineWidth:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanLineWidth_caller getSharedInstance] command_setRsmScanLineWidth:caller_params];
}

+(void) setRsmScanLineWidth_in_thread:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanLineWidth_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmScanLineWidth:) withObject:caller_params];
}

+(void) setRsmScanLineWidth_in_UI_thread:(rb_BarcodeChainway_setRsmScanLineWidth_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanLineWidth_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmScanLineWidth:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmScanLineWidth_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmScanLineWidth="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmScanLineWidth_caller setRsmScanLineWidth_in_thread:[rb_BarcodeChainway_setRsmScanLineWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmScanLineWidth_caller setRsmScanLineWidth:[rb_BarcodeChainway_setRsmScanLineWidth_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmScanLineWidth(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmScanLineWidth_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmScanLineWidth(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmScanLineWidth_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmGoodScansDelay_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmGoodScansDelay_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmGoodScansDelay_caller_params* par = [[[rb_BarcodeChainway_getRsmGoodScansDelay_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmGoodScansDelay_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmGoodScansDelay_caller*) getSharedInstance;
+(void) getRsmGoodScansDelay:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params;
+(void) getRsmGoodScansDelay_in_thread:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params;
+(void) getRsmGoodScansDelay_in_UI_thread:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmGoodScansDelay_caller* our_BarcodeChainway_getRsmGoodScansDelay_caller = nil;

@implementation rb_BarcodeChainway_getRsmGoodScansDelay_caller

+(rb_BarcodeChainway_getRsmGoodScansDelay_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmGoodScansDelay_caller == nil) {
        our_BarcodeChainway_getRsmGoodScansDelay_caller = [[rb_BarcodeChainway_getRsmGoodScansDelay_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmGoodScansDelay_caller;
}

-(void) command_getRsmGoodScansDelay:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmGoodScansDelay:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmGoodScansDelay:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmGoodScansDelay_caller getSharedInstance] command_getRsmGoodScansDelay:caller_params];
}

+(void) getRsmGoodScansDelay_in_thread:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmGoodScansDelay_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmGoodScansDelay:) withObject:caller_params];
}

+(void) getRsmGoodScansDelay_in_UI_thread:(rb_BarcodeChainway_getRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmGoodScansDelay_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmGoodScansDelay:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmGoodScansDelay_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmGoodScansDelay"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmGoodScansDelay_caller getRsmGoodScansDelay_in_thread:[rb_BarcodeChainway_getRsmGoodScansDelay_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmGoodScansDelay_caller getRsmGoodScansDelay:[rb_BarcodeChainway_getRsmGoodScansDelay_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmGoodScansDelay(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmGoodScansDelay_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmGoodScansDelay(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmGoodScansDelay_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmGoodScansDelay_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmGoodScansDelay_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmGoodScansDelay_caller_params* par = [[[rb_BarcodeChainway_setRsmGoodScansDelay_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmGoodScansDelay_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmGoodScansDelay_caller*) getSharedInstance;
+(void) setRsmGoodScansDelay:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params;
+(void) setRsmGoodScansDelay_in_thread:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params;
+(void) setRsmGoodScansDelay_in_UI_thread:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmGoodScansDelay_caller* our_BarcodeChainway_setRsmGoodScansDelay_caller = nil;

@implementation rb_BarcodeChainway_setRsmGoodScansDelay_caller

+(rb_BarcodeChainway_setRsmGoodScansDelay_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmGoodScansDelay_caller == nil) {
        our_BarcodeChainway_setRsmGoodScansDelay_caller = [[rb_BarcodeChainway_setRsmGoodScansDelay_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmGoodScansDelay_caller;
}

-(void) command_setRsmGoodScansDelay:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmGoodScansDelay:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmGoodScansDelay:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmGoodScansDelay_caller getSharedInstance] command_setRsmGoodScansDelay:caller_params];
}

+(void) setRsmGoodScansDelay_in_thread:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmGoodScansDelay_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmGoodScansDelay:) withObject:caller_params];
}

+(void) setRsmGoodScansDelay_in_UI_thread:(rb_BarcodeChainway_setRsmGoodScansDelay_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmGoodScansDelay_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmGoodScansDelay:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmGoodScansDelay_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmGoodScansDelay="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmGoodScansDelay_caller setRsmGoodScansDelay_in_thread:[rb_BarcodeChainway_setRsmGoodScansDelay_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmGoodScansDelay_caller setRsmGoodScansDelay:[rb_BarcodeChainway_setRsmGoodScansDelay_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmGoodScansDelay(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmGoodScansDelay_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmGoodScansDelay(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmGoodScansDelay_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmDecodeFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmDecodeFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmDecodeFeedback_caller_params* par = [[[rb_BarcodeChainway_getRsmDecodeFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmDecodeFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmDecodeFeedback_caller*) getSharedInstance;
+(void) getRsmDecodeFeedback:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params;
+(void) getRsmDecodeFeedback_in_thread:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params;
+(void) getRsmDecodeFeedback_in_UI_thread:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmDecodeFeedback_caller* our_BarcodeChainway_getRsmDecodeFeedback_caller = nil;

@implementation rb_BarcodeChainway_getRsmDecodeFeedback_caller

+(rb_BarcodeChainway_getRsmDecodeFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmDecodeFeedback_caller == nil) {
        our_BarcodeChainway_getRsmDecodeFeedback_caller = [[rb_BarcodeChainway_getRsmDecodeFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmDecodeFeedback_caller;
}

-(void) command_getRsmDecodeFeedback:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmDecodeFeedback:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmDecodeFeedback:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDecodeFeedback_caller getSharedInstance] command_getRsmDecodeFeedback:caller_params];
}

+(void) getRsmDecodeFeedback_in_thread:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDecodeFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmDecodeFeedback:) withObject:caller_params];
}

+(void) getRsmDecodeFeedback_in_UI_thread:(rb_BarcodeChainway_getRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmDecodeFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmDecodeFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmDecodeFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmDecodeFeedback"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmDecodeFeedback_caller getRsmDecodeFeedback_in_thread:[rb_BarcodeChainway_getRsmDecodeFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmDecodeFeedback_caller getRsmDecodeFeedback:[rb_BarcodeChainway_getRsmDecodeFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmDecodeFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmDecodeFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmDecodeFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmDecodeFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmDecodeFeedback_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmDecodeFeedback_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmDecodeFeedback_caller_params* par = [[[rb_BarcodeChainway_setRsmDecodeFeedback_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmDecodeFeedback_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmDecodeFeedback_caller*) getSharedInstance;
+(void) setRsmDecodeFeedback:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params;
+(void) setRsmDecodeFeedback_in_thread:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params;
+(void) setRsmDecodeFeedback_in_UI_thread:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmDecodeFeedback_caller* our_BarcodeChainway_setRsmDecodeFeedback_caller = nil;

@implementation rb_BarcodeChainway_setRsmDecodeFeedback_caller

+(rb_BarcodeChainway_setRsmDecodeFeedback_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmDecodeFeedback_caller == nil) {
        our_BarcodeChainway_setRsmDecodeFeedback_caller = [[rb_BarcodeChainway_setRsmDecodeFeedback_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmDecodeFeedback_caller;
}

-(void) command_setRsmDecodeFeedback:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmDecodeFeedback:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmDecodeFeedback:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmDecodeFeedback_caller getSharedInstance] command_setRsmDecodeFeedback:caller_params];
}

+(void) setRsmDecodeFeedback_in_thread:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmDecodeFeedback_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmDecodeFeedback:) withObject:caller_params];
}

+(void) setRsmDecodeFeedback_in_UI_thread:(rb_BarcodeChainway_setRsmDecodeFeedback_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmDecodeFeedback_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmDecodeFeedback:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmDecodeFeedback_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmDecodeFeedback="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmDecodeFeedback_caller setRsmDecodeFeedback_in_thread:[rb_BarcodeChainway_setRsmDecodeFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmDecodeFeedback_caller setRsmDecodeFeedback:[rb_BarcodeChainway_setRsmDecodeFeedback_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmDecodeFeedback(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmDecodeFeedback_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmDecodeFeedback(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmDecodeFeedback_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params* par = [[[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller*) getSharedInstance;
+(void) getRsmIgnoreCode128Usps:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params;
+(void) getRsmIgnoreCode128Usps_in_thread:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params;
+(void) getRsmIgnoreCode128Usps_in_UI_thread:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller* our_BarcodeChainway_getRsmIgnoreCode128Usps_caller = nil;

@implementation rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller

+(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmIgnoreCode128Usps_caller == nil) {
        our_BarcodeChainway_getRsmIgnoreCode128Usps_caller = [[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmIgnoreCode128Usps_caller;
}

-(void) command_getRsmIgnoreCode128Usps:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmIgnoreCode128Usps:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmIgnoreCode128Usps:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller getSharedInstance] command_getRsmIgnoreCode128Usps:caller_params];
}

+(void) getRsmIgnoreCode128Usps_in_thread:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmIgnoreCode128Usps:) withObject:caller_params];
}

+(void) getRsmIgnoreCode128Usps_in_UI_thread:(rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmIgnoreCode128Usps:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmIgnoreCode128Usps_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmIgnoreCode128Usps"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller getRsmIgnoreCode128Usps_in_thread:[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller getRsmIgnoreCode128Usps:[rb_BarcodeChainway_getRsmIgnoreCode128Usps_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmIgnoreCode128Usps(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmIgnoreCode128Usps_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmIgnoreCode128Usps(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmIgnoreCode128Usps_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params* par = [[[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller*) getSharedInstance;
+(void) setRsmIgnoreCode128Usps:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params;
+(void) setRsmIgnoreCode128Usps_in_thread:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params;
+(void) setRsmIgnoreCode128Usps_in_UI_thread:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller* our_BarcodeChainway_setRsmIgnoreCode128Usps_caller = nil;

@implementation rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller

+(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmIgnoreCode128Usps_caller == nil) {
        our_BarcodeChainway_setRsmIgnoreCode128Usps_caller = [[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmIgnoreCode128Usps_caller;
}

-(void) command_setRsmIgnoreCode128Usps:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmIgnoreCode128Usps:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmIgnoreCode128Usps:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller getSharedInstance] command_setRsmIgnoreCode128Usps:caller_params];
}

+(void) setRsmIgnoreCode128Usps_in_thread:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmIgnoreCode128Usps:) withObject:caller_params];
}

+(void) setRsmIgnoreCode128Usps_in_UI_thread:(rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmIgnoreCode128Usps:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmIgnoreCode128Usps_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmIgnoreCode128Usps="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller setRsmIgnoreCode128Usps_in_thread:[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller setRsmIgnoreCode128Usps:[rb_BarcodeChainway_setRsmIgnoreCode128Usps_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmIgnoreCode128Usps(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmIgnoreCode128Usps_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmIgnoreCode128Usps(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmIgnoreCode128Usps_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params* par = [[[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmScanTriggerWakeup_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller*) getSharedInstance;
+(void) getRsmScanTriggerWakeup:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params;
+(void) getRsmScanTriggerWakeup_in_thread:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params;
+(void) getRsmScanTriggerWakeup_in_UI_thread:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmScanTriggerWakeup_caller* our_BarcodeChainway_getRsmScanTriggerWakeup_caller = nil;

@implementation rb_BarcodeChainway_getRsmScanTriggerWakeup_caller

+(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmScanTriggerWakeup_caller == nil) {
        our_BarcodeChainway_getRsmScanTriggerWakeup_caller = [[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmScanTriggerWakeup_caller;
}

-(void) command_getRsmScanTriggerWakeup:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmScanTriggerWakeup:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmScanTriggerWakeup:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller getSharedInstance] command_getRsmScanTriggerWakeup:caller_params];
}

+(void) getRsmScanTriggerWakeup_in_thread:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmScanTriggerWakeup:) withObject:caller_params];
}

+(void) getRsmScanTriggerWakeup_in_UI_thread:(rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmScanTriggerWakeup:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmScanTriggerWakeup_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmScanTriggerWakeup"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmScanTriggerWakeup_caller getRsmScanTriggerWakeup_in_thread:[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmScanTriggerWakeup_caller getRsmScanTriggerWakeup:[rb_BarcodeChainway_getRsmScanTriggerWakeup_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmScanTriggerWakeup(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmScanTriggerWakeup_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmScanTriggerWakeup(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmScanTriggerWakeup_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params* par = [[[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmScanTriggerWakeup_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller*) getSharedInstance;
+(void) setRsmScanTriggerWakeup:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params;
+(void) setRsmScanTriggerWakeup_in_thread:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params;
+(void) setRsmScanTriggerWakeup_in_UI_thread:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmScanTriggerWakeup_caller* our_BarcodeChainway_setRsmScanTriggerWakeup_caller = nil;

@implementation rb_BarcodeChainway_setRsmScanTriggerWakeup_caller

+(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmScanTriggerWakeup_caller == nil) {
        our_BarcodeChainway_setRsmScanTriggerWakeup_caller = [[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmScanTriggerWakeup_caller;
}

-(void) command_setRsmScanTriggerWakeup:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmScanTriggerWakeup:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmScanTriggerWakeup:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller getSharedInstance] command_setRsmScanTriggerWakeup:caller_params];
}

+(void) setRsmScanTriggerWakeup_in_thread:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmScanTriggerWakeup:) withObject:caller_params];
}

+(void) setRsmScanTriggerWakeup_in_UI_thread:(rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmScanTriggerWakeup:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmScanTriggerWakeup_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmScanTriggerWakeup="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmScanTriggerWakeup_caller setRsmScanTriggerWakeup_in_thread:[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmScanTriggerWakeup_caller setRsmScanTriggerWakeup:[rb_BarcodeChainway_setRsmScanTriggerWakeup_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmScanTriggerWakeup(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmScanTriggerWakeup_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmScanTriggerWakeup(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmScanTriggerWakeup_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmMems_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmMems_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmMems_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmMems_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmMems_caller_params* par = [[[rb_BarcodeChainway_getRsmMems_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmMems_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmMems_caller*) getSharedInstance;
+(void) getRsmMems:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params;
+(void) getRsmMems_in_thread:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params;
+(void) getRsmMems_in_UI_thread:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmMems_caller* our_BarcodeChainway_getRsmMems_caller = nil;

@implementation rb_BarcodeChainway_getRsmMems_caller

+(rb_BarcodeChainway_getRsmMems_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmMems_caller == nil) {
        our_BarcodeChainway_getRsmMems_caller = [[rb_BarcodeChainway_getRsmMems_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmMems_caller;
}

-(void) command_getRsmMems:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmMems:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmMems:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmMems_caller getSharedInstance] command_getRsmMems:caller_params];
}

+(void) getRsmMems_in_thread:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmMems_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmMems:) withObject:caller_params];
}

+(void) getRsmMems_in_UI_thread:(rb_BarcodeChainway_getRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmMems_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmMems:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmMems_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmMems"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmMems_caller getRsmMems_in_thread:[rb_BarcodeChainway_getRsmMems_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmMems_caller getRsmMems:[rb_BarcodeChainway_getRsmMems_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmMems(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmMems_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmMems(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmMems_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmMems_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmMems_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmMems_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmMems_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmMems_caller_params* par = [[[rb_BarcodeChainway_setRsmMems_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmMems_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmMems_caller*) getSharedInstance;
+(void) setRsmMems:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params;
+(void) setRsmMems_in_thread:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params;
+(void) setRsmMems_in_UI_thread:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmMems_caller* our_BarcodeChainway_setRsmMems_caller = nil;

@implementation rb_BarcodeChainway_setRsmMems_caller

+(rb_BarcodeChainway_setRsmMems_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmMems_caller == nil) {
        our_BarcodeChainway_setRsmMems_caller = [[rb_BarcodeChainway_setRsmMems_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmMems_caller;
}

-(void) command_setRsmMems:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmMems:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmMems:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmMems_caller getSharedInstance] command_setRsmMems:caller_params];
}

+(void) setRsmMems_in_thread:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmMems_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmMems:) withObject:caller_params];
}

+(void) setRsmMems_in_UI_thread:(rb_BarcodeChainway_setRsmMems_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmMems_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmMems:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmMems_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmMems="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmMems_caller setRsmMems_in_thread:[rb_BarcodeChainway_setRsmMems_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmMems_caller setRsmMems:[rb_BarcodeChainway_setRsmMems_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmMems(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmMems_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmMems(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmMems_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmProximityEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmProximityEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmProximityEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmProximityEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmProximityEnable_caller_params* par = [[[rb_BarcodeChainway_getRsmProximityEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmProximityEnable_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmProximityEnable_caller*) getSharedInstance;
+(void) getRsmProximityEnable:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params;
+(void) getRsmProximityEnable_in_thread:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params;
+(void) getRsmProximityEnable_in_UI_thread:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmProximityEnable_caller* our_BarcodeChainway_getRsmProximityEnable_caller = nil;

@implementation rb_BarcodeChainway_getRsmProximityEnable_caller

+(rb_BarcodeChainway_getRsmProximityEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmProximityEnable_caller == nil) {
        our_BarcodeChainway_getRsmProximityEnable_caller = [[rb_BarcodeChainway_getRsmProximityEnable_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmProximityEnable_caller;
}

-(void) command_getRsmProximityEnable:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmProximityEnable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmProximityEnable:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityEnable_caller getSharedInstance] command_getRsmProximityEnable:caller_params];
}

+(void) getRsmProximityEnable_in_thread:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmProximityEnable:) withObject:caller_params];
}

+(void) getRsmProximityEnable_in_UI_thread:(rb_BarcodeChainway_getRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmProximityEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmProximityEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityEnable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmProximityEnable_caller getRsmProximityEnable_in_thread:[rb_BarcodeChainway_getRsmProximityEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmProximityEnable_caller getRsmProximityEnable:[rb_BarcodeChainway_getRsmProximityEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmProximityEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmProximityEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmProximityEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmProximityEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmProximityEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmProximityEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmProximityEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmProximityEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmProximityEnable_caller_params* par = [[[rb_BarcodeChainway_setRsmProximityEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmProximityEnable_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmProximityEnable_caller*) getSharedInstance;
+(void) setRsmProximityEnable:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params;
+(void) setRsmProximityEnable_in_thread:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params;
+(void) setRsmProximityEnable_in_UI_thread:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmProximityEnable_caller* our_BarcodeChainway_setRsmProximityEnable_caller = nil;

@implementation rb_BarcodeChainway_setRsmProximityEnable_caller

+(rb_BarcodeChainway_setRsmProximityEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmProximityEnable_caller == nil) {
        our_BarcodeChainway_setRsmProximityEnable_caller = [[rb_BarcodeChainway_setRsmProximityEnable_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmProximityEnable_caller;
}

-(void) command_setRsmProximityEnable:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmProximityEnable:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmProximityEnable:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityEnable_caller getSharedInstance] command_setRsmProximityEnable:caller_params];
}

+(void) setRsmProximityEnable_in_thread:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmProximityEnable:) withObject:caller_params];
}

+(void) setRsmProximityEnable_in_UI_thread:(rb_BarcodeChainway_setRsmProximityEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmProximityEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmProximityEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityEnable="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmProximityEnable_caller setRsmProximityEnable_in_thread:[rb_BarcodeChainway_setRsmProximityEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmProximityEnable_caller setRsmProximityEnable:[rb_BarcodeChainway_setRsmProximityEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmProximityEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmProximityEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmProximityEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmProximityEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmProximityContinuous_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmProximityContinuous_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmProximityContinuous_caller_params* par = [[[rb_BarcodeChainway_getRsmProximityContinuous_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmProximityContinuous_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmProximityContinuous_caller*) getSharedInstance;
+(void) getRsmProximityContinuous:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params;
+(void) getRsmProximityContinuous_in_thread:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params;
+(void) getRsmProximityContinuous_in_UI_thread:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmProximityContinuous_caller* our_BarcodeChainway_getRsmProximityContinuous_caller = nil;

@implementation rb_BarcodeChainway_getRsmProximityContinuous_caller

+(rb_BarcodeChainway_getRsmProximityContinuous_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmProximityContinuous_caller == nil) {
        our_BarcodeChainway_getRsmProximityContinuous_caller = [[rb_BarcodeChainway_getRsmProximityContinuous_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmProximityContinuous_caller;
}

-(void) command_getRsmProximityContinuous:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmProximityContinuous:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmProximityContinuous:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityContinuous_caller getSharedInstance] command_getRsmProximityContinuous:caller_params];
}

+(void) getRsmProximityContinuous_in_thread:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityContinuous_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmProximityContinuous:) withObject:caller_params];
}

+(void) getRsmProximityContinuous_in_UI_thread:(rb_BarcodeChainway_getRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityContinuous_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmProximityContinuous:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmProximityContinuous_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityContinuous"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmProximityContinuous_caller getRsmProximityContinuous_in_thread:[rb_BarcodeChainway_getRsmProximityContinuous_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmProximityContinuous_caller getRsmProximityContinuous:[rb_BarcodeChainway_getRsmProximityContinuous_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmProximityContinuous(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmProximityContinuous_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmProximityContinuous(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmProximityContinuous_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmProximityContinuous_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmProximityContinuous_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmProximityContinuous_caller_params* par = [[[rb_BarcodeChainway_setRsmProximityContinuous_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmProximityContinuous_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmProximityContinuous_caller*) getSharedInstance;
+(void) setRsmProximityContinuous:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params;
+(void) setRsmProximityContinuous_in_thread:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params;
+(void) setRsmProximityContinuous_in_UI_thread:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmProximityContinuous_caller* our_BarcodeChainway_setRsmProximityContinuous_caller = nil;

@implementation rb_BarcodeChainway_setRsmProximityContinuous_caller

+(rb_BarcodeChainway_setRsmProximityContinuous_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmProximityContinuous_caller == nil) {
        our_BarcodeChainway_setRsmProximityContinuous_caller = [[rb_BarcodeChainway_setRsmProximityContinuous_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmProximityContinuous_caller;
}

-(void) command_setRsmProximityContinuous:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmProximityContinuous:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmProximityContinuous:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityContinuous_caller getSharedInstance] command_setRsmProximityContinuous:caller_params];
}

+(void) setRsmProximityContinuous_in_thread:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityContinuous_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmProximityContinuous:) withObject:caller_params];
}

+(void) setRsmProximityContinuous_in_UI_thread:(rb_BarcodeChainway_setRsmProximityContinuous_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityContinuous_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmProximityContinuous:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmProximityContinuous_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityContinuous="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmProximityContinuous_caller setRsmProximityContinuous_in_thread:[rb_BarcodeChainway_setRsmProximityContinuous_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmProximityContinuous_caller setRsmProximityContinuous:[rb_BarcodeChainway_setRsmProximityContinuous_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmProximityContinuous(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmProximityContinuous_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmProximityContinuous(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmProximityContinuous_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmProximityDistance_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmProximityDistance_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmProximityDistance_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmProximityDistance_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmProximityDistance_caller_params* par = [[[rb_BarcodeChainway_getRsmProximityDistance_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmProximityDistance_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmProximityDistance_caller*) getSharedInstance;
+(void) getRsmProximityDistance:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params;
+(void) getRsmProximityDistance_in_thread:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params;
+(void) getRsmProximityDistance_in_UI_thread:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmProximityDistance_caller* our_BarcodeChainway_getRsmProximityDistance_caller = nil;

@implementation rb_BarcodeChainway_getRsmProximityDistance_caller

+(rb_BarcodeChainway_getRsmProximityDistance_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmProximityDistance_caller == nil) {
        our_BarcodeChainway_getRsmProximityDistance_caller = [[rb_BarcodeChainway_getRsmProximityDistance_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmProximityDistance_caller;
}

-(void) command_getRsmProximityDistance:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmProximityDistance:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmProximityDistance:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityDistance_caller getSharedInstance] command_getRsmProximityDistance:caller_params];
}

+(void) getRsmProximityDistance_in_thread:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityDistance_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmProximityDistance:) withObject:caller_params];
}

+(void) getRsmProximityDistance_in_UI_thread:(rb_BarcodeChainway_getRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmProximityDistance_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmProximityDistance:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmProximityDistance_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityDistance"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmProximityDistance_caller getRsmProximityDistance_in_thread:[rb_BarcodeChainway_getRsmProximityDistance_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmProximityDistance_caller getRsmProximityDistance:[rb_BarcodeChainway_getRsmProximityDistance_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmProximityDistance(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmProximityDistance_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmProximityDistance(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmProximityDistance_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmProximityDistance_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmProximityDistance_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmProximityDistance_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmProximityDistance_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmProximityDistance_caller_params* par = [[[rb_BarcodeChainway_setRsmProximityDistance_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmProximityDistance_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmProximityDistance_caller*) getSharedInstance;
+(void) setRsmProximityDistance:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params;
+(void) setRsmProximityDistance_in_thread:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params;
+(void) setRsmProximityDistance_in_UI_thread:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmProximityDistance_caller* our_BarcodeChainway_setRsmProximityDistance_caller = nil;

@implementation rb_BarcodeChainway_setRsmProximityDistance_caller

+(rb_BarcodeChainway_setRsmProximityDistance_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmProximityDistance_caller == nil) {
        our_BarcodeChainway_setRsmProximityDistance_caller = [[rb_BarcodeChainway_setRsmProximityDistance_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmProximityDistance_caller;
}

-(void) command_setRsmProximityDistance:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmProximityDistance:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmProximityDistance:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityDistance_caller getSharedInstance] command_setRsmProximityDistance:caller_params];
}

+(void) setRsmProximityDistance_in_thread:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityDistance_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmProximityDistance:) withObject:caller_params];
}

+(void) setRsmProximityDistance_in_UI_thread:(rb_BarcodeChainway_setRsmProximityDistance_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmProximityDistance_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmProximityDistance:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmProximityDistance_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmProximityDistance="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmProximityDistance_caller setRsmProximityDistance_in_thread:[rb_BarcodeChainway_setRsmProximityDistance_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmProximityDistance_caller setRsmProximityDistance:[rb_BarcodeChainway_setRsmProximityDistance_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmProximityDistance(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmProximityDistance_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmProximityDistance(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmProximityDistance_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmPagingEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmPagingEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmPagingEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmPagingEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmPagingEnable_caller_params* par = [[[rb_BarcodeChainway_getRsmPagingEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmPagingEnable_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmPagingEnable_caller*) getSharedInstance;
+(void) getRsmPagingEnable:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params;
+(void) getRsmPagingEnable_in_thread:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params;
+(void) getRsmPagingEnable_in_UI_thread:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmPagingEnable_caller* our_BarcodeChainway_getRsmPagingEnable_caller = nil;

@implementation rb_BarcodeChainway_getRsmPagingEnable_caller

+(rb_BarcodeChainway_getRsmPagingEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmPagingEnable_caller == nil) {
        our_BarcodeChainway_getRsmPagingEnable_caller = [[rb_BarcodeChainway_getRsmPagingEnable_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmPagingEnable_caller;
}

-(void) command_getRsmPagingEnable:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmPagingEnable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmPagingEnable:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingEnable_caller getSharedInstance] command_getRsmPagingEnable:caller_params];
}

+(void) getRsmPagingEnable_in_thread:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmPagingEnable:) withObject:caller_params];
}

+(void) getRsmPagingEnable_in_UI_thread:(rb_BarcodeChainway_getRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmPagingEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmPagingEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmPagingEnable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmPagingEnable_caller getRsmPagingEnable_in_thread:[rb_BarcodeChainway_getRsmPagingEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmPagingEnable_caller getRsmPagingEnable:[rb_BarcodeChainway_getRsmPagingEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmPagingEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmPagingEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmPagingEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmPagingEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmPagingEnable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmPagingEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmPagingEnable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmPagingEnable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmPagingEnable_caller_params* par = [[[rb_BarcodeChainway_setRsmPagingEnable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmPagingEnable_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmPagingEnable_caller*) getSharedInstance;
+(void) setRsmPagingEnable:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params;
+(void) setRsmPagingEnable_in_thread:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params;
+(void) setRsmPagingEnable_in_UI_thread:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmPagingEnable_caller* our_BarcodeChainway_setRsmPagingEnable_caller = nil;

@implementation rb_BarcodeChainway_setRsmPagingEnable_caller

+(rb_BarcodeChainway_setRsmPagingEnable_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmPagingEnable_caller == nil) {
        our_BarcodeChainway_setRsmPagingEnable_caller = [[rb_BarcodeChainway_setRsmPagingEnable_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmPagingEnable_caller;
}

-(void) command_setRsmPagingEnable:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmPagingEnable:(BOOL)[((NSNumber*)[params objectAtIndex:0]) boolValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmPagingEnable:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingEnable_caller getSharedInstance] command_setRsmPagingEnable:caller_params];
}

+(void) setRsmPagingEnable_in_thread:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingEnable_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmPagingEnable:) withObject:caller_params];
}

+(void) setRsmPagingEnable_in_UI_thread:(rb_BarcodeChainway_setRsmPagingEnable_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingEnable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmPagingEnable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmPagingEnable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmPagingEnable="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmPagingEnable_caller setRsmPagingEnable_in_thread:[rb_BarcodeChainway_setRsmPagingEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmPagingEnable_caller setRsmPagingEnable:[rb_BarcodeChainway_setRsmPagingEnable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmPagingEnable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmPagingEnable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmPagingEnable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmPagingEnable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params* par = [[[rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getRsmPagingBeepSequence_caller : NSObject {

}
+(rb_BarcodeChainway_getRsmPagingBeepSequence_caller*) getSharedInstance;
+(void) getRsmPagingBeepSequence:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params;
+(void) getRsmPagingBeepSequence_in_thread:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params;
+(void) getRsmPagingBeepSequence_in_UI_thread:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getRsmPagingBeepSequence_caller* our_BarcodeChainway_getRsmPagingBeepSequence_caller = nil;

@implementation rb_BarcodeChainway_getRsmPagingBeepSequence_caller

+(rb_BarcodeChainway_getRsmPagingBeepSequence_caller*) getSharedInstance {
    if (our_BarcodeChainway_getRsmPagingBeepSequence_caller == nil) {
        our_BarcodeChainway_getRsmPagingBeepSequence_caller = [[rb_BarcodeChainway_getRsmPagingBeepSequence_caller alloc] init];
    }
    return our_BarcodeChainway_getRsmPagingBeepSequence_caller;
}

-(void) command_getRsmPagingBeepSequence:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getRsmPagingBeepSequence:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getRsmPagingBeepSequence:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingBeepSequence_caller getSharedInstance] command_getRsmPagingBeepSequence:caller_params];
}

+(void) getRsmPagingBeepSequence_in_thread:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingBeepSequence_caller getSharedInstance] performSelectorInBackground:@selector(command_getRsmPagingBeepSequence:) withObject:caller_params];
}

+(void) getRsmPagingBeepSequence_in_UI_thread:(rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_getRsmPagingBeepSequence_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getRsmPagingBeepSequence:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getRsmPagingBeepSequence_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmPagingBeepSequence"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getRsmPagingBeepSequence_caller getRsmPagingBeepSequence_in_thread:[rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getRsmPagingBeepSequence_caller getRsmPagingBeepSequence:[rb_BarcodeChainway_getRsmPagingBeepSequence_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getRsmPagingBeepSequence(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getRsmPagingBeepSequence_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getRsmPagingBeepSequence(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getRsmPagingBeepSequence_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params* par = [[[rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setRsmPagingBeepSequence_caller : NSObject {

}
+(rb_BarcodeChainway_setRsmPagingBeepSequence_caller*) getSharedInstance;
+(void) setRsmPagingBeepSequence:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params;
+(void) setRsmPagingBeepSequence_in_thread:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params;
+(void) setRsmPagingBeepSequence_in_UI_thread:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setRsmPagingBeepSequence_caller* our_BarcodeChainway_setRsmPagingBeepSequence_caller = nil;

@implementation rb_BarcodeChainway_setRsmPagingBeepSequence_caller

+(rb_BarcodeChainway_setRsmPagingBeepSequence_caller*) getSharedInstance {
    if (our_BarcodeChainway_setRsmPagingBeepSequence_caller == nil) {
        our_BarcodeChainway_setRsmPagingBeepSequence_caller = [[rb_BarcodeChainway_setRsmPagingBeepSequence_caller alloc] init];
    }
    return our_BarcodeChainway_setRsmPagingBeepSequence_caller;
}

-(void) command_setRsmPagingBeepSequence:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setRsmPagingBeepSequence:(int)[((NSNumber*)[params objectAtIndex:0]) intValue] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setRsmPagingBeepSequence:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingBeepSequence_caller getSharedInstance] command_setRsmPagingBeepSequence:caller_params];
}

+(void) setRsmPagingBeepSequence_in_thread:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingBeepSequence_caller getSharedInstance] performSelectorInBackground:@selector(command_setRsmPagingBeepSequence:) withObject:caller_params];
}

+(void) setRsmPagingBeepSequence_in_UI_thread:(rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params*)caller_params {
    [[rb_BarcodeChainway_setRsmPagingBeepSequence_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setRsmPagingBeepSequence:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setRsmPagingBeepSequence_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::rsmPagingBeepSequence="];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setRsmPagingBeepSequence_caller setRsmPagingBeepSequence_in_thread:[rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setRsmPagingBeepSequence_caller setRsmPagingBeepSequence:[rb_BarcodeChainway_setRsmPagingBeepSequence_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setRsmPagingBeepSequence(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setRsmPagingBeepSequence_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setRsmPagingBeepSequence(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setRsmPagingBeepSequence_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_enumerate_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainwaySingleton> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_enumerate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainwaySingleton>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_enumerate_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_enumerate_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainwaySingleton>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_enumerate_caller_params* par = [[[rb_BarcodeChainway_enumerate_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_enumerate_caller : NSObject {

}
+(rb_BarcodeChainway_enumerate_caller*) getSharedInstance;
+(void) enumerate:(rb_BarcodeChainway_enumerate_caller_params*)caller_params;
+(void) enumerate_in_thread:(rb_BarcodeChainway_enumerate_caller_params*)caller_params;
+(void) enumerate_in_UI_thread:(rb_BarcodeChainway_enumerate_caller_params*)caller_params;

@end

static rb_BarcodeChainway_enumerate_caller* our_BarcodeChainway_enumerate_caller = nil;

@implementation rb_BarcodeChainway_enumerate_caller

+(rb_BarcodeChainway_enumerate_caller*) getSharedInstance {
    if (our_BarcodeChainway_enumerate_caller == nil) {
        our_BarcodeChainway_enumerate_caller = [[rb_BarcodeChainway_enumerate_caller alloc] init];
    }
    return our_BarcodeChainway_enumerate_caller;
}

-(void) command_enumerate:(rb_BarcodeChainway_enumerate_caller_params*)caller_params {

    id<IBarcodeChainwaySingleton> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem enumerate:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) enumerate:(rb_BarcodeChainway_enumerate_caller_params*)caller_params {
    [[rb_BarcodeChainway_enumerate_caller getSharedInstance] command_enumerate:caller_params];
}

+(void) enumerate_in_thread:(rb_BarcodeChainway_enumerate_caller_params*)caller_params {
    [[rb_BarcodeChainway_enumerate_caller getSharedInstance] performSelectorInBackground:@selector(command_enumerate:) withObject:caller_params];
}

+(void) enumerate_in_UI_thread:(rb_BarcodeChainway_enumerate_caller_params*)caller_params {
    [[rb_BarcodeChainway_enumerate_caller getSharedInstance] performSelectorOnMainThread:@selector(command_enumerate:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_enumerate_Obj(int argc, VALUE *argv, id<IBarcodeChainwaySingleton>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::enumerate"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    [methodResult enableObjectCreationModeWithRubyClassPath:@"Rho::BarcodeChainway"];


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_enumerate_caller enumerate_in_thread:[rb_BarcodeChainway_enumerate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_enumerate_caller enumerate:[rb_BarcodeChainway_enumerate_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_s_BarcodeChainway_enumerate(int argc, VALUE *argv) {

    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];
    return rb_BarcodeChainway_enumerate_Obj(argc, argv, singleton);

}







@interface rb_BarcodeChainway_enable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_enable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_enable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_enable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_enable_caller_params* par = [[[rb_BarcodeChainway_enable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_enable_caller : NSObject {

}
+(rb_BarcodeChainway_enable_caller*) getSharedInstance;
+(void) enable:(rb_BarcodeChainway_enable_caller_params*)caller_params;
+(void) enable_in_thread:(rb_BarcodeChainway_enable_caller_params*)caller_params;
+(void) enable_in_UI_thread:(rb_BarcodeChainway_enable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_enable_caller* our_BarcodeChainway_enable_caller = nil;

@implementation rb_BarcodeChainway_enable_caller

+(rb_BarcodeChainway_enable_caller*) getSharedInstance {
    if (our_BarcodeChainway_enable_caller == nil) {
        our_BarcodeChainway_enable_caller = [[rb_BarcodeChainway_enable_caller alloc] init];
    }
    return our_BarcodeChainway_enable_caller;
}

-(void) command_enable:(rb_BarcodeChainway_enable_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem enable:(NSDictionary*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) enable:(rb_BarcodeChainway_enable_caller_params*)caller_params {
    [[rb_BarcodeChainway_enable_caller getSharedInstance] command_enable:caller_params];
}

+(void) enable_in_thread:(rb_BarcodeChainway_enable_caller_params*)caller_params {
    [[rb_BarcodeChainway_enable_caller getSharedInstance] performSelectorInBackground:@selector(command_enable:) withObject:caller_params];
}

+(void) enable_in_UI_thread:(rb_BarcodeChainway_enable_caller_params*)caller_params {
    [[rb_BarcodeChainway_enable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_enable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_enable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::enable"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_enable_caller enable_in_thread:[rb_BarcodeChainway_enable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_enable_caller enable:[rb_BarcodeChainway_enable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_enable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_enable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_enable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_enable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_registerBluetoothStatus_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_registerBluetoothStatus_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_registerBluetoothStatus_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_registerBluetoothStatus_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_registerBluetoothStatus_caller_params* par = [[[rb_BarcodeChainway_registerBluetoothStatus_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_registerBluetoothStatus_caller : NSObject {

}
+(rb_BarcodeChainway_registerBluetoothStatus_caller*) getSharedInstance;
+(void) registerBluetoothStatus:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params;
+(void) registerBluetoothStatus_in_thread:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params;
+(void) registerBluetoothStatus_in_UI_thread:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params;

@end

static rb_BarcodeChainway_registerBluetoothStatus_caller* our_BarcodeChainway_registerBluetoothStatus_caller = nil;

@implementation rb_BarcodeChainway_registerBluetoothStatus_caller

+(rb_BarcodeChainway_registerBluetoothStatus_caller*) getSharedInstance {
    if (our_BarcodeChainway_registerBluetoothStatus_caller == nil) {
        our_BarcodeChainway_registerBluetoothStatus_caller = [[rb_BarcodeChainway_registerBluetoothStatus_caller alloc] init];
    }
    return our_BarcodeChainway_registerBluetoothStatus_caller;
}

-(void) command_registerBluetoothStatus:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem registerBluetoothStatus:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) registerBluetoothStatus:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_registerBluetoothStatus_caller getSharedInstance] command_registerBluetoothStatus:caller_params];
}

+(void) registerBluetoothStatus_in_thread:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_registerBluetoothStatus_caller getSharedInstance] performSelectorInBackground:@selector(command_registerBluetoothStatus:) withObject:caller_params];
}

+(void) registerBluetoothStatus_in_UI_thread:(rb_BarcodeChainway_registerBluetoothStatus_caller_params*)caller_params {
    [[rb_BarcodeChainway_registerBluetoothStatus_caller getSharedInstance] performSelectorOnMainThread:@selector(command_registerBluetoothStatus:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_registerBluetoothStatus_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::registerBluetoothStatus"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_registerBluetoothStatus_caller registerBluetoothStatus_in_thread:[rb_BarcodeChainway_registerBluetoothStatus_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_registerBluetoothStatus_caller registerBluetoothStatus:[rb_BarcodeChainway_registerBluetoothStatus_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_registerBluetoothStatus(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_registerBluetoothStatus_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_registerBluetoothStatus(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_registerBluetoothStatus_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_start_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_start_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_start_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_start_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_start_caller_params* par = [[[rb_BarcodeChainway_start_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_start_caller : NSObject {

}
+(rb_BarcodeChainway_start_caller*) getSharedInstance;
+(void) start:(rb_BarcodeChainway_start_caller_params*)caller_params;
+(void) start_in_thread:(rb_BarcodeChainway_start_caller_params*)caller_params;
+(void) start_in_UI_thread:(rb_BarcodeChainway_start_caller_params*)caller_params;

@end

static rb_BarcodeChainway_start_caller* our_BarcodeChainway_start_caller = nil;

@implementation rb_BarcodeChainway_start_caller

+(rb_BarcodeChainway_start_caller*) getSharedInstance {
    if (our_BarcodeChainway_start_caller == nil) {
        our_BarcodeChainway_start_caller = [[rb_BarcodeChainway_start_caller alloc] init];
    }
    return our_BarcodeChainway_start_caller;
}

-(void) command_start:(rb_BarcodeChainway_start_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem start:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) start:(rb_BarcodeChainway_start_caller_params*)caller_params {
    [[rb_BarcodeChainway_start_caller getSharedInstance] command_start:caller_params];
}

+(void) start_in_thread:(rb_BarcodeChainway_start_caller_params*)caller_params {
    [[rb_BarcodeChainway_start_caller getSharedInstance] performSelectorInBackground:@selector(command_start:) withObject:caller_params];
}

+(void) start_in_UI_thread:(rb_BarcodeChainway_start_caller_params*)caller_params {
    [[rb_BarcodeChainway_start_caller getSharedInstance] performSelectorOnMainThread:@selector(command_start:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_start_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::start"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_start_caller start_in_thread:[rb_BarcodeChainway_start_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_start_caller start:[rb_BarcodeChainway_start_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_start(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_start_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_start(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_start_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_stop_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_stop_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_stop_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_stop_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_stop_caller_params* par = [[[rb_BarcodeChainway_stop_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_stop_caller : NSObject {

}
+(rb_BarcodeChainway_stop_caller*) getSharedInstance;
+(void) stop:(rb_BarcodeChainway_stop_caller_params*)caller_params;
+(void) stop_in_thread:(rb_BarcodeChainway_stop_caller_params*)caller_params;
+(void) stop_in_UI_thread:(rb_BarcodeChainway_stop_caller_params*)caller_params;

@end

static rb_BarcodeChainway_stop_caller* our_BarcodeChainway_stop_caller = nil;

@implementation rb_BarcodeChainway_stop_caller

+(rb_BarcodeChainway_stop_caller*) getSharedInstance {
    if (our_BarcodeChainway_stop_caller == nil) {
        our_BarcodeChainway_stop_caller = [[rb_BarcodeChainway_stop_caller alloc] init];
    }
    return our_BarcodeChainway_stop_caller;
}

-(void) command_stop:(rb_BarcodeChainway_stop_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem stop:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) stop:(rb_BarcodeChainway_stop_caller_params*)caller_params {
    [[rb_BarcodeChainway_stop_caller getSharedInstance] command_stop:caller_params];
}

+(void) stop_in_thread:(rb_BarcodeChainway_stop_caller_params*)caller_params {
    [[rb_BarcodeChainway_stop_caller getSharedInstance] performSelectorInBackground:@selector(command_stop:) withObject:caller_params];
}

+(void) stop_in_UI_thread:(rb_BarcodeChainway_stop_caller_params*)caller_params {
    [[rb_BarcodeChainway_stop_caller getSharedInstance] performSelectorOnMainThread:@selector(command_stop:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_stop_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::stop"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_stop_caller stop_in_thread:[rb_BarcodeChainway_stop_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_stop_caller stop:[rb_BarcodeChainway_stop_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_stop(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_stop_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_stop(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_stop_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_disable_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_disable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_disable_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_disable_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_disable_caller_params* par = [[[rb_BarcodeChainway_disable_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_disable_caller : NSObject {

}
+(rb_BarcodeChainway_disable_caller*) getSharedInstance;
+(void) disable:(rb_BarcodeChainway_disable_caller_params*)caller_params;
+(void) disable_in_thread:(rb_BarcodeChainway_disable_caller_params*)caller_params;
+(void) disable_in_UI_thread:(rb_BarcodeChainway_disable_caller_params*)caller_params;

@end

static rb_BarcodeChainway_disable_caller* our_BarcodeChainway_disable_caller = nil;

@implementation rb_BarcodeChainway_disable_caller

+(rb_BarcodeChainway_disable_caller*) getSharedInstance {
    if (our_BarcodeChainway_disable_caller == nil) {
        our_BarcodeChainway_disable_caller = [[rb_BarcodeChainway_disable_caller alloc] init];
    }
    return our_BarcodeChainway_disable_caller;
}

-(void) command_disable:(rb_BarcodeChainway_disable_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem disable:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) disable:(rb_BarcodeChainway_disable_caller_params*)caller_params {
    [[rb_BarcodeChainway_disable_caller getSharedInstance] command_disable:caller_params];
}

+(void) disable_in_thread:(rb_BarcodeChainway_disable_caller_params*)caller_params {
    [[rb_BarcodeChainway_disable_caller getSharedInstance] performSelectorInBackground:@selector(command_disable:) withObject:caller_params];
}

+(void) disable_in_UI_thread:(rb_BarcodeChainway_disable_caller_params*)caller_params {
    [[rb_BarcodeChainway_disable_caller getSharedInstance] performSelectorOnMainThread:@selector(command_disable:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_disable_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::disable"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_disable_caller disable_in_thread:[rb_BarcodeChainway_disable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_disable_caller disable:[rb_BarcodeChainway_disable_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_disable(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_disable_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_disable(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_disable_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_barcode_recognize_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_barcode_recognize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_barcode_recognize_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_barcode_recognize_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_barcode_recognize_caller_params* par = [[[rb_BarcodeChainway_barcode_recognize_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_barcode_recognize_caller : NSObject {

}
+(rb_BarcodeChainway_barcode_recognize_caller*) getSharedInstance;
+(void) barcode_recognize:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params;
+(void) barcode_recognize_in_thread:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params;
+(void) barcode_recognize_in_UI_thread:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params;

@end

static rb_BarcodeChainway_barcode_recognize_caller* our_BarcodeChainway_barcode_recognize_caller = nil;

@implementation rb_BarcodeChainway_barcode_recognize_caller

+(rb_BarcodeChainway_barcode_recognize_caller*) getSharedInstance {
    if (our_BarcodeChainway_barcode_recognize_caller == nil) {
        our_BarcodeChainway_barcode_recognize_caller = [[rb_BarcodeChainway_barcode_recognize_caller alloc] init];
    }
    return our_BarcodeChainway_barcode_recognize_caller;
}

-(void) command_barcode_recognize:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem barcode_recognize:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) barcode_recognize:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params {
    [[rb_BarcodeChainway_barcode_recognize_caller getSharedInstance] command_barcode_recognize:caller_params];
}

+(void) barcode_recognize_in_thread:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params {
    [[rb_BarcodeChainway_barcode_recognize_caller getSharedInstance] performSelectorInBackground:@selector(command_barcode_recognize:) withObject:caller_params];
}

+(void) barcode_recognize_in_UI_thread:(rb_BarcodeChainway_barcode_recognize_caller_params*)caller_params {
    [[rb_BarcodeChainway_barcode_recognize_caller getSharedInstance] performSelectorOnMainThread:@selector(command_barcode_recognize:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_barcode_recognize_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::barcode_recognize"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_barcode_recognize_caller barcode_recognize_in_thread:[rb_BarcodeChainway_barcode_recognize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_barcode_recognize_caller barcode_recognize:[rb_BarcodeChainway_barcode_recognize_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_barcode_recognize(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_barcode_recognize_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_barcode_recognize(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_barcode_recognize_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getSupportedProperties_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getSupportedProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getSupportedProperties_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getSupportedProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getSupportedProperties_caller_params* par = [[[rb_BarcodeChainway_getSupportedProperties_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getSupportedProperties_caller : NSObject {

}
+(rb_BarcodeChainway_getSupportedProperties_caller*) getSharedInstance;
+(void) getSupportedProperties:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params;
+(void) getSupportedProperties_in_thread:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params;
+(void) getSupportedProperties_in_UI_thread:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getSupportedProperties_caller* our_BarcodeChainway_getSupportedProperties_caller = nil;

@implementation rb_BarcodeChainway_getSupportedProperties_caller

+(rb_BarcodeChainway_getSupportedProperties_caller*) getSharedInstance {
    if (our_BarcodeChainway_getSupportedProperties_caller == nil) {
        our_BarcodeChainway_getSupportedProperties_caller = [[rb_BarcodeChainway_getSupportedProperties_caller alloc] init];
    }
    return our_BarcodeChainway_getSupportedProperties_caller;
}

-(void) command_getSupportedProperties:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getSupportedProperties:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getSupportedProperties:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSupportedProperties_caller getSharedInstance] command_getSupportedProperties:caller_params];
}

+(void) getSupportedProperties_in_thread:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSupportedProperties_caller getSharedInstance] performSelectorInBackground:@selector(command_getSupportedProperties:) withObject:caller_params];
}

+(void) getSupportedProperties_in_UI_thread:(rb_BarcodeChainway_getSupportedProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getSupportedProperties_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getSupportedProperties:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getSupportedProperties_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::getSupportedProperties"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getSupportedProperties_caller getSupportedProperties_in_thread:[rb_BarcodeChainway_getSupportedProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getSupportedProperties_caller getSupportedProperties:[rb_BarcodeChainway_getSupportedProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getSupportedProperties(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getSupportedProperties_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getSupportedProperties(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getSupportedProperties_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_take_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_take_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_take_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_take_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_take_caller_params* par = [[[rb_BarcodeChainway_take_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_take_caller : NSObject {

}
+(rb_BarcodeChainway_take_caller*) getSharedInstance;
+(void) take:(rb_BarcodeChainway_take_caller_params*)caller_params;
+(void) take_in_thread:(rb_BarcodeChainway_take_caller_params*)caller_params;
+(void) take_in_UI_thread:(rb_BarcodeChainway_take_caller_params*)caller_params;

@end

static rb_BarcodeChainway_take_caller* our_BarcodeChainway_take_caller = nil;

@implementation rb_BarcodeChainway_take_caller

+(rb_BarcodeChainway_take_caller*) getSharedInstance {
    if (our_BarcodeChainway_take_caller == nil) {
        our_BarcodeChainway_take_caller = [[rb_BarcodeChainway_take_caller alloc] init];
    }
    return our_BarcodeChainway_take_caller;
}

-(void) command_take:(rb_BarcodeChainway_take_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem take:(NSDictionary*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) take:(rb_BarcodeChainway_take_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_caller getSharedInstance] command_take:caller_params];
}

+(void) take_in_thread:(rb_BarcodeChainway_take_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_caller getSharedInstance] performSelectorInBackground:@selector(command_take:) withObject:caller_params];
}

+(void) take_in_UI_thread:(rb_BarcodeChainway_take_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_caller getSharedInstance] performSelectorOnMainThread:@selector(command_take:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_take_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::take"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_take_caller take_in_thread:[rb_BarcodeChainway_take_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_take_caller take:[rb_BarcodeChainway_take_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_take(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_take_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_take(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_take_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_take_barcode_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_take_barcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_take_barcode_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_take_barcode_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_take_barcode_caller_params* par = [[[rb_BarcodeChainway_take_barcode_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_take_barcode_caller : NSObject {

}
+(rb_BarcodeChainway_take_barcode_caller*) getSharedInstance;
+(void) take_barcode:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params;
+(void) take_barcode_in_thread:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params;
+(void) take_barcode_in_UI_thread:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params;

@end

static rb_BarcodeChainway_take_barcode_caller* our_BarcodeChainway_take_barcode_caller = nil;

@implementation rb_BarcodeChainway_take_barcode_caller

+(rb_BarcodeChainway_take_barcode_caller*) getSharedInstance {
    if (our_BarcodeChainway_take_barcode_caller == nil) {
        our_BarcodeChainway_take_barcode_caller = [[rb_BarcodeChainway_take_barcode_caller alloc] init];
    }
    return our_BarcodeChainway_take_barcode_caller;
}

-(void) command_take_barcode:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem take_barcode:(NSString*)[params objectAtIndex:0] propertyMap:(NSDictionary*)[params objectAtIndex:1] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) take_barcode:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_barcode_caller getSharedInstance] command_take_barcode:caller_params];
}

+(void) take_barcode_in_thread:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_barcode_caller getSharedInstance] performSelectorInBackground:@selector(command_take_barcode:) withObject:caller_params];
}

+(void) take_barcode_in_UI_thread:(rb_BarcodeChainway_take_barcode_caller_params*)caller_params {
    [[rb_BarcodeChainway_take_barcode_caller getSharedInstance] performSelectorOnMainThread:@selector(command_take_barcode:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_take_barcode_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[2+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::take_barcode"];

    
    BOOL is_factory_param[] = { NO, NO, NO };

    int i;

    // init
    for (i = 0; i < (2); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (2); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(2)];
    for (i = 0 ; i < (2); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (2+1)) {
        VALUE callback = argv[2];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (2+2)) {
        VALUE callback_param = argv[2+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_take_barcode_caller take_barcode_in_thread:[rb_BarcodeChainway_take_barcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_take_barcode_caller take_barcode:[rb_BarcodeChainway_take_barcode_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_take_barcode(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_take_barcode_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_take_barcode(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_take_barcode_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_commandRemoteScanner_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_commandRemoteScanner_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_commandRemoteScanner_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_commandRemoteScanner_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_commandRemoteScanner_caller_params* par = [[[rb_BarcodeChainway_commandRemoteScanner_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_commandRemoteScanner_caller : NSObject {

}
+(rb_BarcodeChainway_commandRemoteScanner_caller*) getSharedInstance;
+(void) commandRemoteScanner:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params;
+(void) commandRemoteScanner_in_thread:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params;
+(void) commandRemoteScanner_in_UI_thread:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params;

@end

static rb_BarcodeChainway_commandRemoteScanner_caller* our_BarcodeChainway_commandRemoteScanner_caller = nil;

@implementation rb_BarcodeChainway_commandRemoteScanner_caller

+(rb_BarcodeChainway_commandRemoteScanner_caller*) getSharedInstance {
    if (our_BarcodeChainway_commandRemoteScanner_caller == nil) {
        our_BarcodeChainway_commandRemoteScanner_caller = [[rb_BarcodeChainway_commandRemoteScanner_caller alloc] init];
    }
    return our_BarcodeChainway_commandRemoteScanner_caller;
}

-(void) command_commandRemoteScanner:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem commandRemoteScanner:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) commandRemoteScanner:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params {
    [[rb_BarcodeChainway_commandRemoteScanner_caller getSharedInstance] command_commandRemoteScanner:caller_params];
}

+(void) commandRemoteScanner_in_thread:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params {
    [[rb_BarcodeChainway_commandRemoteScanner_caller getSharedInstance] performSelectorInBackground:@selector(command_commandRemoteScanner:) withObject:caller_params];
}

+(void) commandRemoteScanner_in_UI_thread:(rb_BarcodeChainway_commandRemoteScanner_caller_params*)caller_params {
    [[rb_BarcodeChainway_commandRemoteScanner_caller getSharedInstance] performSelectorOnMainThread:@selector(command_commandRemoteScanner:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_commandRemoteScanner_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::commandRemoteScanner"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_commandRemoteScanner_caller commandRemoteScanner_in_thread:[rb_BarcodeChainway_commandRemoteScanner_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_commandRemoteScanner_caller commandRemoteScanner:[rb_BarcodeChainway_commandRemoteScanner_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_commandRemoteScanner(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_commandRemoteScanner_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_commandRemoteScanner(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_commandRemoteScanner_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getProperty_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getProperty_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getProperty_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getProperty_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getProperty_caller_params* par = [[[rb_BarcodeChainway_getProperty_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getProperty_caller : NSObject {

}
+(rb_BarcodeChainway_getProperty_caller*) getSharedInstance;
+(void) getProperty:(rb_BarcodeChainway_getProperty_caller_params*)caller_params;
+(void) getProperty_in_thread:(rb_BarcodeChainway_getProperty_caller_params*)caller_params;
+(void) getProperty_in_UI_thread:(rb_BarcodeChainway_getProperty_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getProperty_caller* our_BarcodeChainway_getProperty_caller = nil;

@implementation rb_BarcodeChainway_getProperty_caller

+(rb_BarcodeChainway_getProperty_caller*) getSharedInstance {
    if (our_BarcodeChainway_getProperty_caller == nil) {
        our_BarcodeChainway_getProperty_caller = [[rb_BarcodeChainway_getProperty_caller alloc] init];
    }
    return our_BarcodeChainway_getProperty_caller;
}

-(void) command_getProperty:(rb_BarcodeChainway_getProperty_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getProperty:(NSString*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getProperty:(rb_BarcodeChainway_getProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperty_caller getSharedInstance] command_getProperty:caller_params];
}

+(void) getProperty_in_thread:(rb_BarcodeChainway_getProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperty_caller getSharedInstance] performSelectorInBackground:@selector(command_getProperty:) withObject:caller_params];
}

+(void) getProperty_in_UI_thread:(rb_BarcodeChainway_getProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperty_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getProperty:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getProperty_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::getProperty"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getProperty_caller getProperty_in_thread:[rb_BarcodeChainway_getProperty_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getProperty_caller getProperty:[rb_BarcodeChainway_getProperty_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getProperty(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getProperty_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getProperty(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getProperty_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getProperties_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getProperties_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getProperties_caller_params* par = [[[rb_BarcodeChainway_getProperties_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getProperties_caller : NSObject {

}
+(rb_BarcodeChainway_getProperties_caller*) getSharedInstance;
+(void) getProperties:(rb_BarcodeChainway_getProperties_caller_params*)caller_params;
+(void) getProperties_in_thread:(rb_BarcodeChainway_getProperties_caller_params*)caller_params;
+(void) getProperties_in_UI_thread:(rb_BarcodeChainway_getProperties_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getProperties_caller* our_BarcodeChainway_getProperties_caller = nil;

@implementation rb_BarcodeChainway_getProperties_caller

+(rb_BarcodeChainway_getProperties_caller*) getSharedInstance {
    if (our_BarcodeChainway_getProperties_caller == nil) {
        our_BarcodeChainway_getProperties_caller = [[rb_BarcodeChainway_getProperties_caller alloc] init];
    }
    return our_BarcodeChainway_getProperties_caller;
}

-(void) command_getProperties:(rb_BarcodeChainway_getProperties_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getProperties:(NSArray*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getProperties:(rb_BarcodeChainway_getProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperties_caller getSharedInstance] command_getProperties:caller_params];
}

+(void) getProperties_in_thread:(rb_BarcodeChainway_getProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperties_caller getSharedInstance] performSelectorInBackground:@selector(command_getProperties:) withObject:caller_params];
}

+(void) getProperties_in_UI_thread:(rb_BarcodeChainway_getProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getProperties_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getProperties:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getProperties_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::getProperties"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getProperties_caller getProperties_in_thread:[rb_BarcodeChainway_getProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getProperties_caller getProperties:[rb_BarcodeChainway_getProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getProperties(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getProperties_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getProperties(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getProperties_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_getAllProperties_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_getAllProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_getAllProperties_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_getAllProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_getAllProperties_caller_params* par = [[[rb_BarcodeChainway_getAllProperties_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_getAllProperties_caller : NSObject {

}
+(rb_BarcodeChainway_getAllProperties_caller*) getSharedInstance;
+(void) getAllProperties:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params;
+(void) getAllProperties_in_thread:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params;
+(void) getAllProperties_in_UI_thread:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params;

@end

static rb_BarcodeChainway_getAllProperties_caller* our_BarcodeChainway_getAllProperties_caller = nil;

@implementation rb_BarcodeChainway_getAllProperties_caller

+(rb_BarcodeChainway_getAllProperties_caller*) getSharedInstance {
    if (our_BarcodeChainway_getAllProperties_caller == nil) {
        our_BarcodeChainway_getAllProperties_caller = [[rb_BarcodeChainway_getAllProperties_caller alloc] init];
    }
    return our_BarcodeChainway_getAllProperties_caller;
}

-(void) command_getAllProperties:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params {

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem getAllProperties:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) getAllProperties:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllProperties_caller getSharedInstance] command_getAllProperties:caller_params];
}

+(void) getAllProperties_in_thread:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllProperties_caller getSharedInstance] performSelectorInBackground:@selector(command_getAllProperties:) withObject:caller_params];
}

+(void) getAllProperties_in_UI_thread:(rb_BarcodeChainway_getAllProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_getAllProperties_caller getSharedInstance] performSelectorOnMainThread:@selector(command_getAllProperties:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_getAllProperties_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[0+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::getAllProperties"];

    
    BOOL is_factory_param[] = { NO };

    int i;

    // init
    for (i = 0; i < (0); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (0); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(0)];
    for (i = 0 ; i < (0); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (0+1)) {
        VALUE callback = argv[0];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (0+2)) {
        VALUE callback_param = argv[0+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_getAllProperties_caller getAllProperties_in_thread:[rb_BarcodeChainway_getAllProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_getAllProperties_caller getAllProperties:[rb_BarcodeChainway_getAllProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_getAllProperties(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_getAllProperties_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_getAllProperties(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_getAllProperties_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setProperty_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setProperty_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setProperty_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setProperty_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setProperty_caller_params* par = [[[rb_BarcodeChainway_setProperty_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setProperty_caller : NSObject {

}
+(rb_BarcodeChainway_setProperty_caller*) getSharedInstance;
+(void) setProperty:(rb_BarcodeChainway_setProperty_caller_params*)caller_params;
+(void) setProperty_in_thread:(rb_BarcodeChainway_setProperty_caller_params*)caller_params;
+(void) setProperty_in_UI_thread:(rb_BarcodeChainway_setProperty_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setProperty_caller* our_BarcodeChainway_setProperty_caller = nil;

@implementation rb_BarcodeChainway_setProperty_caller

+(rb_BarcodeChainway_setProperty_caller*) getSharedInstance {
    if (our_BarcodeChainway_setProperty_caller == nil) {
        our_BarcodeChainway_setProperty_caller = [[rb_BarcodeChainway_setProperty_caller alloc] init];
    }
    return our_BarcodeChainway_setProperty_caller;
}

-(void) command_setProperty:(rb_BarcodeChainway_setProperty_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setProperty:(NSString*)[params objectAtIndex:0] propertyValue:(NSString*)[params objectAtIndex:1] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setProperty:(rb_BarcodeChainway_setProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperty_caller getSharedInstance] command_setProperty:caller_params];
}

+(void) setProperty_in_thread:(rb_BarcodeChainway_setProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperty_caller getSharedInstance] performSelectorInBackground:@selector(command_setProperty:) withObject:caller_params];
}

+(void) setProperty_in_UI_thread:(rb_BarcodeChainway_setProperty_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperty_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setProperty:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setProperty_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[2+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::setProperty"];

    
    BOOL is_factory_param[] = { NO, NO, NO };

    int i;

    // init
    for (i = 0; i < (2); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (2); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(2)];
    for (i = 0 ; i < (2); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (2+1)) {
        VALUE callback = argv[2];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (2+2)) {
        VALUE callback_param = argv[2+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setProperty_caller setProperty_in_thread:[rb_BarcodeChainway_setProperty_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setProperty_caller setProperty:[rb_BarcodeChainway_setProperty_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setProperty(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setProperty_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setProperty(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setProperty_Obj(argc, argv, item);
}







@interface rb_BarcodeChainway_setProperties_caller_params : NSObject

@property (nonatomic, copy) NSArray* params;
@property (assign) id<IBarcodeChainway> item;
@property (assign) CMethodResult* methodResult;

-(void)dealloc;

+(rb_BarcodeChainway_setProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult;

@end

@implementation rb_BarcodeChainway_setProperties_caller_params

@synthesize params,item,methodResult;

-(void)dealloc {
    [params release];
    [super dealloc];
}

+(rb_BarcodeChainway_setProperties_caller_params*) makeParams:(NSArray*)_params _item:(id<IBarcodeChainway>)_item _methodResult:(CMethodResult*)_methodResult {
    rb_BarcodeChainway_setProperties_caller_params* par = [[[rb_BarcodeChainway_setProperties_caller_params alloc] init] autorelease];
    par.params = _params;
    par.item = _item;
    par.methodResult = [_methodResult retain];
    return [par retain];
}

@end


@interface rb_BarcodeChainway_setProperties_caller : NSObject {

}
+(rb_BarcodeChainway_setProperties_caller*) getSharedInstance;
+(void) setProperties:(rb_BarcodeChainway_setProperties_caller_params*)caller_params;
+(void) setProperties_in_thread:(rb_BarcodeChainway_setProperties_caller_params*)caller_params;
+(void) setProperties_in_UI_thread:(rb_BarcodeChainway_setProperties_caller_params*)caller_params;

@end

static rb_BarcodeChainway_setProperties_caller* our_BarcodeChainway_setProperties_caller = nil;

@implementation rb_BarcodeChainway_setProperties_caller

+(rb_BarcodeChainway_setProperties_caller*) getSharedInstance {
    if (our_BarcodeChainway_setProperties_caller == nil) {
        our_BarcodeChainway_setProperties_caller = [[rb_BarcodeChainway_setProperties_caller alloc] init];
    }
    return our_BarcodeChainway_setProperties_caller;
}

-(void) command_setProperties:(rb_BarcodeChainway_setProperties_caller_params*)caller_params {

    NSArray* params = caller_params.params;

    id<IBarcodeChainway> objItem = caller_params.item;
    CMethodResult* methodResult = caller_params.methodResult;

    
    [objItem setProperties:(NSDictionary*)[params objectAtIndex:0] methodResult:methodResult ];
    [caller_params.methodResult release];
    [caller_params release];
}

+(void) setProperties:(rb_BarcodeChainway_setProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperties_caller getSharedInstance] command_setProperties:caller_params];
}

+(void) setProperties_in_thread:(rb_BarcodeChainway_setProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperties_caller getSharedInstance] performSelectorInBackground:@selector(command_setProperties:) withObject:caller_params];
}

+(void) setProperties_in_UI_thread:(rb_BarcodeChainway_setProperties_caller_params*)caller_params {
    [[rb_BarcodeChainway_setProperties_caller getSharedInstance] performSelectorOnMainThread:@selector(command_setProperties:) withObject:caller_params waitUntilDone:NO];
}


@end


VALUE rb_BarcodeChainway_setProperties_Obj(int argc, VALUE *argv, id<IBarcodeChainway>objItem) {

    CMethodResult* methodResult = [[CMethodResult alloc] init];

    NSObject* params[1+1];
    NSString* callbackURL = nil;
    unsigned long callbackMethod = 0;
    NSString* callbackParam = nil;
    BOOL method_return_result = YES;

    [methodResult setMethodSignature:@"BarcodeChainway::setProperties"];

    
    BOOL is_factory_param[] = { NO, NO };

    int i;

    // init
    for (i = 0; i < (1); i++) {
        params[i] = [NSNull null];
    }

    

    // enumerate params
    for (int i = 0; i < (1); i++) {
        if (argc > i) {
            // we have a [i] param !
            if (is_factory_param[i]) {
                params[i] = BarcodeChainway_makeInstanceByRubyObject(argv[i]);
            }
            else {
                params[i] = [[CRubyConverter convertFromRuby:argv[i]] retain];
            }
        }
    }

    NSMutableArray* params_array = [NSMutableArray arrayWithCapacity:(1)];
    for (i = 0 ; i < (1); i++) {
        [params_array addObject:params[i]];
    }

    
    // check callback
    if (argc >= (1+1)) {
        VALUE callback = argv[1];
        if (rho_ruby_is_string(callback)) {
            callbackURL = [((NSString*)[CRubyConverter convertFromRuby:callback]) retain];
        }
        else if (rho_ruby_is_proc(callback) || rho_ruby_is_method(callback)) {
            callbackMethod = callback;
        }
    }
    // check callback param
    if (argc >= (1+2)) {
        VALUE callback_param = argv[1+1];
        if (rho_ruby_is_string(callback_param)) {
            callbackParam = [((NSString*)[CRubyConverter convertFromRuby:callback_param]) retain];
        }
    }
    

    
    


    if ((callbackURL != nil) || (callbackMethod != 0)) {
        // we have callback - method should not call setResult if method execute from current thread - only later or in UI or separated threads !!!
        if (callbackURL != nil)
            [methodResult setRubyCallback:callbackURL];
        if (callbackMethod != 0)
            [methodResult setRubyCallbackMethod:callbackMethod];
        if (callbackParam != nil) {
            [methodResult setCallbackParam:callbackParam];
        }
        
        [rb_BarcodeChainway_setProperties_caller setProperties_in_thread:[rb_BarcodeChainway_setProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        

        // FIXME: callback should not be retained, it must be saved outside of this call
        [methodResult retain];
    }
    else {
        // we do not have callback
        
        [rb_BarcodeChainway_setProperties_caller setProperties:[rb_BarcodeChainway_setProperties_caller_params makeParams:params_array _item:objItem _methodResult:methodResult]];
        
    }
    VALUE resValue = rho_ruby_get_NIL();
    if ((callbackURL == nil) && (callbackMethod == 0) && (method_return_result)) {
        resValue = [methodResult toRuby];
    }
    [methodResult release];
    return resValue;
}


VALUE rb_BarcodeChainway_setProperties(int argc, VALUE *argv, VALUE obj) {

    id<IBarcodeChainway> item = BarcodeChainway_makeInstanceByRubyObject(obj);
    return rb_BarcodeChainway_setProperties_Obj(argc, argv, item);

}

VALUE rb_s_BarcodeChainway_def_setProperties(int argc, VALUE *argv) {
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    id<IBarcodeChainway> item = [factory getBarcodeChainwayByID:defID];
    return rb_BarcodeChainway_setProperties_Obj(argc, argv, item);
}







VALUE rb_BarcodeChainway_s_default(VALUE klass)
{
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    NSString* defID = [singleton getDefaultID];

    return rho_ruby_create_object_with_id( klass, [defID UTF8String] );
}

VALUE rb_BarcodeChainway_s_setDefault(VALUE klass, VALUE valObj)
{
    const char* szID = rho_ruby_get_object_id( valObj );
    id<IBarcodeChainwayFactory> factory = [BarcodeChainwayFactorySingleton getBarcodeChainwayFactoryInstance];
    id<IBarcodeChainwaySingleton> singleton = [factory getBarcodeChainwaySingleton];

    [singleton setDefaultID:[NSString stringWithUTF8String:szID]];

    return rho_ruby_get_NIL();
}



