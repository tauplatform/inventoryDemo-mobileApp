package com.rho.barcodechainway;



import java.util.Map;
import java.util.List;

import com.rhomobile.rhodes.api.IMethodResult;
import com.rhomobile.rhodes.api.IRhoApiObject;

import com.rhomobile.rhodes.api.IRhoApiPropertyBag;

public interface IBarcodeChainway extends IRhoApiObject, IRhoApiPropertyBag {

    void getAutoEnter(IMethodResult result);
    void setAutoEnter(boolean autoEnter, IMethodResult result);
    void getAutoTab(IMethodResult result);
    void setAutoTab(boolean autoTab, IMethodResult result);
    void getHapticFeedback(IMethodResult result);
    void setHapticFeedback(boolean hapticFeedback, IMethodResult result);
    void getLinearSecurityLevel(IMethodResult result);
    void setLinearSecurityLevel(String linearSecurityLevel, IMethodResult result);
    void getScanTimeout(IMethodResult result);
    void setScanTimeout(int scanTimeout, IMethodResult result);
    void getRasterMode(IMethodResult result);
    void setRasterMode(String rasterMode, IMethodResult result);
    void getRasterHeight(IMethodResult result);
    void setRasterHeight(int rasterHeight, IMethodResult result);
    void getAimType(IMethodResult result);
    void setAimType(String aimType, IMethodResult result);
    void getTimedAimDuration(IMethodResult result);
    void setTimedAimDuration(int timedAimDuration, IMethodResult result);
    void getSameSymbolTimeout(IMethodResult result);
    void setSameSymbolTimeout(int sameSymbolTimeout, IMethodResult result);
    void getDifferentSymbolTimeout(IMethodResult result);
    void setDifferentSymbolTimeout(int differentSymbolTimeout, IMethodResult result);
    void getAimMode(IMethodResult result);
    void setAimMode(String aimMode, IMethodResult result);
    void getPicklistMode(IMethodResult result);
    void setPicklistMode(String picklistMode, IMethodResult result);
    void getViewfinderMode(IMethodResult result);
    void setViewfinderMode(String viewfinderMode, IMethodResult result);
    void getViewfinderX(IMethodResult result);
    void setViewfinderX(int viewfinderX, IMethodResult result);
    void getViewfinderY(IMethodResult result);
    void setViewfinderY(int viewfinderY, IMethodResult result);
    void getViewfinderWidth(IMethodResult result);
    void setViewfinderWidth(int viewfinderWidth, IMethodResult result);
    void getViewfinderHeight(IMethodResult result);
    void setViewfinderHeight(int viewfinderHeight, IMethodResult result);
    void getViewfinderFeedback(IMethodResult result);
    void setViewfinderFeedback(String viewfinderFeedback, IMethodResult result);
    void getViewfinderFeedbackTime(IMethodResult result);
    void setViewfinderFeedbackTime(int viewfinderFeedbackTime, IMethodResult result);
    void getFocusMode(IMethodResult result);
    void setFocusMode(String focusMode, IMethodResult result);
    void getIlluminationMode(IMethodResult result);
    void setIlluminationMode(String illuminationMode, IMethodResult result);
    void getDpmMode(IMethodResult result);
    void setDpmMode(boolean dpmMode, IMethodResult result);
    void getInverse1dMode(IMethodResult result);
    void setInverse1dMode(String inverse1dMode, IMethodResult result);
    void getPoorQuality1dMode(IMethodResult result);
    void setPoorQuality1dMode(boolean poorQuality1dMode, IMethodResult result);
    void getBeamWidth(IMethodResult result);
    void setBeamWidth(String beamWidth, IMethodResult result);
    void getDbpMode(IMethodResult result);
    void setDbpMode(String dbpMode, IMethodResult result);
    void getKlasseEins(IMethodResult result);
    void setKlasseEins(boolean klasseEins, IMethodResult result);
    void getAdaptiveScanning(IMethodResult result);
    void setAdaptiveScanning(boolean adaptiveScanning, IMethodResult result);
    void getBidirectionalRedundancy(IMethodResult result);
    void setBidirectionalRedundancy(boolean bidirectionalRedundancy, IMethodResult result);
    void getBarcodeDataFormat(IMethodResult result);
    void setBarcodeDataFormat(String barcodeDataFormat, IMethodResult result);
    void getDataBufferSize(IMethodResult result);
    void setDataBufferSize(int dataBufferSize, IMethodResult result);
    void getConnectionIdleTimeout(IMethodResult result);
    void setConnectionIdleTimeout(int connectionIdleTimeout, IMethodResult result);
    void getDisconnectBtOnDisable(IMethodResult result);
    void setDisconnectBtOnDisable(boolean disconnectBtOnDisable, IMethodResult result);
    void getDisplayBtAddressBarcodeOnEnable(IMethodResult result);
    void setDisplayBtAddressBarcodeOnEnable(boolean displayBtAddressBarcodeOnEnable, IMethodResult result);
    void getEnableTimeout(IMethodResult result);
    void setEnableTimeout(int enableTimeout, IMethodResult result);
    void getFriendlyName(IMethodResult result);
    void getLcdMode(IMethodResult result);
    void setLcdMode(boolean lcdMode, IMethodResult result);
    void getLowBatteryScan(IMethodResult result);
    void setLowBatteryScan(boolean lowBatteryScan, IMethodResult result);
    void getTriggerConnected(IMethodResult result);
    void setTriggerConnected(boolean triggerConnected, IMethodResult result);
    void getDisableScannerDuringNavigate(IMethodResult result);
    void setDisableScannerDuringNavigate(boolean disableScannerDuringNavigate, IMethodResult result);
    void getDecodeVolume(IMethodResult result);
    void setDecodeVolume(int decodeVolume, IMethodResult result);
    void getDecodeDuration(IMethodResult result);
    void setDecodeDuration(int decodeDuration, IMethodResult result);
    void getDecodeFrequency(IMethodResult result);
    void setDecodeFrequency(int decodeFrequency, IMethodResult result);
    void getInvalidDecodeFrequency(IMethodResult result);
    void setInvalidDecodeFrequency(int invalidDecodeFrequency, IMethodResult result);
    void getDecodeSound(IMethodResult result);
    void setDecodeSound(String decodeSound, IMethodResult result);
    void getInvalidDecodeSound(IMethodResult result);
    void setInvalidDecodeSound(String invalidDecodeSound, IMethodResult result);
    void getScannerType(IMethodResult result);
    void getAllDecoders(IMethodResult result);
    void setAllDecoders(boolean allDecoders, IMethodResult result);
    void getAztec(IMethodResult result);
    void setAztec(boolean aztec, IMethodResult result);
    void getChinese2of5(IMethodResult result);
    void setChinese2of5(boolean chinese2of5, IMethodResult result);
    void getCodabar(IMethodResult result);
    void setCodabar(boolean codabar, IMethodResult result);
    void getCodabarClsiEditing(IMethodResult result);
    void setCodabarClsiEditing(boolean codabarClsiEditing, IMethodResult result);
    void getCodabarMaxLength(IMethodResult result);
    void setCodabarMaxLength(int codabarMaxLength, IMethodResult result);
    void getCodabarMinLength(IMethodResult result);
    void setCodabarMinLength(int codabarMinLength, IMethodResult result);
    void getCodabarNotisEditing(IMethodResult result);
    void setCodabarNotisEditing(boolean codabarNotisEditing, IMethodResult result);
    void getCodabarRedundancy(IMethodResult result);
    void setCodabarRedundancy(boolean codabarRedundancy, IMethodResult result);
    void getCode11(IMethodResult result);
    void setCode11(boolean code11, IMethodResult result);
    void getCode11checkDigitCount(IMethodResult result);
    void setCode11checkDigitCount(String code11checkDigitCount, IMethodResult result);
    void getCode11maxLength(IMethodResult result);
    void setCode11maxLength(int code11maxLength, IMethodResult result);
    void getCode11minLength(IMethodResult result);
    void setCode11minLength(int code11minLength, IMethodResult result);
    void getCode11redundancy(IMethodResult result);
    void setCode11redundancy(boolean code11redundancy, IMethodResult result);
    void getCode11reportCheckDigit(IMethodResult result);
    void setCode11reportCheckDigit(boolean code11reportCheckDigit, IMethodResult result);
    void getCode128(IMethodResult result);
    void setCode128(boolean code128, IMethodResult result);
    void getCode128checkIsBtTable(IMethodResult result);
    void setCode128checkIsBtTable(boolean code128checkIsBtTable, IMethodResult result);
    void getCode128ean128(IMethodResult result);
    void setCode128ean128(boolean code128ean128, IMethodResult result);
    void getCode128isbt128(IMethodResult result);
    void setCode128isbt128(boolean code128isbt128, IMethodResult result);
    void getCode128isbt128ConcatMode(IMethodResult result);
    void setCode128isbt128ConcatMode(String code128isbt128ConcatMode, IMethodResult result);
    void getCode128maxLength(IMethodResult result);
    void setCode128maxLength(int code128maxLength, IMethodResult result);
    void getCode128minLength(IMethodResult result);
    void setCode128minLength(int code128minLength, IMethodResult result);
    void getCode128other128(IMethodResult result);
    void setCode128other128(boolean code128other128, IMethodResult result);
    void getCode128redundancy(IMethodResult result);
    void setCode128redundancy(boolean code128redundancy, IMethodResult result);
    void getCode128securityLevel(IMethodResult result);
    void setCode128securityLevel(int code128securityLevel, IMethodResult result);
    void getCompositeAb(IMethodResult result);
    void setCompositeAb(boolean compositeAb, IMethodResult result);
    void getCompositeAbUccLinkMode(IMethodResult result);
    void setCompositeAbUccLinkMode(String compositeAbUccLinkMode, IMethodResult result);
    void getCompositeAbUseUpcPreambleCheckDigitRules(IMethodResult result);
    void setCompositeAbUseUpcPreambleCheckDigitRules(boolean compositeAbUseUpcPreambleCheckDigitRules, IMethodResult result);
    void getCompositeC(IMethodResult result);
    void setCompositeC(boolean compositeC, IMethodResult result);
    void getCode39(IMethodResult result);
    void setCode39(boolean code39, IMethodResult result);
    void getCode39code32Prefix(IMethodResult result);
    void setCode39code32Prefix(boolean code39code32Prefix, IMethodResult result);
    void getCode39convertToCode32(IMethodResult result);
    void setCode39convertToCode32(boolean code39convertToCode32, IMethodResult result);
    void getCode39fullAscii(IMethodResult result);
    void setCode39fullAscii(boolean code39fullAscii, IMethodResult result);
    void getCode39maxLength(IMethodResult result);
    void setCode39maxLength(int code39maxLength, IMethodResult result);
    void getCode39minLength(IMethodResult result);
    void setCode39minLength(int code39minLength, IMethodResult result);
    void getCode39redundancy(IMethodResult result);
    void setCode39redundancy(boolean code39redundancy, IMethodResult result);
    void getCode39reportCheckDigit(IMethodResult result);
    void setCode39reportCheckDigit(boolean code39reportCheckDigit, IMethodResult result);
    void getCode39securityLevel(IMethodResult result);
    void setCode39securityLevel(int code39securityLevel, IMethodResult result);
    void getCode39verifyCheckDigit(IMethodResult result);
    void setCode39verifyCheckDigit(boolean code39verifyCheckDigit, IMethodResult result);
    void getCode93(IMethodResult result);
    void setCode93(boolean code93, IMethodResult result);
    void getCode93maxLength(IMethodResult result);
    void setCode93maxLength(int code93maxLength, IMethodResult result);
    void getCode93minLength(IMethodResult result);
    void setCode93minLength(int code93minLength, IMethodResult result);
    void getCode93redundancy(IMethodResult result);
    void setCode93redundancy(boolean code93redundancy, IMethodResult result);
    void getD2of5(IMethodResult result);
    void setD2of5(boolean d2of5, IMethodResult result);
    void getD2of5maxLength(IMethodResult result);
    void setD2of5maxLength(int d2of5maxLength, IMethodResult result);
    void getD2of5minLength(IMethodResult result);
    void setD2of5minLength(int d2of5minLength, IMethodResult result);
    void getD2of5redundancy(IMethodResult result);
    void setD2of5redundancy(boolean d2of5redundancy, IMethodResult result);
    void getDatamatrix(IMethodResult result);
    void setDatamatrix(boolean datamatrix, IMethodResult result);
    void getEan13(IMethodResult result);
    void setEan13(boolean ean13, IMethodResult result);
    void getEan8(IMethodResult result);
    void setEan8(boolean ean8, IMethodResult result);
    void getEan8convertToEan13(IMethodResult result);
    void setEan8convertToEan13(boolean ean8convertToEan13, IMethodResult result);
    void getI2of5(IMethodResult result);
    void setI2of5(boolean i2of5, IMethodResult result);
    void getI2of5convertToEan13(IMethodResult result);
    void setI2of5convertToEan13(boolean i2of5convertToEan13, IMethodResult result);
    void getI2of5maxLength(IMethodResult result);
    void setI2of5maxLength(int i2of5maxLength, IMethodResult result);
    void getI2of5minLength(IMethodResult result);
    void setI2of5minLength(int i2of5minLength, IMethodResult result);
    void getI2of5redundancy(IMethodResult result);
    void setI2of5redundancy(boolean i2of5redundancy, IMethodResult result);
    void getI2of5reportCheckDigit(IMethodResult result);
    void setI2of5reportCheckDigit(boolean i2of5reportCheckDigit, IMethodResult result);
    void getI2of5verifyCheckDigit(IMethodResult result);
    void setI2of5verifyCheckDigit(String i2of5verifyCheckDigit, IMethodResult result);
    void getKorean3of5(IMethodResult result);
    void setKorean3of5(boolean korean3of5, IMethodResult result);
    void getKorean3of5redundancy(IMethodResult result);
    void setKorean3of5redundancy(boolean korean3of5redundancy, IMethodResult result);
    void getKorean3of5maxLength(IMethodResult result);
    void setKorean3of5maxLength(int korean3of5maxLength, IMethodResult result);
    void getKorean3of5minLength(IMethodResult result);
    void setKorean3of5minLength(int korean3of5minLength, IMethodResult result);
    void getMacroPdf(IMethodResult result);
    void setMacroPdf(boolean macroPdf, IMethodResult result);
    void getMacroPdfBufferLabels(IMethodResult result);
    void setMacroPdfBufferLabels(boolean macroPdfBufferLabels, IMethodResult result);
    void getMacroPdfConvertToPdf417(IMethodResult result);
    void setMacroPdfConvertToPdf417(boolean macroPdfConvertToPdf417, IMethodResult result);
    void getMacroPdfExclusive(IMethodResult result);
    void setMacroPdfExclusive(boolean macroPdfExclusive, IMethodResult result);
    void getMacroMicroPdf(IMethodResult result);
    void setMacroMicroPdf(boolean macroMicroPdf, IMethodResult result);
    void getMacroMicroPdfBufferLabels(IMethodResult result);
    void setMacroMicroPdfBufferLabels(boolean macroMicroPdfBufferLabels, IMethodResult result);
    void getMacroMicroPdfConvertToMicroPdf(IMethodResult result);
    void setMacroMicroPdfConvertToMicroPdf(boolean macroMicroPdfConvertToMicroPdf, IMethodResult result);
    void getMacroMicroPdfExclusive(IMethodResult result);
    void setMacroMicroPdfExclusive(boolean macroMicroPdfExclusive, IMethodResult result);
    void getMacroMicroPdfReportAppendInfo(IMethodResult result);
    void setMacroMicroPdfReportAppendInfo(boolean macroMicroPdfReportAppendInfo, IMethodResult result);
    void getMatrix2of5(IMethodResult result);
    void setMatrix2of5(boolean matrix2of5, IMethodResult result);
    void getMatrix2of5maxLength(IMethodResult result);
    void setMatrix2of5maxLength(int matrix2of5maxLength, IMethodResult result);
    void getMatrix2of5minLength(IMethodResult result);
    void setMatrix2of5minLength(int matrix2of5minLength, IMethodResult result);
    void getMatrix2of5reportCheckDigit(IMethodResult result);
    void setMatrix2of5reportCheckDigit(boolean matrix2of5reportCheckDigit, IMethodResult result);
    void getMatrix2of5verifyCheckDigit(IMethodResult result);
    void setMatrix2of5verifyCheckDigit(boolean matrix2of5verifyCheckDigit, IMethodResult result);
    void getMaxiCode(IMethodResult result);
    void setMaxiCode(boolean maxiCode, IMethodResult result);
    void getMicroPdf(IMethodResult result);
    void setMicroPdf(boolean microPdf, IMethodResult result);
    void getMicroQr(IMethodResult result);
    void setMicroQr(boolean microQr, IMethodResult result);
    void getMsi(IMethodResult result);
    void setMsi(boolean msi, IMethodResult result);
    void getMsiCheckDigits(IMethodResult result);
    void setMsiCheckDigits(String msiCheckDigits, IMethodResult result);
    void getMsiCheckDigitScheme(IMethodResult result);
    void setMsiCheckDigitScheme(String msiCheckDigitScheme, IMethodResult result);
    void getMsiMaxLength(IMethodResult result);
    void setMsiMaxLength(int msiMaxLength, IMethodResult result);
    void getMsiMinLength(IMethodResult result);
    void setMsiMinLength(int msiMinLength, IMethodResult result);
    void getMsiRedundancy(IMethodResult result);
    void setMsiRedundancy(boolean msiRedundancy, IMethodResult result);
    void getMsiReportCheckDigit(IMethodResult result);
    void setMsiReportCheckDigit(boolean msiReportCheckDigit, IMethodResult result);
    void getPdf417(IMethodResult result);
    void setPdf417(boolean pdf417, IMethodResult result);
    void getSignature(IMethodResult result);
    void setSignature(boolean signature, IMethodResult result);
    void getSignatureImageHeight(IMethodResult result);
    void setSignatureImageHeight(int signatureImageHeight, IMethodResult result);
    void getSignatureImageWidth(IMethodResult result);
    void setSignatureImageWidth(int signatureImageWidth, IMethodResult result);
    void getSignatureImageQuality(IMethodResult result);
    void setSignatureImageQuality(int signatureImageQuality, IMethodResult result);
    void getAusPostal(IMethodResult result);
    void setAusPostal(boolean ausPostal, IMethodResult result);
    void getCanPostal(IMethodResult result);
    void setCanPostal(boolean canPostal, IMethodResult result);
    void getDutchPostal(IMethodResult result);
    void setDutchPostal(boolean dutchPostal, IMethodResult result);
    void getJapPostal(IMethodResult result);
    void setJapPostal(boolean japPostal, IMethodResult result);
    void getUkPostal(IMethodResult result);
    void setUkPostal(boolean ukPostal, IMethodResult result);
    void getUkPostalReportCheckDigit(IMethodResult result);
    void setUkPostalReportCheckDigit(boolean ukPostalReportCheckDigit, IMethodResult result);
    void getUs4state(IMethodResult result);
    void setUs4state(boolean us4state, IMethodResult result);
    void getUs4stateFics(IMethodResult result);
    void setUs4stateFics(boolean us4stateFics, IMethodResult result);
    void getUsPlanet(IMethodResult result);
    void setUsPlanet(boolean usPlanet, IMethodResult result);
    void getUsPlanetReportCheckDigit(IMethodResult result);
    void setUsPlanetReportCheckDigit(boolean usPlanetReportCheckDigit, IMethodResult result);
    void getUsPostNet(IMethodResult result);
    void setUsPostNet(boolean usPostNet, IMethodResult result);
    void getUsPostNetReportCheckDigit(IMethodResult result);
    void setUsPostNetReportCheckDigit(boolean usPostNetReportCheckDigit, IMethodResult result);
    void getQrCode(IMethodResult result);
    void setQrCode(boolean qrCode, IMethodResult result);
    void getGs1dataBar(IMethodResult result);
    void setGs1dataBar(boolean gs1dataBar, IMethodResult result);
    void getGs1dataBarExpanded(IMethodResult result);
    void setGs1dataBarExpanded(boolean gs1dataBarExpanded, IMethodResult result);
    void getGs1dataBarLimited(IMethodResult result);
    void setGs1dataBarLimited(boolean gs1dataBarLimited, IMethodResult result);
    void getTlc39(IMethodResult result);
    void setTlc39(boolean tlc39, IMethodResult result);
    void getTrioptic39(IMethodResult result);
    void setTrioptic39(boolean trioptic39, IMethodResult result);
    void getTrioptic39Redundancy(IMethodResult result);
    void setTrioptic39Redundancy(boolean trioptic39Redundancy, IMethodResult result);
    void getUpcEanBookland(IMethodResult result);
    void setUpcEanBookland(boolean upcEanBookland, IMethodResult result);
    void getUpcEanBooklandFormat(IMethodResult result);
    void setUpcEanBooklandFormat(String upcEanBooklandFormat, IMethodResult result);
    void getUpcEanConvertGs1dataBarToUpcEan(IMethodResult result);
    void setUpcEanConvertGs1dataBarToUpcEan(boolean upcEanConvertGs1dataBarToUpcEan, IMethodResult result);
    void getUpcEanCoupon(IMethodResult result);
    void setUpcEanCoupon(boolean upcEanCoupon, IMethodResult result);
    void getUpcEanLinearDecode(IMethodResult result);
    void setUpcEanLinearDecode(boolean upcEanLinearDecode, IMethodResult result);
    void getUpcEanRandomWeightCheckDigit(IMethodResult result);
    void setUpcEanRandomWeightCheckDigit(boolean upcEanRandomWeightCheckDigit, IMethodResult result);
    void getUpcEanRetryCount(IMethodResult result);
    void setUpcEanRetryCount(int upcEanRetryCount, IMethodResult result);
    void getUpcEanSecurityLevel(IMethodResult result);
    void setUpcEanSecurityLevel(int upcEanSecurityLevel, IMethodResult result);
    void getUpcEanSupplemental2(IMethodResult result);
    void setUpcEanSupplemental2(boolean upcEanSupplemental2, IMethodResult result);
    void getUpcEanSupplemental5(IMethodResult result);
    void setUpcEanSupplemental5(boolean upcEanSupplemental5, IMethodResult result);
    void getUpcEanSupplementalMode(IMethodResult result);
    void setUpcEanSupplementalMode(String upcEanSupplementalMode, IMethodResult result);
    void getUpca(IMethodResult result);
    void setUpca(boolean upca, IMethodResult result);
    void getUpcaPreamble(IMethodResult result);
    void setUpcaPreamble(String upcaPreamble, IMethodResult result);
    void getUpcaReportCheckDigit(IMethodResult result);
    void setUpcaReportCheckDigit(boolean upcaReportCheckDigit, IMethodResult result);
    void getUpce0(IMethodResult result);
    void setUpce0(boolean upce0, IMethodResult result);
    void getUpce0convertToUpca(IMethodResult result);
    void setUpce0convertToUpca(boolean upce0convertToUpca, IMethodResult result);
    void getUpce0preamble(IMethodResult result);
    void setUpce0preamble(String upce0preamble, IMethodResult result);
    void getUpce0reportCheckDigit(IMethodResult result);
    void setUpce0reportCheckDigit(boolean upce0reportCheckDigit, IMethodResult result);
    void getUpce1(IMethodResult result);
    void setUpce1(boolean upce1, IMethodResult result);
    void getUpce1convertToUpca(IMethodResult result);
    void setUpce1convertToUpca(boolean upce1convertToUpca, IMethodResult result);
    void getUpce1preamble(IMethodResult result);
    void setUpce1preamble(String upce1preamble, IMethodResult result);
    void getUpce1reportCheckDigit(IMethodResult result);
    void setUpce1reportCheckDigit(boolean upce1reportCheckDigit, IMethodResult result);
    void getWebcode(IMethodResult result);
    void setWebcode(boolean webcode, IMethodResult result);
    void getWebcodeDecodeGtSubtype(IMethodResult result);
    void setWebcodeDecodeGtSubtype(boolean webcodeDecodeGtSubtype, IMethodResult result);
    void getRsmModelNumber(IMethodResult result);
    void getRsmSerialNumber(IMethodResult result);
    void getRsmDateOfManufacture(IMethodResult result);
    void getRsmDateOfService(IMethodResult result);
    void getRsmBluetoothAddress(IMethodResult result);
    void getRsmFirmwareVersion(IMethodResult result);
    void getRsmDeviceClass(IMethodResult result);
    void getRsmBatteryStatus(IMethodResult result);
    void getRsmBatteryCapacity(IMethodResult result);
    void getRsmBatteryId(IMethodResult result);
    void getRsmBluetoothAuthentication(IMethodResult result);
    void setRsmBluetoothAuthentication(boolean rsmBluetoothAuthentication, IMethodResult result);
    void getRsmBluetoothEncryption(IMethodResult result);
    void setRsmBluetoothEncryption(boolean rsmBluetoothEncryption, IMethodResult result);
    void getRsmBluetoothPinCode(IMethodResult result);
    void setRsmBluetoothPinCode(String rsmBluetoothPinCode, IMethodResult result);
    void getRsmBluetoothPinCodeType(IMethodResult result);
    void setRsmBluetoothPinCodeType(String rsmBluetoothPinCodeType, IMethodResult result);
    void getRsmBluetoothReconnectionAttempts(IMethodResult result);
    void setRsmBluetoothReconnectionAttempts(int rsmBluetoothReconnectionAttempts, IMethodResult result);
    void getRsmBluetoothBeepOnReconnectAttempt(IMethodResult result);
    void setRsmBluetoothBeepOnReconnectAttempt(boolean rsmBluetoothBeepOnReconnectAttempt, IMethodResult result);
    void getRsmBluetoothHidAutoReconnect(IMethodResult result);
    void setRsmBluetoothHidAutoReconnect(String rsmBluetoothHidAutoReconnect, IMethodResult result);
    void getRsmBluetoothFriendlyName(IMethodResult result);
    void setRsmBluetoothFriendlyName(String rsmBluetoothFriendlyName, IMethodResult result);
    void getRsmBluetoothInquiryMode(IMethodResult result);
    void setRsmBluetoothInquiryMode(String rsmBluetoothInquiryMode, IMethodResult result);
    void getRsmBluetoothAutoReconnect(IMethodResult result);
    void setRsmBluetoothAutoReconnect(String rsmBluetoothAutoReconnect, IMethodResult result);
    void getRsmForceSavePairingBarcode(IMethodResult result);
    void setRsmForceSavePairingBarcode(boolean rsmForceSavePairingBarcode, IMethodResult result);
    void getRsmLowBatteryIndication(IMethodResult result);
    void setRsmLowBatteryIndication(boolean rsmLowBatteryIndication, IMethodResult result);
    void getRsmLowBatteryIndicationCycle(IMethodResult result);
    void setRsmLowBatteryIndicationCycle(int rsmLowBatteryIndicationCycle, IMethodResult result);
    void getRsmScanLineWidth(IMethodResult result);
    void setRsmScanLineWidth(String rsmScanLineWidth, IMethodResult result);
    void getRsmGoodScansDelay(IMethodResult result);
    void setRsmGoodScansDelay(int rsmGoodScansDelay, IMethodResult result);
    void getRsmDecodeFeedback(IMethodResult result);
    void setRsmDecodeFeedback(boolean rsmDecodeFeedback, IMethodResult result);
    void getRsmIgnoreCode128Usps(IMethodResult result);
    void setRsmIgnoreCode128Usps(boolean rsmIgnoreCode128Usps, IMethodResult result);
    void getRsmScanTriggerWakeup(IMethodResult result);
    void setRsmScanTriggerWakeup(boolean rsmScanTriggerWakeup, IMethodResult result);
    void getRsmMems(IMethodResult result);
    void setRsmMems(boolean rsmMems, IMethodResult result);
    void getRsmProximityEnable(IMethodResult result);
    void setRsmProximityEnable(boolean rsmProximityEnable, IMethodResult result);
    void getRsmProximityContinuous(IMethodResult result);
    void setRsmProximityContinuous(boolean rsmProximityContinuous, IMethodResult result);
    void getRsmProximityDistance(IMethodResult result);
    void setRsmProximityDistance(String rsmProximityDistance, IMethodResult result);
    void getRsmPagingEnable(IMethodResult result);
    void setRsmPagingEnable(boolean rsmPagingEnable, IMethodResult result);
    void getRsmPagingBeepSequence(IMethodResult result);
    void setRsmPagingBeepSequence(int rsmPagingBeepSequence, IMethodResult result);
    void enable(Map<String, String> propertyMap, IMethodResult result);
    void registerBluetoothStatus(IMethodResult result);
    void start(IMethodResult result);
    void stop(IMethodResult result);
    void disable(IMethodResult result);
    void barcode_recognize(String imageFilePath, IMethodResult result);
    void getSupportedProperties(IMethodResult result);
    void take(Map<String, String> propertyMap, IMethodResult result);
    void take_barcode(String rubyCallbackURL, Map<String, String> propertyMap, IMethodResult result);
    void commandRemoteScanner(String command, IMethodResult result);
};
